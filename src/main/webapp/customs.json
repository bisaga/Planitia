{
  "elements": {
    "carbon-route": {
      "name": "carbon-route",
      "description": "\n`carbon-route` is an element that enables declarative, self-describing routing\nfor a web app.\n\n&gt; *n.b. carbon-route is still in beta. We expect it will need some changes. We're counting on your feedback!*\n\nIn its typical usage, a `carbon-route` element consumes an object that describes\nsome state about the current route, via the `route` property. It then parses\nthat state using the `pattern` property, and produces two artifacts: some `data`\nrelated to the `route`, and a `tail` that contains the rest of the `route` that\ndid not match.\n\nHere is a basic example, when used with `carbon-location`:\n\n    &lt;carbon-location route=\"{{route}}\"&gt;&lt;/carbon-location&gt;\n    &lt;carbon-route\n        route=\"{{route}}\"\n        pattern=\"/:page\"\n        data=\"{{data}}\"\n        tail=\"{{tail}}\"&gt;\n    &lt;/carbon-route&gt;\n\nIn the above example, the `carbon-location` produces a `route` value. Then, the\n`route.path` property is matched by comparing it to the `pattern` property. If\nthe `pattern` property matches `route.path`, the `carbon-route` will set or update\nits `data` property with an object whose properties correspond to the parameters\nin `pattern`. So, in the above example, if `route.path` was `'/about'`, the value\nof `data` would be `{\"page\": \"about\"}`.\n\nThe `tail` property represents the remaining part of the route state after the\n`pattern` has been applied to a matching `route`.\n\nHere is another example, where `tail` is used:\n\n    &lt;carbon-location route=\"{{route}}\"&gt;&lt;/carbon-location&gt;\n    &lt;carbon-route\n        route=\"{{route}}\"\n        pattern=\"/:page\"\n        data=\"{{routeData}}\"\n        tail=\"{{subroute}}\"&gt;\n    &lt;/carbon-route&gt;\n    &lt;carbon-route\n        route=\"{{subroute}}\"\n        pattern=\"/:id\"\n        data=\"{{subrouteData}}\"&gt;\n    &lt;/carbon-route&gt;\n\nIn the above example, there are two `carbon-route` elements. The first\n`carbon-route` consumes a `route`. When the `route` is matched, the first\n`carbon-route` also produces `routeData` from its `data`, and `subroute` from\nits `tail`. The second `carbon-route` consumes the `subroute`, and when it\nmatches, it produces an object called `subrouteData` from its `tail`.\n\nSo, when `route.path` is `'/about'`, the `routeData` object will look like\nthis: `{ page: 'about' }`\n\nAnd `subrouteData` will be null. However, if `route.path` changes to\n`'/article/123'`, the `routeData` object will look like this:\n`{ page: 'article' }`\n\nAnd the `subrouteData` will look like this: `{ id: '123' }`\n\n`carbon-route` is responsive to bi-directional changes to the `data` objects\nthey produce. So, if `routeData.page` changed from `'article'` to `'about'`,\nthe `carbon-route` will update `route.path`. This in-turn will update the\n`carbon-location`, and cause the global location bar to change its value.\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": ""
        },
        "data": {
          "type": "Object",
          "description": "\nThe parameterized values that are extracted from the route as\ndescribed by `pattern`.\n       "
        },
        "pattern": {
          "type": "String",
          "description": "\nThe pattern of slash-separated segments to match `path` against.\n\nFor example the pattern \"/foo\" will match \"/foo\" or \"/foo/bar\"\nbut not \"/foobar\".\n\nPath segments like `/:named` are mapped to properties on the `data` object.\n       "
        },
        "queryParams": {
          "type": "?Object",
          "description": "\n"
        },
        "route": {
          "type": "Object",
          "description": "\nThe URL component managed by this element.\n       "
        },
        "tail": {
          "type": "Object",
          "description": "\nThe part of `path` NOT consumed by `pattern`.\n       "
        },
        "__getLink": {
          "type": "Function",
          "description": ""
        },
        "__queryParamsChanged": {
          "type": "Function",
          "description": ""
        },
        "__resetProperties": {
          "type": "Function",
          "description": ""
        },
        "__routeQueryParamsChanged": {
          "type": "Function",
          "description": " Deal with the query params object being assigned to wholesale"
        },
        "__tailPathChanged": {
          "type": "Function",
          "description": ""
        },
        "__tailQueryParamsChanged": {
          "type": "Function",
          "description": ""
        },
        "__tryToMatch": {
          "type": "Function",
          "description": "this.data = {};"
        },
        "__updatePathOnDataChange": {
          "type": "Function",
          "description": ""
        },
        "_matched": {
          "type": "?string",
          "description": "\n"
        },
        "_skipMatch": {
          "type": "Boolean",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "carbon-location": {
      "name": "carbon-location",
      "description": "\n`carbon-location` is an element that provides synchronization between the\nbrowser location bar and the state of an app. When created, `carbon-location`\nelements will automatically watch the global location for changes. As changes\noccur, `carbon-location` produces and updates an object called `route`. This\n`route` object is suitable for passing into a `carbon-route`, and other similar\nelements.\n\nAn example of a route object that describes the URL\n`https://elements.polymer-project.org/elements/carbon-route-converter?foo=bar&baz=qux`:\n\n    {\n      prefix: '',\n      path: '/elements/carbon-route-converter'\n    }\n\nExample Usage:\n\n    &lt;carbon-location route=\"{{route}}\"&gt;&lt;/carbon-location&gt;\n    &lt;carbon-route route=\"{{route}}\" pattern=\"/:page\" data=\"{{data}}\"&gt;&lt;/carbon-route&gt;\n\nAs you can see above, the `carbon-location` element produces a `route` and that\nproperty is then bound into the `carbon-route` element. The bindings are two-\ndirectional, so when changes to the `route` object occur within `carbon-route`,\nthey automatically reflect back to the global location.\n\nA `carbon-location` can be configured to use the hash part of a URL as the\ncanonical source for path information.\n\nExample:\n\n    &lt;carbon-location route=\"{{route}}\" use-hash-as-path&gt;&lt;/carbon-location&gt;\n\n",
      "attributes": {
        "route": {
          "type": "Object",
          "description": "\nA model representing the deserialized path through the route tree, as\nwell as the current queryParams.\n         "
        },
        "urlSpaceRegex": {
          "type": "(string|RegExp)",
          "description": "\nA regexp that defines the set of URLs that should be considered part\nof this web app.\n\nClicking on a link that matches this regex won't result in a full page\nnavigation, but will instead just update the URL state in place.\n\nThis regexp is given everything after the origin in an absolute\nURL. So to match just URLs that start with /search/ do:\n    url-space-regex=\"^/search/\"\n\n"
        },
        "useHashAsPath": {
          "type": "Boolean",
          "description": "\nIn many scenarios, it is convenient to treat the `hash` as a stand-in\nalternative to the `path`. For example, if deploying an app to a static\nweb server (e.g., Github Pages) - where one does not have control over\nserver-side routing - it is usually a better experience to use the hash\nto represent paths through one's app.\n\nWhen this property is set to true, the `hash` will be used in place of\n\nthe `path` for generating a `route`.\n         "
        },
        "__computeRoutePath": {
          "type": "Function",
          "description": ""
        },
        "__hash": {
          "type": "String",
          "description": "\nThe hash portion of the current URL.\n         "
        },
        "__onPathChanged": {
          "type": "Function",
          "description": ""
        },
        "__path": {
          "type": "String",
          "description": "\nThe pathname component of the current URL.\n         "
        },
        "__query": {
          "type": "String",
          "description": "\nThe query string portion of the current URL.\n         "
        },
        "__queryParams": {
          "type": "Object",
          "description": "\nA set of key/value pairs that are universally accessible to branches\nof the route tree.\n         "
        }
      }
    },
    "carbon-route-converter": {
      "name": "carbon-route-converter",
      "description": "\n`carbon-route-converter` provides a means to convert a path and query\nparameters into a route object and vice versa. This produced route object\nis to be fed into route-consuming elements such as `carbon-route`.\n\n&gt; n.b. This element is intended to be a primitive of the routing system and for\ncreating bespoke routing solutions from scratch. To simply include routing in\nan app, please refer to [carbon-location](https://github.com/PolymerElements/carbon-route/blob/master/carbon-location.html)\nand [carbon-route](https://github.com/PolymerElements/carbon-route/blob/master/carbon-route.html).\n\nAn example of a route element that describes\n`https://elements.polymer-project.org/elements/carbon-route-converter?foo=bar&baz=qux`:\n\n    {\n      prefix: '',\n      path: '/elements/carbon-route-converter',\n      queryParams: {\n        foo: 'bar',\n        baz: 'qux'\n      }\n    }\n\nExample Usage:\n\n    &lt;iron-location path=\"{{path}}\" query=\"{{query}}\"&gt;&lt;/iron-location&gt;\n    &lt;iron-query-params\n        params-string=\"{{query}}\"\n        params-object=\"{{queryParams}}\"&gt;\n    &lt;/iron-query-params&gt;\n    &lt;carbon-route-converter\n        path=\"{{path}}\"\n        query-params=\"{{queryParams}}\"\n        route=\"{{route}}\"&gt;\n    &lt;/carbon-route-converter&gt;\n    &lt;carbon-route route='{{route}}' pattern='/:page' data='{{data}}'&gt;\n    &lt;/carbon-route&gt;\n\nThis is a simplified implementation of the `carbon-location` element. Here the\n`iron-location` produces a path and a query, the `iron-query-params` consumes\nthe query and produces a queryParams object, and the `carbon-route-converter`\nconsumes the path and the query params and converts it into a route which is in\nturn is consumed by the `carbon-route`.\n\n",
      "attributes": {
        "path": {
          "type": "String",
          "description": "\nThe serialized path through the route tree. This corresponds to the\n`window.location.pathname` value, and will update to reflect changes\nto that value.\n       "
        },
        "queryParams": {
          "type": "?Object",
          "description": "\nA set of key/value pairs that are universally accessible to branches of\nthe route tree.\n\n"
        },
        "route": {
          "type": "?Object",
          "description": "\nA model representing the deserialized path through the route tree, as\nwell as the current queryParams.\n\nA route object is the kernel of the routing system. It is intended to\nbe fed into consuming elements such as `carbon-route`.\n\n"
        },
        "_locationChanged": {
          "type": "Function",
          "description": "\nHandler called when the path or queryParams change.\n\n"
        },
        "_routeChanged": {
          "type": "Function",
          "description": "\nHandler called when the route prefix and route path change.\n\n"
        },
        "_routeQueryParamsChanged": {
          "type": "Function",
          "description": "\nHandler called when the route queryParams change.\n\n"
        },
        "created": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "firebase-collection": {
      "name": "firebase-collection",
      "description": "\nAn element wrapper for the Firebase API that provides a view into the provided\nFirebase location as an ordered collection.\n\nBy default, Firebase yields values as unsorted document objects, where each of\nthe children are accessible via object keys. The `&lt;firebase-collection&gt;`\nelement allows Firebase API orderBy*, limitTo* and other query-oriented methods\nto be specified declaratively. The element then produces and maintains an Array\nof ordered child items of the document that is convenient for iterating over\nin other elements such as `&lt;template is=\"dom-repeat\"&gt;`.\n\nExample:\n\n      &lt;template is=\"dom-bind\"&gt;\n        &lt;firebase-collection\n          order-by-child=\"height\"\n          limit-to-first=\"3\"\n          location=\"https://dinosaur-facts.firebaseio.com/dinosaurs\"\n          data=\"{{dinosaurs}}\"&gt;&lt;/firebase-collection&gt;\n        &lt;template is=\"dom-repeat\" items=\"[[dinosaurs]]\" as=\"dinosaur\"&gt;\n          &lt;h4&gt;[[dinosaur.__firebaseKey__]]&lt;/h4&gt;\n          Height: &lt;span&gt;[[dinosaur.height]]&lt;/span&gt;m\n        &lt;/template&gt;\n      &lt;/template&gt;\n\nAs you may have noticed above, the original key of each item is available as\nthe `__firebaseKey__` property on the item.\n\nThe element makes special accomodations for documents whose children are\nprimitive values. A primitive value is wrapped in an object with the form:\n\n```javascript\n{\n  value: /* original primitive value */\n  __firebaseKey__: /* key of primitive value in parent document */\n}\n```\n\nAccessor methods such as `add` and `remove` are provided to enable convenient\nmanipulation of the collection without direct knowledge of Firebase key values.\n\n",
      "attributes": {
        "add": {
          "type": "Function",
          "description": "\nAdd an item to the document referenced at `location`. A key associated\nwith the item will be created by Firebase, and can be accessed via the\nFirebase Query instance returned by this method.\n\n"
        },
        "data": {
          "type": "Array",
          "description": "\nAn ordered array of data items produced by the current Firebase Query\ninstance.\n         "
        },
        "dataAsObject": {
          "type": "",
          "description": ""
        },
        "disconnect": {
          "type": "Function",
          "description": "\nDisconnects the current Firebase Query instance.\n     "
        },
        "endAt": {
          "type": "String",
          "description": "\nSpecify an end record for the set of records reflected in the\ncollection.\n         "
        },
        "equalTo": {
          "type": "String",
          "description": "\nSpecify to create a query which includes children which match the\nspecified value. The argument type depends on which orderBy*() function\nwas used in this query. Specify a value that matches the orderBy*()\ntype.\n         "
        },
        "getByKey": {
          "type": "Function",
          "description": "\nLook up an item in the local `data` Array by key.\n\n"
        },
        "limitToFirst": {
          "type": "Number",
          "description": "\nSpecify a maximum number of records reflected on the client limited to\nthe first certain number of children.\n         "
        },
        "limitToLast": {
          "type": "Number",
          "description": "\nSpecify a maximum number of records reflected on the client limited to\nthe last certain number of children.\n         "
        },
        "location": {
          "type": "String",
          "description": "\nA Firebase API location that references an accessible document.\n       "
        },
        "log": {
          "type": "Boolean",
          "description": "\nIf true, verbose debugging information will be printed to the console.\n       "
        },
        "orderByChild": {
          "type": "String",
          "description": "\nSpecify a child key to order the set of records reflected on the\nclient.\n         "
        },
        "orderByKey": {
          "type": "Boolean",
          "description": "\nSpecify to order by key the set of records reflected on the client.\n         "
        },
        "orderByPriority": {
          "type": "Boolean",
          "description": "\nSpecify to order by priority the set of records reflected on the\nclient.\n         "
        },
        "orderByValue": {
          "type": "Boolean",
          "description": "\nSpecify to order by value the set of records reflected on the client.\n         "
        },
        "orderValueType": {
          "type": "String",
          "description": "\nSpecify to override the type used when deserializing the value of\n`start-at`, `end-at` and `equal-to` attributes. By default, these\nvalues are always deserialized as `String`, but sometimes it is\npreferrable to deserialize these values as e.g., `Number`.\n\nAccepted values for this attribute, and their corresponding\ndeserialization types, are as follows:\n\n - `string` =&gt; `String` (default)\n - `number` =&gt; `Number`\n - `boolean` =&gt; `Boolean`\n         "
        },
        "query": {
          "type": "Object",
          "description": "\nA pointer to the current Firebase Query instance being used to\npopulate `data`.\n         "
        },
        "remove": {
          "type": "Function",
          "description": "\nRemove an item from the document referenced at `location`. The item\nis assumed to be an identical reference to an item already in the\n`data` Array.\n\n"
        },
        "removeByKey": {
          "type": "Function",
          "description": "\nRemove an item from the document associated with `location` by key.\n\n"
        },
        "startAt": {
          "type": "String",
          "description": "\nSpecify a start record for the set of records reflected in the\ncollection.\n         "
        },
        "_adoptSplices": {
          "type": "Function",
          "description": ""
        },
        "_applyLocalDataChange": {
          "type": "Function",
          "description": " Virtual.."
        },
        "_applyRemoteDataChange": {
          "type": "Function",
          "description": ""
        },
        "_applySubPathChange": {
          "type": "Function",
          "description": ""
        },
        "_computeEndAt": {
          "type": "Function",
          "description": ""
        },
        "_computeEqualTo": {
          "type": "Function",
          "description": ""
        },
        "_computeOrderByMethodName": {
          "type": "Function",
          "description": ""
        },
        "_computeOrderByTypeCast": {
          "type": "Function",
          "description": ""
        },
        "_computeQuery": {
          "type": "Function",
          "description": ""
        },
        "_computeStartAt": {
          "type": "Function",
          "description": ""
        },
        "_dataChanged": {
          "type": "Function",
          "description": ""
        },
        "_endAt": {
          "type": "Object",
          "description": ""
        },
        "_equalTo": {
          "type": "Object",
          "description": ""
        },
        "_error": {
          "type": "Function",
          "description": ""
        },
        "_listenToQuery": {
          "type": "Function",
          "description": ""
        },
        "_localDataChanged": {
          "type": "Function",
          "description": ""
        },
        "_log": {
          "type": "Function",
          "description": ""
        },
        "_onFirebaseChildAdded": {
          "type": "Function",
          "description": ""
        },
        "_onFirebaseChildChanged": {
          "type": "Function",
          "description": ""
        },
        "_onFirebaseChildMoved": {
          "type": "Function",
          "description": ""
        },
        "_onFirebaseChildRemoved": {
          "type": "Function",
          "description": ""
        },
        "_onQueryCancel": {
          "type": "Function",
          "description": ""
        },
        "_onQueryChildAdded": {
          "type": "Function",
          "description": ""
        },
        "_onQueryChildChanged": {
          "type": "Function",
          "description": ""
        },
        "_onQueryChildMoved": {
          "type": "Function",
          "description": ""
        },
        "_onQueryChildRemoved": {
          "type": "Function",
          "description": ""
        },
        "_onQueryValue": {
          "type": "Function",
          "description": ""
        },
        "_orderByMethodName": {
          "type": "Object",
          "description": ""
        },
        "_orderByTypeCast": {
          "type": "Object",
          "description": ""
        },
        "_queryChanged": {
          "type": "Function",
          "description": ""
        },
        "_startAt": {
          "type": "Object",
          "description": ""
        },
        "_stopListeningToQuery": {
          "type": "Function",
          "description": ""
        },
        "_valueFromSnapshot": {
          "type": "Function",
          "description": ""
        },
        "_valueMap": {
          "type": "Object",
          "description": ""
        },
        "_valueToPersistable": {
          "type": "Function",
          "description": ""
        },
        "_warn": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "firebase-document": {
      "name": "firebase-document",
      "description": "\nAn element wrapper for the Firebase API.\n\nA `&lt;firebase-document&gt;` is a reference to a remote document somewhere on\nFirebase. The element fetchs a document at a provided `location`, and exposes\nit as an Object that is suitable for deep two-way databinding.\n\nExample:\n\n    &lt;firebase-document\n      location=\"https://dinosaur-facts.firebaseio.com/dinosaurs\"\n      data=\"{{dinosaurs}}\"&gt;&lt;/firebase-document&gt;\n\nIn the above example, if the `dinosaurs` object is data-bound elsewhere via\nPolymer's data-binding system, changes to the document will be automatically\nreflected in the remote document and any other clients referencing that\ndocument.\n\n",
      "attributes": {
        "data": {
          "type": "Object",
          "description": "\nThe `data` object mapped to `location`.\n       "
        },
        "dataAsObject": {
          "type": "",
          "description": ""
        },
        "disconnect": {
          "type": "Function",
          "description": "\nDisconnects the current Firebase Query instance.\n     "
        },
        "location": {
          "type": "String",
          "description": "\nA Firebase API location that references an accessible document.\n       "
        },
        "log": {
          "type": "Boolean",
          "description": "\nIf true, verbose debugging information will be printed to the console.\n       "
        },
        "query": {
          "type": "Object",
          "description": "\nFirebase Query object corresponding to `location`.\n       "
        },
        "_applyLocalDataChange": {
          "type": "Function",
          "description": " Virtual.."
        },
        "_applyRemoteDataChange": {
          "type": "Function",
          "description": ""
        },
        "_computeQuery": {
          "type": "Function",
          "description": ""
        },
        "_dataChanged": {
          "type": "Function",
          "description": ""
        },
        "_error": {
          "type": "Function",
          "description": ""
        },
        "_listenToQuery": {
          "type": "Function",
          "description": ""
        },
        "_localDataChanged": {
          "type": "Function",
          "description": ""
        },
        "_log": {
          "type": "Function",
          "description": ""
        },
        "_onFirebaseValue": {
          "type": "Function",
          "description": ""
        },
        "_onQueryCancel": {
          "type": "Function",
          "description": ""
        },
        "_onQueryChildAdded": {
          "type": "Function",
          "description": ""
        },
        "_onQueryChildChanged": {
          "type": "Function",
          "description": ""
        },
        "_onQueryChildMoved": {
          "type": "Function",
          "description": ""
        },
        "_onQueryChildRemoved": {
          "type": "Function",
          "description": ""
        },
        "_onQueryValue": {
          "type": "Function",
          "description": ""
        },
        "_queryChanged": {
          "type": "Function",
          "description": ""
        },
        "_removeRemoteDocumentChild": {
          "type": "Function",
          "description": ""
        },
        "_setRemoteDocumentChild": {
          "type": "Function",
          "description": ""
        },
        "_stopListeningToQuery": {
          "type": "Function",
          "description": ""
        },
        "_updateRemoteDocument": {
          "type": "Function",
          "description": ""
        },
        "_warn": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "firebase-auth": {
      "name": "firebase-auth",
      "description": "\nElement wrapper for the Firebase authentication API (https://www.firebase.com/docs/web/guide/user-auth.html).\n\n",
      "attributes": {
        "autoLogin": {
          "type": "Boolean",
          "description": "\nWhen true, login will be attempted if login status check determines no user is\nlogged in.  Should generally only be used with provider types that do not present\na login UI, such as 'anonymous'.\n       "
        },
        "changeEmail": {
          "type": "Function",
          "description": "\nChanges the email of a \"password provider\"-based user account.\n\nIf the operation is successful, the `email-changed` event is fired.\n\nIf the operation fails, the `error` event is fired, with `e.detail`\ncontaining error information supplied from Firebase.\n\n"
        },
        "changePassword": {
          "type": "Function",
          "description": "\nChanges the password of a \"password provider\"-based user account.\n\nIf the operation is successful, the `password-changed` event is fired.\n\nIf the operation fails, the `error` event is fired, with `e.detail`\ncontaining error information supplied from Firebase.\n\n"
        },
        "createUser": {
          "type": "Function",
          "description": "\nCreates a \"password provider\"-based user account.\n\nIf the operation is successful, the `user-created` event is fired.\n\nIf the operation fails, the `error` event is fired, with `e.detail`\ncontaining error information supplied from Firebase.\n\n"
        },
        "location": {
          "type": "String",
          "description": "\nFirebase location URL (must have simple login enabled via Forge interface).\n       "
        },
        "login": {
          "type": "Function",
          "description": "\nPerforms a login attempt, using the `provider` specified via attribute/property,\nor optionally via `provider` argument to the `login` function.  Optionally,\nprovider-specific login parameters can be specified via attribute (JSON)/property,\nor via the `params` argument to the `login` function.\n\nIf your `provider` is `custom` you must pass a Firebase Auth token as\n`params.token`. You can also optionally pass an auth token as `params.token` for\nproviders `facebook`, `google`, `github` and `twitter` to login headlessly.\n\nIf the login is successful, the `login` event is fired, with `e.detail.user`\ncontaining the authenticated user object from Firebase.\n\nIf login fails, the `error` event is fired, with `e.detail` containing error\ninformation supplied from Firebase.\n\nIf the browser supports `navigator.onLine` network status reporting and the\nnetwork is currently offline, the login attempt will be queued until the network\nis restored.\n\n"
        },
        "logout": {
          "type": "Function",
          "description": "\nPerforms a logout attempt.\n\nIf the logout is successful, the `logout` event is fired.\n\nIf logout fails, the `error` event is fired, with `e.detail` containing error\ninformation supplied from Firebase.\n\nIf the browswer supports `navigator.onLine` network status reporting and the\nnetwork is currently offline, the logout attempt will be queued until the network\nis restored.\n\n"
        },
        "options": {
          "type": "Object",
          "description": "\nProvider-specific options to pass to login, for provider types that take a second\nobject to pass firebase-specific options.  May be overridden at `login()`-time.\n       "
        },
        "params": {
          "type": "Object",
          "description": "\nProvider-specific parameters to pass to login.  May be overridden at `login()`-time.\n       "
        },
        "provider": {
          "type": "String",
          "description": "\nDefault login provider type.  May be one of: `anonymous`, `custom`, `password`\n`facebook`, `github`, `twitter`, `google`.\n       "
        },
        "redirect": {
          "type": "Boolean",
          "description": "\nWhen true, authentication will try to redirect instead of using a\npopup if possible.\n       "
        },
        "ref": {
          "type": "Object",
          "description": "\nA pointer to the Firebase instance being used by the firebase-auth element.\n       "
        },
        "removeUser": {
          "type": "Function",
          "description": "\nRemoves a \"password provider\"-based user account.\n\nIf the operation is successful, the `user-removed` event is fired.\n\nIf the operation fails, the `error` event is fired, with `e.detail`\ncontaining error information supplied from Firebase.\n\n"
        },
        "sendPasswordResetEmail": {
          "type": "Function",
          "description": "\nSends a password reset email for a \"password provider\"-based user account.\n\nIf the operation is successful, the `password-reset` event is fired.\n\nIf the operation fails, the `error` event is fired, with `e.detail`\ncontaining error information supplied from Firebase.\n\n"
        },
        "statusKnown": {
          "type": "Boolean",
          "description": "\nWhen true, login status can be determined by checking `user` property.\n       "
        },
        "user": {
          "type": "Object",
          "description": "\nWhen logged in, this property reflects the firebase user auth object.\n       "
        },
        "_authHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundAuthHandler": {
          "type": "Object",
          "description": ""
        },
        "_boundOnlineHandler": {
          "type": "Object",
          "description": ""
        },
        "_locationChanged": {
          "type": "Function",
          "description": ""
        },
        "_loginHandler": {
          "type": "Function",
          "description": ""
        },
        "_onlineHandler": {
          "type": "Function",
          "description": ""
        },
        "_queuedLogin": {
          "type": "Object",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "gold-cc-cvc-input": {
      "name": "gold-cc-cvc-input",
      "description": "\n`gold-cc-cvc-input` is a single-line text field with Material Design styling\nfor entering a credit card's CVC (Card Verification Code). It supports both\n4-digit Amex CVCs and non-Amex 3-digit CVCs\n\n    &lt;gold-cc-cvc-input&gt;&lt;/gold-cc-cvc-input&gt;\n\n    &lt;gold-cc-cvc-input card-type=\"amex\"&gt;&lt;/gold-cc-cvc-input&gt;\n\nIt may include an optional label, which by default is \"CVC\".\n\n    &lt;gold-cc-cvc-input label=\"Card Verification Value\"&gt;&lt;/gold-cc-cvc-input&gt;\n\nIt can be used together with a `gold-cc-input` by binding the `cardType` property:\n\n    &lt;gold-cc-input card-type=\"{{cardType}}\"&gt;&lt;/gold-cc-input&gt;\n    &lt;gold-cc-cvc-input card-type=\"[[cardType]]\"&gt;&lt;/gold-cc-cvc-input&gt;\n\n### Validation\n\nThe input considers a valid amex CVC to be 4 digits long, and 3 digits otherwise.\nThe `amex` attribute can also be bound to a `gold-cc-input`'s `card-type` attribute.\n\nThe input can be automatically validated as the user is typing by using\nthe `auto-validate` and `required` attributes. For manual validation, the\nelement also has a `validate()` method, which returns the validity of the\ninput as well sets any appropriate error messages and styles.\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\n",
      "attributes": {
        "accept": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `accept` property,\nused with type=file.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "allowedPattern": {
          "type": "String",
          "description": "\nSet this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `allowedPattern`\nproperty.\n       "
        },
        "alwaysFloatLabel": {
          "type": "Boolean",
          "description": "\nSet to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `alwaysFloatLabel` property.\n       "
        },
        "autocapitalize": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocapitalize` property.\n       "
        },
        "autocomplete": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocomplete` property.\n       "
        },
        "autocorrect": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocorrect` property.\n       "
        },
        "autofocus": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autofocus` property.\n       "
        },
        "autosave": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autosave` property,\nused with type=search.\n       "
        },
        "autoValidate": {
          "type": "Boolean",
          "description": "\nSet to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `autoValidate` property.\n       "
        },
        "cardType": {
          "type": "String",
          "description": "\nThe type of card that the CVC is for.\n           "
        },
        "charCounter": {
          "type": "Boolean",
          "description": "\nSet to true to show a character counter.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nSet to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `&lt;paper-input-container&gt;`'s and the input's `disabled` property.\n       "
        },
        "errorMessage": {
          "type": "String",
          "description": "\nThe error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;paper-input-error&gt;`'s content, if using.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "inputElement": {
          "type": "",
          "description": "\nReturns a reference to the input element.\n     "
        },
        "inputmode": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `inputmode` property.\n       "
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nReturns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`&lt;paper-input-container&gt;`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "label": {
          "type": "String",
          "description": "\nThe label for this input.\n           "
        },
        "list": {
          "type": "String",
          "description": "\nThe datalist of the input (if any). This should match the id of an existing `&lt;datalist&gt;`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `list` property.\n       "
        },
        "max": {
          "type": "String",
          "description": "\nThe maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-1-1\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `max` property.\n       "
        },
        "maxlength": {
          "type": "Number",
          "description": "\nThe maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `maxlength` property.\n       "
        },
        "min": {
          "type": "String",
          "description": "\nThe minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `min` property.\n       "
        },
        "minlength": {
          "type": "Number",
          "description": "\nThe minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `minlength` property.\n       "
        },
        "multiple": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`&lt;input is=\"iron-input\"&gt;`'s `multiple` property,\nused with type=file.\n       "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "noLabelFloat": {
          "type": "Boolean",
          "description": "\nSet to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `noLabelFloat` property.\n       "
        },
        "pattern": {
          "type": "String",
          "description": "\nA pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `pattern` property.\n       "
        },
        "placeholder": {
          "type": "String",
          "description": "\nA placeholder string in addition to the label. If this is set, the label will always float.\n       "
        },
        "preventInvalidInput": {
          "type": "Boolean",
          "description": "\nSet to true to prevent the user from entering invalid input. If you're\nusing PaperInputBehavior to  implement your own paper-input-like element,\nbind this to `&lt;input is=\"iron-input\"&gt;`'s `preventInvalidInput` property.\n       "
        },
        "readonly": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `readonly` property.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
        },
        "results": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `results` property,\nused with type=search.\n       "
        },
        "size": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `size` property.\n       "
        },
        "step": {
          "type": "String",
          "description": "\nLimits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `step` property.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "type": {
          "type": "String",
          "description": "\nThe type of the input. The supported types are `text`, `number` and `password`.\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;input is=\"iron-input\"&gt;`'s `type` property.\n       "
        },
        "updateValueAndPreserveCaret": {
          "type": "Function",
          "description": "\nRestores the cursor to its original position after updating the value.\n"
        },
        "validate": {
          "type": "Function",
          "description": "\nReturns true if the element has a valid value, and sets the visual\nerror state.\n\n"
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `validator` property.\n       "
        },
        "value": {
          "type": "String",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_amex": {
          "type": "Boolean",
          "description": ""
        },
        "_appendStringWithSpace": {
          "type": "Function",
          "description": ""
        },
        "_ariaDescribedBy": {
          "type": "String",
          "description": ""
        },
        "_ariaLabelledBy": {
          "type": "String",
          "description": ""
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeAlwaysFloatLabel": {
          "type": "Function",
          "description": ""
        },
        "_computeIsAmex": {
          "type": "Function",
          "description": ""
        },
        "_computeRequiredLength": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_focusableElement": {
          "type": "",
          "description": "\nReturns a reference to the focusable element.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": "\nForward focus to inputElement. Overriden from IronControlState.\n     "
        },
        "_handleAutoValidate": {
          "type": "Function",
          "description": "\nIf `autoValidate` is true, then validates the element.\n     "
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onAddonAttached": {
          "type": "Function",
          "description": ""
        },
        "_onChange": {
          "type": "Function",
          "description": ""
        },
        "_onFocusedChanged": {
          "type": "Function",
          "description": "\nOveridden from Polymer.IronControlState.\n         "
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onShiftTabDown": {
          "type": "Function",
          "description": "\nHandler that is called when a shift+tab keypress is detected by the menu.\n\n"
        },
        "_onValueChanged": {
          "type": "Function",
          "description": "\nA handler that is called on input\n         "
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_requiredLength": {
          "type": "Number",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAriaLabelledBy": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "gold-cc-expiration-input": {
      "name": "gold-cc-expiration-input",
      "description": "\n`gold-cc-expiration-input` is a  single-line text field with Material Design styling\nfor entering a credit card's expiration date\n\n    &lt;gold-cc-expiration-input&gt;&lt;/gold-cc-expiration-input&gt;\n    &lt;gold-cc-expiration-input value=\"11/15\"&gt;&lt;/gold-cc-expiration-input&gt;\n\nIt may include an optional label, which by default is \"Expiration Date\".\n\n    &lt;gold-cc-expiration-input label=\"Date\"&gt;&lt;/gold-cc-expiration-input&gt;\n\n\n### Validation\n\nThe input can check whether the entered date is a valid, future date.\n\nThe input can be automatically validated as the user is typing by using\nthe `auto-validate` and `required` attributes. For manual validation, the\nelement also has a `validate()` method, which returns the validity of the\ninput as well sets any appropriate error messages and styles.\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\n",
      "attributes": {
        "accept": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `accept` property,\nused with type=file.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "allowedPattern": {
          "type": "String",
          "description": "\nSet this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `allowedPattern`\nproperty.\n       "
        },
        "alwaysFloatLabel": {
          "type": "Boolean",
          "description": "\nSet to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `alwaysFloatLabel` property.\n       "
        },
        "autocapitalize": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocapitalize` property.\n       "
        },
        "autocomplete": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocomplete` property.\n       "
        },
        "autocorrect": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocorrect` property.\n       "
        },
        "autofocus": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autofocus` property.\n       "
        },
        "autosave": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autosave` property,\nused with type=search.\n       "
        },
        "autoValidate": {
          "type": "Boolean",
          "description": "\nSet to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `autoValidate` property.\n       "
        },
        "charCounter": {
          "type": "Boolean",
          "description": "\nSet to true to show a character counter.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nSet to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `&lt;paper-input-container&gt;`'s and the input's `disabled` property.\n       "
        },
        "errorMessage": {
          "type": "String",
          "description": "\nThe error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;paper-input-error&gt;`'s content, if using.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "inputElement": {
          "type": "",
          "description": "\nReturns a reference to the input element.\n     "
        },
        "inputmode": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `inputmode` property.\n       "
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nReturns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`&lt;paper-input-container&gt;`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "label": {
          "type": "String",
          "description": "\nThe label for this input.\n           "
        },
        "list": {
          "type": "String",
          "description": "\nThe datalist of the input (if any). This should match the id of an existing `&lt;datalist&gt;`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `list` property.\n       "
        },
        "max": {
          "type": "String",
          "description": "\nThe maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-1-1\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `max` property.\n       "
        },
        "maxlength": {
          "type": "Number",
          "description": "\nThe maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `maxlength` property.\n       "
        },
        "min": {
          "type": "String",
          "description": "\nThe minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `min` property.\n       "
        },
        "minlength": {
          "type": "Number",
          "description": "\nThe minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `minlength` property.\n       "
        },
        "multiple": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`&lt;input is=\"iron-input\"&gt;`'s `multiple` property,\nused with type=file.\n       "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "noLabelFloat": {
          "type": "Boolean",
          "description": "\nSet to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `noLabelFloat` property.\n       "
        },
        "pattern": {
          "type": "String",
          "description": "\nA pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `pattern` property.\n       "
        },
        "placeholder": {
          "type": "String",
          "description": "\nA placeholder string in addition to the label. If this is set, the label will always float.\n       "
        },
        "preventInvalidInput": {
          "type": "Boolean",
          "description": "\nSet to true to prevent the user from entering invalid input. If you're\nusing PaperInputBehavior to  implement your own paper-input-like element,\nbind this to `&lt;input is=\"iron-input\"&gt;`'s `preventInvalidInput` property.\n       "
        },
        "readonly": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `readonly` property.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
        },
        "results": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `results` property,\nused with type=search.\n       "
        },
        "size": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `size` property.\n       "
        },
        "step": {
          "type": "String",
          "description": "\nLimits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `step` property.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "type": {
          "type": "String",
          "description": "\nThe type of the input. The supported types are `text`, `number` and `password`.\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;input is=\"iron-input\"&gt;`'s `type` property.\n       "
        },
        "updateValueAndPreserveCaret": {
          "type": "Function",
          "description": "\nRestores the cursor to its original position after updating the value.\n"
        },
        "validate": {
          "type": "Function",
          "description": "\nOveridden from Polymer.PaperInputBehavior.\n         "
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `validator` property.\n       "
        },
        "value": {
          "type": "Object",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_appendStringWithSpace": {
          "type": "Function",
          "description": ""
        },
        "_ariaDescribedBy": {
          "type": "String",
          "description": ""
        },
        "_ariaLabelledBy": {
          "type": "String",
          "description": ""
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeAlwaysFloatLabel": {
          "type": "Function",
          "description": ""
        },
        "_computeMonth": {
          "type": "Function",
          "description": ""
        },
        "_computeYear": {
          "type": "Function",
          "description": ""
        },
        "_dateChanged": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_focusableElement": {
          "type": "",
          "description": "\nReturns a reference to the focusable element.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": "\nForward focus to inputElement. Overriden from IronControlState.\n     "
        },
        "_handleAutoValidate": {
          "type": "Function",
          "description": "\nIf `autoValidate` is true, then validates the element.\n     "
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onAddonAttached": {
          "type": "Function",
          "description": ""
        },
        "_onChange": {
          "type": "Function",
          "description": ""
        },
        "_onFocusedChanged": {
          "type": "Function",
          "description": "\nOveridden from Polymer.IronControlState.\n         "
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onShiftTabDown": {
          "type": "Function",
          "description": "\nHandler that is called when a shift+tab keypress is detected by the menu.\n\n"
        },
        "_onValueChanged": {
          "type": "Function",
          "description": "\nA handler that is called on input\n         "
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAriaLabelledBy": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "date-input": {
      "name": "date-input",
      "description": "\n",
      "attributes": {
        "ariaLabelPrefix": {
          "type": "String",
          "description": ""
        },
        "date": {
          "type": "Object",
          "description": "\nThe date object used by the validator. Has two properties, month and year.\n       "
        },
        "hasValidator": {
          "type": "Function",
          "description": "\n"
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nTrue if the last call to `validate` is invalid.\n       "
        },
        "month": {
          "type": "String",
          "description": "\nThe month component of the date displayed.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required.\n       "
        },
        "validate": {
          "type": "Function",
          "description": ""
        },
        "validator": {
          "type": "String",
          "description": ""
        },
        "validatorType": {
          "type": "String",
          "description": "\nNamespace for this validator.\n       "
        },
        "year": {
          "type": "String",
          "description": "\nThe year component of the date displayed.\n       "
        },
        "_computeAriaLabel": {
          "type": "Function",
          "description": ""
        },
        "_computeDate": {
          "type": "Function",
          "description": ""
        },
        "_getValidity": {
          "type": "Function",
          "description": "\nReturns true if `value` is valid.  By default, it is passed\nto the validator's `validate()` function, if a validator is set. You\nshould override this method if you want to implement custom validity\nlogic for your element.\n\n"
        },
        "_invalidChanged": {
          "type": "Function",
          "description": ""
        },
        "_validator": {
          "type": "",
          "description": ""
        },
        "_validatorMeta": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "date-validator": {
      "name": "date-validator",
      "description": "\n",
      "attributes": {
        "validate": {
          "type": "Function",
          "description": ""
        },
        "validatorName": {
          "type": "String",
          "description": "\nName for this validator, used by `Polymer.IronValidatableBehavior` to lookup this element.\n       "
        },
        "validatorType": {
          "type": "String",
          "description": "\nNamespace for this validator.\n       "
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "gold-cc-input": {
      "name": "gold-cc-input",
      "description": "\n`gold-cc-input` is a single-line text field with Material Design styling\nfor entering a credit card number. As the user types, the number will be\nformatted by adding a space every 4 digits.\n\n    &lt;gold-cc-input&gt;&lt;/gold-cc-input&gt;\n\nIt may include an optional label, which by default is \"Card number\".\n\n    &lt;gold-cc-input label=\"CC\"&gt;&lt;/gold-cc-input&gt;\n\n### Validation\n\nThe input can detect whether a credit card number is valid, and the type\nof credit card it is, using the Luhn checksum. See `http://jquerycreditcardvalidator.com/`\nfor more information.\n\nThe input can be automatically validated as the user is typing by using\nthe `auto-validate` and `required` attributes. For manual validation, the\nelement also has a `validate()` method, which returns the validity of the\ninput as well sets any appropriate error messages and styles.\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\n",
      "attributes": {
        "accept": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `accept` property,\nused with type=file.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "allowedPattern": {
          "type": "String",
          "description": "\nSet this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `allowedPattern`\nproperty.\n       "
        },
        "alwaysFloatLabel": {
          "type": "Boolean",
          "description": "\nSet to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `alwaysFloatLabel` property.\n       "
        },
        "autocapitalize": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocapitalize` property.\n       "
        },
        "autocomplete": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocomplete` property.\n       "
        },
        "autocorrect": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocorrect` property.\n       "
        },
        "autofocus": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autofocus` property.\n       "
        },
        "autosave": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autosave` property,\nused with type=search.\n       "
        },
        "autoValidate": {
          "type": "Boolean",
          "description": "\nSet to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `autoValidate` property.\n       "
        },
        "cardType": {
          "type": "String",
          "description": "\nThe type of the credit card, if it is valid. Empty otherwise.\n       "
        },
        "charCounter": {
          "type": "Boolean",
          "description": "\nSet to true to show a character counter.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nSet to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `&lt;paper-input-container&gt;`'s and the input's `disabled` property.\n       "
        },
        "errorMessage": {
          "type": "String",
          "description": "\nThe error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;paper-input-error&gt;`'s content, if using.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "hasValidator": {
          "type": "Function",
          "description": "\n"
        },
        "inputElement": {
          "type": "",
          "description": "\nReturns a reference to the input element.\n     "
        },
        "inputmode": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `inputmode` property.\n       "
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nTrue if the last call to `validate` is invalid.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "label": {
          "type": "String",
          "description": "\nThe label for this input.\n       "
        },
        "list": {
          "type": "String",
          "description": "\nThe datalist of the input (if any). This should match the id of an existing `&lt;datalist&gt;`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `list` property.\n       "
        },
        "max": {
          "type": "String",
          "description": "\nThe maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-1-1\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `max` property.\n       "
        },
        "maxlength": {
          "type": "Number",
          "description": "\nThe maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `maxlength` property.\n       "
        },
        "min": {
          "type": "String",
          "description": "\nThe minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `min` property.\n       "
        },
        "minlength": {
          "type": "Number",
          "description": "\nThe minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `minlength` property.\n       "
        },
        "multiple": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`&lt;input is=\"iron-input\"&gt;`'s `multiple` property,\nused with type=file.\n       "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "noLabelFloat": {
          "type": "Boolean",
          "description": "\nSet to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `noLabelFloat` property.\n       "
        },
        "pattern": {
          "type": "String",
          "description": "\nA pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `pattern` property.\n       "
        },
        "placeholder": {
          "type": "String",
          "description": "\nA placeholder string in addition to the label. If this is set, the label will always float.\n       "
        },
        "preventInvalidInput": {
          "type": "Boolean",
          "description": "\nSet to true to prevent the user from entering invalid input. If you're\nusing PaperInputBehavior to  implement your own paper-input-like element,\nbind this to `&lt;input is=\"iron-input\"&gt;`'s `preventInvalidInput` property.\n       "
        },
        "readonly": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `readonly` property.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
        },
        "results": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `results` property,\nused with type=search.\n       "
        },
        "size": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `size` property.\n       "
        },
        "step": {
          "type": "String",
          "description": "\nLimits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `step` property.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "type": {
          "type": "String",
          "description": "\nThe type of the input. The supported types are `text`, `number` and `password`.\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;input is=\"iron-input\"&gt;`'s `type` property.\n       "
        },
        "updateValueAndPreserveCaret": {
          "type": "Function",
          "description": "\nRestores the cursor to its original position after updating the value.\n"
        },
        "validate": {
          "type": "Function",
          "description": "\nReturns true if the element has a valid value, and sets the visual\nerror state.\n\n"
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use.\n       "
        },
        "validatorType": {
          "type": "String",
          "description": "\nNamespace for this validator.\n       "
        },
        "value": {
          "type": "Object",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_appendStringWithSpace": {
          "type": "Function",
          "description": ""
        },
        "_ariaDescribedBy": {
          "type": "String",
          "description": ""
        },
        "_ariaLabelledBy": {
          "type": "String",
          "description": ""
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeAlwaysFloatLabel": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_focusableElement": {
          "type": "",
          "description": "\nReturns a reference to the focusable element.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": "\nForward focus to inputElement. Overriden from IronControlState.\n     "
        },
        "_getValidity": {
          "type": "Function",
          "description": "\nReturns true if `value` is valid.  By default, it is passed\nto the validator's `validate()` function, if a validator is set. You\nshould override this method if you want to implement custom validity\nlogic for your element.\n\n"
        },
        "_handleAutoValidate": {
          "type": "Function",
          "description": "\nIf `autoValidate` is true, then validates the element.\n     "
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_invalidChanged": {
          "type": "Function",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onAddonAttached": {
          "type": "Function",
          "description": ""
        },
        "_onChange": {
          "type": "Function",
          "description": ""
        },
        "_onFocusedChanged": {
          "type": "Function",
          "description": "\nOveridden from Polymer.IronControlState.\n     "
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onShiftTabDown": {
          "type": "Function",
          "description": "\nHandler that is called when a shift+tab keypress is detected by the menu.\n\n"
        },
        "_onValueChanged": {
          "type": "Function",
          "description": "\nA handler that is called on input\n     "
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAriaLabelledBy": {
          "type": "Function",
          "description": ""
        },
        "_validator": {
          "type": "",
          "description": ""
        },
        "_validatorMeta": {
          "type": "Object",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "gold-email-input": {
      "name": "gold-email-input",
      "description": "\n`&lt;gold-email-input&gt;` is a single-line text field with Material Design styling\nfor entering an email address.\n\n    &lt;gold-email-input&gt;&lt;/gold-email-input&gt;\n\nIt may include an optional label, which by default is \"Email\".\n\n    &lt;gold-email-input label=\"your email address\"&gt;&lt;/gold-email-input&gt;\n\n### Validation\n\nThe input can be automatically validated as the user is typing by using\nthe `auto-validate` and `required` attributes. For manual validation, the\nelement also has a `validate()` method, which returns the validity of the\ninput as well sets any appropriate error messages and styles.\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\n",
      "attributes": {
        "accept": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `accept` property,\nused with type=file.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "allowedPattern": {
          "type": "String",
          "description": "\nSet this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `allowedPattern`\nproperty.\n       "
        },
        "alwaysFloatLabel": {
          "type": "Boolean",
          "description": "\nSet to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `alwaysFloatLabel` property.\n       "
        },
        "autocapitalize": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocapitalize` property.\n       "
        },
        "autocomplete": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocomplete` property.\n       "
        },
        "autocorrect": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocorrect` property.\n       "
        },
        "autofocus": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autofocus` property.\n       "
        },
        "autosave": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autosave` property,\nused with type=search.\n       "
        },
        "autoValidate": {
          "type": "Boolean",
          "description": "\nSet to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `autoValidate` property.\n       "
        },
        "charCounter": {
          "type": "Boolean",
          "description": "\nSet to true to show a character counter.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nSet to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `&lt;paper-input-container&gt;`'s and the input's `disabled` property.\n       "
        },
        "errorMessage": {
          "type": "String",
          "description": "\nThe error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;paper-input-error&gt;`'s content, if using.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "inputElement": {
          "type": "",
          "description": "\nReturns a reference to the input element.\n     "
        },
        "inputmode": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `inputmode` property.\n       "
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nReturns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`&lt;paper-input-container&gt;`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "label": {
          "type": "String",
          "description": "\nThe label for this input.\n         "
        },
        "list": {
          "type": "String",
          "description": "\nThe datalist of the input (if any). This should match the id of an existing `&lt;datalist&gt;`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `list` property.\n       "
        },
        "max": {
          "type": "String",
          "description": "\nThe maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-1-1\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `max` property.\n       "
        },
        "maxlength": {
          "type": "Number",
          "description": "\nThe maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `maxlength` property.\n       "
        },
        "min": {
          "type": "String",
          "description": "\nThe minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `min` property.\n       "
        },
        "minlength": {
          "type": "Number",
          "description": "\nThe minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `minlength` property.\n       "
        },
        "multiple": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`&lt;input is=\"iron-input\"&gt;`'s `multiple` property,\nused with type=file.\n       "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "noLabelFloat": {
          "type": "Boolean",
          "description": "\nSet to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `noLabelFloat` property.\n       "
        },
        "pattern": {
          "type": "String",
          "description": "\nA pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `pattern` property.\n       "
        },
        "placeholder": {
          "type": "String",
          "description": "\nA placeholder string in addition to the label. If this is set, the label will always float.\n       "
        },
        "preventInvalidInput": {
          "type": "Boolean",
          "description": "\nSet to true to prevent the user from entering invalid input. If you're\nusing PaperInputBehavior to  implement your own paper-input-like element,\nbind this to `&lt;input is=\"iron-input\"&gt;`'s `preventInvalidInput` property.\n       "
        },
        "readonly": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `readonly` property.\n       "
        },
        "regex": {
          "type": "String",
          "description": "\nThe regular expression used to validate the email. By default, the\ninput is of type=email and uses the native input regex, as defined in\nthe spec: http://www.w3.org/TR/html-markup/input.email.html#input.email.attrs.value.single.\nYou can override this if you want your email to be validated against\na custom regex. If the empty string, then no validation will be applied.\n         "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
        },
        "results": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `results` property,\nused with type=search.\n       "
        },
        "size": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `size` property.\n       "
        },
        "step": {
          "type": "String",
          "description": "\nLimits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `step` property.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "type": {
          "type": "String",
          "description": "\nThe type of the input. The supported types are `text`, `number` and `password`.\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;input is=\"iron-input\"&gt;`'s `type` property.\n       "
        },
        "updateValueAndPreserveCaret": {
          "type": "Function",
          "description": "\nRestores the cursor to its original position after updating the value.\n"
        },
        "validate": {
          "type": "Function",
          "description": "\nReturns true if the element has a valid value, and sets the visual error\nstate.\n\n"
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `validator` property.\n       "
        },
        "value": {
          "type": "Object",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_appendStringWithSpace": {
          "type": "Function",
          "description": ""
        },
        "_ariaDescribedBy": {
          "type": "String",
          "description": ""
        },
        "_ariaLabelledBy": {
          "type": "String",
          "description": ""
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeAlwaysFloatLabel": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_focusableElement": {
          "type": "",
          "description": "\nReturns a reference to the focusable element.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": "\nForward focus to inputElement. Overriden from IronControlState.\n     "
        },
        "_handleAutoValidate": {
          "type": "Function",
          "description": "\nIf `autoValidate` is true, then validates the element.\n     "
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onAddonAttached": {
          "type": "Function",
          "description": ""
        },
        "_onChange": {
          "type": "Function",
          "description": ""
        },
        "_onFocusedChanged": {
          "type": "Function",
          "description": "\nOveridden from Polymer.IronControlState.\n       "
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onShiftTabDown": {
          "type": "Function",
          "description": "\nHandler that is called when a shift+tab keypress is detected by the menu.\n\n"
        },
        "_onValueChanged": {
          "type": "Function",
          "description": "\nA handler that is called on input\n       "
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAriaLabelledBy": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "gold-phone-input": {
      "name": "gold-phone-input",
      "description": "\n`&lt;gold-phone-input&gt;` is a single-line text field with Material Design styling\nfor entering a phone number.\n\n    &lt;gold-phone-input&gt;&lt;/gold-phone-input&gt;\n\nIt may include an optional label, which by default is \"Phone number\".\n\n    &lt;gold-phone-input label=\"call this\"&gt;&lt;/gold-phone-input&gt;\n\n### Validation\n\nBy default, the phone number is considered to be a US phone number, and\nwill be validated according to the pattern `XXX-XXX-XXXX`, where `X` is a\ndigit, and `-` is the separating dash. If you want to customize the input\nfor a different area code or number pattern, use the `country-code` and\n`phone-number-pattern` attributes\n\n    &lt;gold-phone-input\n        country-code=\"33\"\n        phone-number-pattern=\"X-XX-XX-XX-XX\"&gt;\n    &lt;/gold-phone-input&gt;\n\nThe input can be automatically validated as the user is typing by using\nthe `auto-validate` and `required` attributes. For manual validation, the\nelement also has a `validate()` method, which returns the validity of the\ninput as well sets any appropriate error messages and styles.\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\n`--gold-phone-input-country-code` | Mixin applied to the country code span\n\n",
      "attributes": {
        "accept": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `accept` property,\nused with type=file.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "allowedPattern": {
          "type": "String",
          "description": "\nSet this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `allowedPattern`\nproperty.\n       "
        },
        "alwaysFloatLabel": {
          "type": "Boolean",
          "description": "\nSet to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `alwaysFloatLabel` property.\n       "
        },
        "autocapitalize": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocapitalize` property.\n       "
        },
        "autocomplete": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocomplete` property.\n       "
        },
        "autocorrect": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocorrect` property.\n       "
        },
        "autofocus": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autofocus` property.\n       "
        },
        "autosave": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autosave` property,\nused with type=search.\n       "
        },
        "autoValidate": {
          "type": "Boolean",
          "description": "\nSet to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `autoValidate` property.\n       "
        },
        "charCounter": {
          "type": "Boolean",
          "description": "\nSet to true to show a character counter.\n       "
        },
        "countryCode": {
          "type": "String",
          "description": "\nThe country code that should be recognized and parsed.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nSet to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `&lt;paper-input-container&gt;`'s and the input's `disabled` property.\n       "
        },
        "errorMessage": {
          "type": "String",
          "description": "\nThe error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;paper-input-error&gt;`'s content, if using.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "inputElement": {
          "type": "",
          "description": "\nReturns a reference to the input element.\n     "
        },
        "inputmode": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `inputmode` property.\n       "
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nReturns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`&lt;paper-input-container&gt;`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "label": {
          "type": "String",
          "description": "\nThe label for this input.\n       "
        },
        "list": {
          "type": "String",
          "description": "\nThe datalist of the input (if any). This should match the id of an existing `&lt;datalist&gt;`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `list` property.\n       "
        },
        "max": {
          "type": "String",
          "description": "\nThe maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-1-1\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `max` property.\n       "
        },
        "maxlength": {
          "type": "Number",
          "description": "\nThe maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `maxlength` property.\n       "
        },
        "min": {
          "type": "String",
          "description": "\nThe minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `min` property.\n       "
        },
        "minlength": {
          "type": "Number",
          "description": "\nThe minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `minlength` property.\n       "
        },
        "multiple": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`&lt;input is=\"iron-input\"&gt;`'s `multiple` property,\nused with type=file.\n       "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "noLabelFloat": {
          "type": "Boolean",
          "description": "\nSet to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `noLabelFloat` property.\n       "
        },
        "pattern": {
          "type": "String",
          "description": "\nA pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `pattern` property.\n       "
        },
        "phoneNumberPattern": {
          "type": "String",
          "description": "\nThe format of a valid phone number, including formatting but excluding\nthe country code. Use 'X' to denote the digits separated by dashes.\n       "
        },
        "placeholder": {
          "type": "String",
          "description": "\nA placeholder string in addition to the label. If this is set, the label will always float.\n       "
        },
        "preventInvalidInput": {
          "type": "Boolean",
          "description": "\nSet to true to prevent the user from entering invalid input. If you're\nusing PaperInputBehavior to  implement your own paper-input-like element,\nbind this to `&lt;input is=\"iron-input\"&gt;`'s `preventInvalidInput` property.\n       "
        },
        "readonly": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `readonly` property.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
        },
        "results": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `results` property,\nused with type=search.\n       "
        },
        "size": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `size` property.\n       "
        },
        "step": {
          "type": "String",
          "description": "\nLimits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `step` property.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "type": {
          "type": "String",
          "description": "\nThe type of the input. The supported types are `text`, `number` and `password`.\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;input is=\"iron-input\"&gt;`'s `type` property.\n       "
        },
        "updateValueAndPreserveCaret": {
          "type": "Function",
          "description": "\nRestores the cursor to its original position after updating the value.\n"
        },
        "validate": {
          "type": "Function",
          "description": "\nOveridden from Polymer.PaperInputBehavior.\n     "
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `validator` property.\n       "
        },
        "value": {
          "type": "String",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_appendStringWithSpace": {
          "type": "Function",
          "description": ""
        },
        "_ariaDescribedBy": {
          "type": "String",
          "description": ""
        },
        "_ariaLabelledBy": {
          "type": "String",
          "description": ""
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeAlwaysFloatLabel": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_focusableElement": {
          "type": "",
          "description": "\nReturns a reference to the focusable element.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": "\nForward focus to inputElement. Overriden from IronControlState.\n     "
        },
        "_handleAutoValidate": {
          "type": "Function",
          "description": "\nIf `autoValidate` is true, then validates the element.\n     "
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onAddonAttached": {
          "type": "Function",
          "description": ""
        },
        "_onChange": {
          "type": "Function",
          "description": ""
        },
        "_onFocusedChanged": {
          "type": "Function",
          "description": "\nOveridden from Polymer.IronControlState.\n     "
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onShiftTabDown": {
          "type": "Function",
          "description": "\nHandler that is called when a shift+tab keypress is detected by the menu.\n\n"
        },
        "_onValueChanged": {
          "type": "Function",
          "description": "\nA handler that is called on input\n     "
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_phoneNumberPatternChanged": {
          "type": "Function",
          "description": ""
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAriaLabelledBy": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "gold-zip-input": {
      "name": "gold-zip-input",
      "description": "\n`gold-zip-input` is a single-line text field with Material Design styling\nfor entering a US zip code.\n\n    &lt;gold-zip-input&gt;&lt;/gold-zip-input&gt;\n\nIt may include an optional label, which by default is \"Zip Code\".\n\n    &lt;gold-zip-input label=\"Mailing zip code\"&gt;&lt;/gold-zip-input&gt;\n\n### Validation\n\nThe input supports both 5 digit zip codes (90210) or the full 9 digit ones,\nseparated by a dash (90210-9999).\n\nThe input can be automatically validated as the user is typing by using\nthe `auto-validate` and `required` attributes. For manual validation, the\nelement also has a `validate()` method, which returns the validity of the\ninput as well sets any appropriate error messages and styles.\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\n",
      "attributes": {
        "accept": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `accept` property,\nused with type=file.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "allowedPattern": {
          "type": "String",
          "description": "\nSet this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `allowedPattern`\nproperty.\n       "
        },
        "alwaysFloatLabel": {
          "type": "Boolean",
          "description": "\nSet to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `alwaysFloatLabel` property.\n       "
        },
        "autocapitalize": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocapitalize` property.\n       "
        },
        "autocomplete": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocomplete` property.\n       "
        },
        "autocorrect": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocorrect` property.\n       "
        },
        "autofocus": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autofocus` property.\n       "
        },
        "autosave": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autosave` property,\nused with type=search.\n       "
        },
        "autoValidate": {
          "type": "Boolean",
          "description": "\nSet to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `autoValidate` property.\n       "
        },
        "charCounter": {
          "type": "Boolean",
          "description": "\nSet to true to show a character counter.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nSet to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `&lt;paper-input-container&gt;`'s and the input's `disabled` property.\n       "
        },
        "errorMessage": {
          "type": "String",
          "description": "\nThe error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;paper-input-error&gt;`'s content, if using.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "inputElement": {
          "type": "",
          "description": "\nReturns a reference to the input element.\n     "
        },
        "inputmode": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `inputmode` property.\n       "
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nReturns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`&lt;paper-input-container&gt;`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "label": {
          "type": "String",
          "description": "\nThe label for this input.\n           "
        },
        "list": {
          "type": "String",
          "description": "\nThe datalist of the input (if any). This should match the id of an existing `&lt;datalist&gt;`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `list` property.\n       "
        },
        "max": {
          "type": "String",
          "description": "\nThe maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-1-1\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `max` property.\n       "
        },
        "maxlength": {
          "type": "Number",
          "description": "\nThe maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `maxlength` property.\n       "
        },
        "min": {
          "type": "String",
          "description": "\nThe minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `min` property.\n       "
        },
        "minlength": {
          "type": "Number",
          "description": "\nThe minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `minlength` property.\n       "
        },
        "multiple": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`&lt;input is=\"iron-input\"&gt;`'s `multiple` property,\nused with type=file.\n       "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "noLabelFloat": {
          "type": "Boolean",
          "description": "\nSet to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `noLabelFloat` property.\n       "
        },
        "pattern": {
          "type": "String",
          "description": "\nA pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `pattern` property.\n       "
        },
        "placeholder": {
          "type": "String",
          "description": "\nA placeholder string in addition to the label. If this is set, the label will always float.\n       "
        },
        "preventInvalidInput": {
          "type": "Boolean",
          "description": "\nSet to true to prevent the user from entering invalid input. If you're\nusing PaperInputBehavior to  implement your own paper-input-like element,\nbind this to `&lt;input is=\"iron-input\"&gt;`'s `preventInvalidInput` property.\n       "
        },
        "readonly": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `readonly` property.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
        },
        "results": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `results` property,\nused with type=search.\n       "
        },
        "size": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `size` property.\n       "
        },
        "step": {
          "type": "String",
          "description": "\nLimits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `step` property.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "type": {
          "type": "String",
          "description": "\nThe type of the input. The supported types are `text`, `number` and `password`.\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;input is=\"iron-input\"&gt;`'s `type` property.\n       "
        },
        "updateValueAndPreserveCaret": {
          "type": "Function",
          "description": "\nRestores the cursor to its original position after updating the value.\n"
        },
        "validate": {
          "type": "Function",
          "description": "\nValidates the input element and sets an error style if needed.\n\n"
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `validator` property.\n       "
        },
        "value": {
          "type": "String",
          "description": "\nThe value for this element.\n       "
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_appendStringWithSpace": {
          "type": "Function",
          "description": ""
        },
        "_ariaDescribedBy": {
          "type": "String",
          "description": ""
        },
        "_ariaLabelledBy": {
          "type": "String",
          "description": ""
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeAlwaysFloatLabel": {
          "type": "Function",
          "description": ""
        },
        "_computeValue": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_focusableElement": {
          "type": "",
          "description": "\nReturns a reference to the focusable element.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": "\nForward focus to inputElement. Overriden from IronControlState.\n     "
        },
        "_handleAutoValidate": {
          "type": "Function",
          "description": "\nIf `autoValidate` is true, then validates the element.\n     "
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onAddonAttached": {
          "type": "Function",
          "description": ""
        },
        "_onChange": {
          "type": "Function",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onShiftTabDown": {
          "type": "Function",
          "description": "\nHandler that is called when a shift+tab keypress is detected by the menu.\n\n"
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAriaLabelledBy": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "zip-validator": {
      "name": "zip-validator",
      "description": "\n",
      "attributes": {
        "validate": {
          "type": "Function",
          "description": ""
        },
        "validatorName": {
          "type": "String",
          "description": "\nName for this validator, used by `Polymer.IronValidatableBehavior` to lookup this element.\n       "
        },
        "validatorType": {
          "type": "String",
          "description": "\nNamespace for this validator.\n       "
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-analytics-date-selector": {
      "name": "google-analytics-date-selector",
      "description": "\nElement for selecting the start and end date values for queries inside a\n`&lt;google-analytics-dashboard&gt;` element.\n\n##### Example\n\n    &lt;google-analytics-dashboard&gt;\n\n      &lt;google-analytics-date-selector\n        start-date=\"30daysAgo\"\n        end-date=\"today\"&gt;\n      &lt;/google-analytics-date-selector&gt;\n\n      &lt;google-analytics-chart\n        ids=\"ga:1174\"\n        metrics=\"ga:sessions\"\n        dimensions=\"ga:date\"&gt;\n      &lt;/google-analytics-chart&gt;\n\n    &lt;/google-analytics-dashboard&gt;\n\n",
      "attributes": {
        "endDate": {
          "type": "String",
          "description": "\nThe `endDate` attribute is the end date for fetching Analytics\ndata. Requests can specify an end date formatted as YYYY-MM-DD, or\nas a relative date (e.g., today, yesterday, or NdaysAgo where N is a\npositive integer).\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#endDate\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "endDateChanged": {
          "type": "Function",
          "description": ""
        },
        "maxEndDate": {
          "type": "String",
          "description": "\nThe `maxEndDate` attribute is used as the `max` attribute on the\nend date `&lt;input&gt;`.\n\n"
        },
        "minStartDate": {
          "type": "String",
          "description": "\nThe `minStartDate` attribute is used as the `min` attribute on the\nstart date `&lt;input&gt;`.\n\n"
        },
        "startDate": {
          "type": "String",
          "description": "\nThe `startDate` attribute is the start date for fetching Analytics\ndata. Requests can specify a start date formatted as YYYY-MM-DD, or\nas a relative date (e.g., today, yesterday, or NdaysAgo where N is a\npositive integer).\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#startDate\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "startDateChanged": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-analytics-view-selector": {
      "name": "google-analytics-view-selector",
      "description": "\nElement for selecting the view ID (ids) value for queries inside a\n`&lt;google-analytics-dashboard&gt;` element.\n\n##### Example\n\n    &lt;google-analytics-dashboard&gt;\n\n      &lt;google-analytics-view-selector&gt;&lt;/google-analytics-view-selector&gt;\n\n      &lt;google-analytics-chart\n        metrics=\"ga:sessions\"\n        dimensions=\"ga:date\"&gt;\n      &lt;/google-analytics-chart&gt;\n\n    &lt;/google-analytics-dashboard&gt;\n\n",
      "attributes": {
        "account": {
          "type": "Object",
          "description": "\nThe `account` attribute is the currently selected account.\n\n"
        },
        "accountChanged": {
          "type": "Function",
          "description": ""
        },
        "fireChangeEvent": {
          "type": "Function",
          "description": "\nFire a change event passing all the currently stored data.\n       "
        },
        "ids": {
          "type": "String",
          "description": "\nThe `ids` attribute, when found is used to preselect the chosen\naccount, property, and view.\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#ids\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "idsChanged": {
          "type": "Function",
          "description": ""
        },
        "property": {
          "type": "Object",
          "description": "\nThe `property` attribute is the currently selected property.\n\n"
        },
        "propertyChanged": {
          "type": "Function",
          "description": ""
        },
        "setupReady": {
          "type": "Boolean",
          "description": "\nTrue if setup is ready\n\n"
        },
        "setupReadyChanged": {
          "type": "Function",
          "description": ""
        },
        "summaries": {
          "type": "Object",
          "description": "\nThe `summaries` attribute contains an account summaries utility object\nwith various helper methods for quickly getting account data.\n\nSee the &lt;a href=\"https://github.com/googleanalytics/javascript-api-utils\"&gt;Github repo&lt;/a&gt; for more details.\n\n"
        },
        "updateAccount": {
          "type": "Function",
          "description": "\nThe `updateAccount` method is bound to the change event on the\naccount `&lt;select&gt;`. It updates the property and view `&lt;select&gt;`s based\non the new account data. It also updates the `ids` attribute.\n       "
        },
        "updateProperty": {
          "type": "Function",
          "description": "\nThe `updateProperty` method is bound to the change event on the\nproperty `&lt;select&gt;`. It updates the view `&lt;select&gt;` based\non the new property data. It also updates the `ids` attribute.\n       "
        },
        "updateView": {
          "type": "Function",
          "description": "\nThe `updateView` method is bound to the change event on the\nview `&lt;select&gt;`. It updates the `ids` attribute.\n       "
        },
        "view": {
          "type": "Object",
          "description": "\nThe `view` attribute is the currently selected view.\n\n"
        },
        "viewChanged": {
          "type": "Function",
          "description": " this.view = Path.get('views[0]').getValueFrom(newProperty);"
        }
      }
    },
    "google-analytics-query": {
      "name": "google-analytics-query",
      "description": "\nElement for querying the Google Analytics Core Reporting API.\n\n##### Example\n\n    &lt;google-analytics-query\n      ids=\"ga:1174\"\n      metrics=\"ga:sessions\"\n      dimensions=\"ga:country\"\n      sort=\"-ga:sessions\"\n      max-results=\"5\"&gt;\n    &lt;/google-analytics-query&gt;\n\n",
      "attributes": {
        "data": {
          "type": "Object",
          "description": "\nThe `data` attribute is the response from a query to the Google\nAnalytics Core Reporting API. This value will be updated as\nsubsequent requests are made.\n\n"
        },
        "dimensions": {
          "type": "String",
          "description": "\nThe `dimensions` attribute is a list of comma-separated dimensions\nfor your Analytics data, such as ga:browser,ga:city.\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#dimensions\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "endDate": {
          "type": "String",
          "description": "\nThe `endDate` attribute is the end date for fetching Analytics\ndata. Requests can specify an end date formatted as YYYY-MM-DD, or\nas a relative date (e.g., today, yesterday, or NdaysAgo where N is a\npositive integer).\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#endDate\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "fields": {
          "type": "String",
          "description": "\nThe `fields` attribute is a selector specifying a subset of\nfields to include in the response.\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#fields\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "filters": {
          "type": "String",
          "description": "\nThe `filters` attribute is dimension or metric filters that restrict\nthe data returned for your request.\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#filters\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "getData": {
          "type": "Function",
          "description": "\nQuery the Google Analytics Core Reporting API.\n\n"
        },
        "getDataResponseHandler": {
          "type": "Function",
          "description": "\n\n\n"
        },
        "handleResponse": {
          "type": "Function",
          "description": "\nThe callback for the query run in `getData`. This is a separate\nfunction so subclasses can alter how the response is handled.\n\n"
        },
        "ids": {
          "type": "String",
          "description": "\nThe `ids` attribute is the unique table ID of the form ga:XXXX,\nwhere XXXX is the Analytics view (profile) ID for which the query\nwill retrieve the data.\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#ids\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\nNote: you can find out the `ids` value for any of your Google Analytics account using the &lt;a href=\"https://ga-dev-tools.appspot.com/explorer/\"&gt;Google Analytics query explorer&lt;/a&gt;.\n\n"
        },
        "loading": {
          "type": "Boolean",
          "description": "\ntrue if data is getting loaded\n"
        },
        "maxResults": {
          "type": "Number",
          "description": "\nThe `maxResults` attribute is the maximum number of rows to include\nin the response.\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#maxResults\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "metrics": {
          "type": "String",
          "description": "\nThe `metrics` attribute is a list of comma-separated metrics,\nsuch as ga:sessions,ga:bounces.\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#metrics\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "output": {
          "type": "String",
          "description": "\nThe `output` attribute sets the desired output type for the\nAnalytics data returned in the response. Acceptable values are json\nand dataTable.\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#output\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "samplingLevel": {
          "type": "String",
          "description": "\nThe `samplingLevel` attribute sets the desired sampling level.\nAllowed Values: `DEFAULT`, `FASTER`, `HIGHER_PRECISION`.\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#samplingLevel\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "segment": {
          "type": "String",
          "description": "\nThe `segment` attribute segments the data returned for your\nrequest.\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#segment\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "setData": {
          "type": "Function",
          "description": "\nsetData sets data fetched by getData.\nUse it if you override getData response processing\n"
        },
        "setupReady": {
          "type": "Boolean",
          "description": "\nTrue if setup is ready\n\n"
        },
        "sort": {
          "type": "String",
          "description": "\nThe `sort` attribute is a list of comma-separated dimensions\nand metrics indicating the sorting order and sorting direction for\nthe returned data.\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#sort\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "startDate": {
          "type": "String",
          "description": "\nThe `startDate` attribute is the start date for fetching Analytics\ndata. Requests can specify a start date formatted as YYYY-MM-DD, or\nas a relative date (e.g., today, yesterday, or NdaysAgo where N is a\npositive integer).\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#startDate\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "startIndex": {
          "type": "Number",
          "description": "\nThe `startIndex` attribute sets the first row of data to retrieve,\nstarting at 1. Use this parameter as a pagination mechanism along\nwith the max-results parameter.\n\nSee the &lt;a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference#startIndex\"&gt;Core Reporting API parameter reference&lt;/a&gt; for more details.\n\n"
        },
        "_hasRequiredParams": {
          "type": "",
          "description": ""
        },
        "_setupReadyChanged": {
          "type": "Function",
          "description": ""
        },
        "_srcParam": {
          "type": "String",
          "description": "\nGA team internal variable for analytics purposes.\n         "
        }
      }
    },
    "google-analytics-chart": {
      "name": "google-analytics-chart",
      "description": "\nElement for displaying the results of a Google Analytics query in a\nGoogle Chart.\n\n##### Example\n\n    &lt;google-analytics-chart\n      type=\"column\"\n      ids=\"ga:1174\"\n      metrics=\"ga:sessions\"\n      dimensions=\"ga:country\"\n      sort=\"-ga:sessions\"\n      max-results=\"5\"&gt;\n    &lt;/google-analytics-chart&gt;\n\n",
      "attributes": {
        "data": {
          "type": "Object",
          "description": ""
        },
        "dimensions": {
          "type": "String",
          "description": ""
        },
        "endDate": {
          "type": "String",
          "description": ""
        },
        "filters": {
          "type": "String",
          "description": ""
        },
        "handleResponse": {
          "type": "Function",
          "description": ""
        },
        "ids": {
          "type": "String",
          "description": ""
        },
        "loading": {
          "type": "Boolean",
          "description": "\nTrue if the chart is currently loading data.\n\n"
        },
        "maxResults": {
          "type": "Number",
          "description": ""
        },
        "metrics": {
          "type": "String",
          "description": ""
        },
        "options": {
          "type": "Object",
          "description": "\nSets the options for the chart.\n\nExample:\n&lt;pre&gt;{\n  title: \"Chart title goes here\",\n  hAxis: {title: \"Categories\"},\n  vAxis: {title: \"Values\", minValue: 0, maxValue: 2},\n  legend: \"none\"\n};&lt;/pre&gt;\nSee &lt;a href=\"https://google-developers.appspot.com/chart/interactive/docs/gallery\"&gt;Google Visualization API reference (Chart Gallery)&lt;/a&gt;\nfor the options available to each chart type.\n\n"
        },
        "rendered": {
          "type": "Boolean",
          "description": "\nTrue after the chart has been rendered for the first time.\n\n"
        },
        "samplingLevel": {
          "type": "String",
          "description": ""
        },
        "segment": {
          "type": "String",
          "description": ""
        },
        "setupReady": {
          "type": "Boolean",
          "description": "\nTrue if setup is ready\n\n"
        },
        "setupReadyChanged": {
          "type": "Function",
          "description": ""
        },
        "sort": {
          "type": "String",
          "description": ""
        },
        "startDate": {
          "type": "String",
          "description": "\ngoogle-analytics-query passthrough properties\nSee google-analytics-query for documentation\nstartDate, endDate, data, ids, metrics, dimensions, sort, filters, segment, samplingLevel, startIndex, maxResults\n         "
        },
        "startIndex": {
          "type": "Number",
          "description": ""
        },
        "type": {
          "type": "String",
          "description": "\nSets the type of the chart.\n\nShould be one of:\n- `area`, `bar`, `column`, `line`, `pie`, `geo`.\n\n"
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-analytics-dashboard": {
      "name": "google-analytics-dashboard",
      "description": "\nContainer element for binding Google Analytics controls to Google Analytics charts.\n\n`&lt;google-analytics-chart&gt;` elements inside a `&lt;google-analytics-dashboard&gt;`\nelement will automatically update as control elements (e.g.\n`&lt;google-analytics-view-selector&gt;` or `&lt;google-analytics-date-selector&gt;`)\nupdate query parameters.\n\n##### Example\n\n    &lt;google-analytics-dashboard&gt;\n\n      &lt;google-analytics-view-selector&gt;&lt;/google-analytics-view-selector&gt;\n      &lt;google-analytics-date-selector&gt;&lt;/google-analytics-date-selector&gt;\n\n      &lt;google-analytics-chart\n        metrics=\"ga:sessions\"\n        dimensions=\"ga:country\"\n        sort=\"-ga:sessions\"\n        max-results=\"5\"\n        chart-type=\"column\"&gt;\n      &lt;/google-analytics-chart&gt;\n\n    &lt;/google-analytics-dashboard&gt;\n\n",
      "attributes": {
        "authorized": {
          "type": "Boolean",
          "description": "\nTrue if user has been authorized\n         "
        },
        "query": {
          "type": "Object",
          "description": "\nThe `query` attribute represents the internal query object of this\ndashboard. It is updated when control elements fire the\n`analytics-dashboard-control-change` event and pass along query data.\n         "
        },
        "queryUpdated": {
          "type": "Function",
          "description": "\nThe `queryUpdated` method is the callback for whenever the\n`analytics-dashboard-control-change` event is fired. It updates the\nquery attribute, which is then sent to child charts.\n\n"
        },
        "updateChildren": {
          "type": "Function",
          "description": "\nThe `updateChildren` method updates each of this dashboards\n`&lt;google-analytics-chart&gt;` element with its current query value.\n\n"
        },
        "_signedIn": {
          "type": "Function",
          "description": ""
        },
        "_signedOut": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-analytics-loader": {
      "name": "google-analytics-loader",
      "description": "\ngoogle-analytics-loader is used internally by elements that need to know api state, and user state.\n\nLoads gapi.client.analytics, and watches user signed-in state.\n\n",
      "attributes": {
        "allReady": {
          "type": "Boolean",
          "description": "\nTrue when user is authorized, and api is loaded\n"
        },
        "apiReady": {
          "type": "Boolean",
          "description": "\nTrue when api is loaded\n"
        },
        "authorized": {
          "type": "Boolean",
          "description": "\nTrue when user is authorized\n"
        },
        "computeAllReady": {
          "type": "Function",
          "description": ""
        },
        "handleApiFailedToLoad": {
          "type": "Function",
          "description": ""
        },
        "handleApiLoad": {
          "type": "Function",
          "description": ""
        },
        "handleAuthSignout": {
          "type": "Function",
          "description": ""
        },
        "handleAuthSuccess": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-legacy-loader": {
      "name": "google-legacy-loader",
      "description": "\nDynamically loads the legacy Google JavaScript API Loader (https://developers.google.com/loader/).\n\nFires `api-load` event when ready.\n",
      "attributes": {
        "api": {
          "type": "",
          "description": "\nWrapper for `google` API namespace.\n     "
        },
        "libraryErrorMessage": {
          "type": "String",
          "description": "\nNot null if library has failed to load\n       "
        },
        "libraryLoaded": {
          "type": "Boolean",
          "description": "\nTrue if library has been successfully loaded\n       "
        },
        "notifyEvent": {
          "type": "String",
          "description": "\nName of event fired when library is loaded and available.\n       "
        },
        "_libraryLoadCallback": {
          "type": "Function",
          "description": ""
        },
        "_libraryUrlChanged": {
          "type": "Function",
          "description": ""
        },
        "_loadLibrary": {
          "type": "Function",
          "description": "loads the library, and fires this.notifyEvent upon completion "
        },
        "libraryUrl": {
          "type": "String",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-client-loader": {
      "name": "google-client-loader",
      "description": "\nElement for loading a specific client Google API with the JavaScript client library.\n\nFor loading `gapi.client` libraries\n\n##### Example\n\n    &lt;google-client-loader id=\"shortener\"\n      name=\"urlshortener\"\n      version=\"v1\"&gt;&lt;/google-client-loader&gt;\n\n    &lt;script&gt;\n      var shortener = document.getElementById('shortener');\n      shortener.addEventListener('google-api-load', function(event) {\n        var request = shortener.api.url.get({\n           shortUrl: 'http://goo.gl/fbsS'\n        });\n        request.execute(function(resp) {\n          console.log(resp);\n        });\n      });\n    &lt;/script&gt;\n\n",
      "attributes": {
        "api": {
          "type": "",
          "description": "\nReturns the loaded API.\n       "
        },
        "apiRoot": {
          "type": "string",
          "description": "\nRoot URL where to load the API from, e.g. 'http://host/apis'.\nFor App Engine dev server this would be something like:\n'http://localhost:8080/_ah/api'.\nOverrides 'appId' if both are specified.\n         "
        },
        "appId": {
          "type": "string",
          "description": "\nApp Engine application ID for loading a Google Cloud Endpoints API.\n         "
        },
        "auth": {
          "type": "",
          "description": "\nWrapper for `gapi.auth`.\n       "
        },
        "errorEventName": {
          "type": "String",
          "description": "\nName of the event fired when there is an error loading the library.\n         "
        },
        "name": {
          "type": "string",
          "description": "\nName of the API to load, e.g. 'urlshortener'.\n\nYou can find the full list of APIs on the\n&lt;a href=\"https://developers.google.com/apis-explorer\"&gt; Google APIs\nExplorer&lt;/a&gt;.\n         "
        },
        "successEventName": {
          "type": "String",
          "description": "\nName of the event fired when API library is loaded.\n         "
        },
        "version": {
          "type": "string",
          "description": "\nVersion of the API to load, e.g. 'v1'.\n         "
        },
        "_createSelfRemovingListener": {
          "type": "Function",
          "description": ""
        },
        "_doneLoadingClient": {
          "type": "Function",
          "description": ""
        },
        "_fireError": {
          "type": "Function",
          "description": ""
        },
        "_fireSuccess": {
          "type": "Function",
          "description": ""
        },
        "_handleLoadResponse": {
          "type": "Function",
          "description": ""
        },
        "_loadApi": {
          "type": "Function",
          "description": ""
        },
        "_loadClient": {
          "type": "Function",
          "description": ""
        },
        "_waiting": {
          "type": "boolean",
          "description": " iron-jsonp-library."
        }
      }
    },
    "google-plusone-api": {
      "name": "google-plusone-api",
      "description": "\nDynamically loads the Google+ JavaScript API, firing the `api-load` event when ready.\n\nAny number of components can use `&lt;google-plusone-api&gt;` elements, and the library will only be loaded once.\n",
      "attributes": {
        "api": {
          "type": "",
          "description": ""
        },
        "libraryErrorMessage": {
          "type": "String",
          "description": "\nNot null if library has failed to load\n       "
        },
        "libraryLoaded": {
          "type": "Boolean",
          "description": "\nTrue if library has been successfully loaded\n       "
        },
        "notifyEvent": {
          "type": "String",
          "description": "\nName of event fired when library is loaded and available.\n       "
        },
        "_libraryLoadCallback": {
          "type": "Function",
          "description": ""
        },
        "_libraryUrlChanged": {
          "type": "Function",
          "description": ""
        },
        "_loadLibrary": {
          "type": "Function",
          "description": "loads the library, and fires this.notifyEvent upon completion "
        },
        "libraryUrl": {
          "type": "String",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-maps-api": {
      "name": "google-maps-api",
      "description": "\nDynamically loads the Google Maps JavaScript API, firing the `api-load` event when ready.\n\n#### Example\n\n    &lt;google-maps-api api-key=\"abc123\" version=\"3.exp\"&gt;&lt;/google-maps-api&gt;\n    &lt;script&gt;\n      var mapsAPI = document.querySelector('google-maps-api');\n      mapsAPI.addEventListener('api-load', function(e) {\n        // this.api === google.maps\n      });\n    &lt;/script&gt;\n\nAny number of components can use `&lt;google-maps-api&gt;` elements, and the library will only be loaded once.\n\n",
      "attributes": {
        "api": {
          "type": "",
          "description": "\nProvides the google.maps JS API namespace.\n     "
        },
        "apiKey": {
          "type": "String",
          "description": "\nA Maps API key. To obtain an API key, see developers.google.com/maps/documentation/javascript/tutorial#api_key.\n       "
        },
        "clientId": {
          "type": "String",
          "description": "\nA Maps API for Business Client ID. To obtain a Maps API for Business Client ID, see developers.google.com/maps/documentation/business/.\nIf set, a Client ID will take precedence over an API Key.\n       "
        },
        "language": {
          "type": "String",
          "description": "\nThe localized language to load the Maps API with. For more information\nsee https://developers.google.com/maps/documentation/javascript/basics#Language\n\nNote: the Maps API defaults to the preffered language setting of the browser.\nUse this parameter to override that behavior.\n       "
        },
        "libraryErrorMessage": {
          "type": "String",
          "description": "\nNot null if library has failed to load\n       "
        },
        "libraryLoaded": {
          "type": "Boolean",
          "description": "\nTrue if library has been successfully loaded\n       "
        },
        "notifyEvent": {
          "type": "String",
          "description": "\nName of event fired when library is loaded and available.\n       "
        },
        "signedIn": {
          "type": "Boolean",
          "description": "\nIf true, sign-in is enabled.\nSee https://developers.google.com/maps/documentation/javascript/signedin#enable_sign_in\n       "
        },
        "version": {
          "type": "String",
          "description": "\nVersion of the Maps API to use.\n       "
        },
        "_computeUrl": {
          "type": "Function",
          "description": ""
        },
        "_libraryLoadCallback": {
          "type": "Function",
          "description": ""
        },
        "_libraryUrlChanged": {
          "type": "Function",
          "description": ""
        },
        "_loadLibrary": {
          "type": "Function",
          "description": "loads the library, and fires this.notifyEvent upon completion "
        },
        "libraryUrl": {
          "type": "String",
          "description": ""
        },
        "mapsUrl": {
          "type": "String",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-realtime-api": {
      "name": "google-realtime-api",
      "description": "\nDynamically loads the Google Drive Realtime API, firing the `api-load` event when ready.\n\nAny number of components can use `&lt;google-realtime-api&gt;` elements, and the library will only be loaded once.\n",
      "attributes": {
        "api": {
          "type": "",
          "description": "\nReturns `gapi.drive.realtime`\n     "
        },
        "libraryErrorMessage": {
          "type": "String",
          "description": "\nNot null if library has failed to load\n       "
        },
        "libraryLoaded": {
          "type": "Boolean",
          "description": "\nTrue if library has been successfully loaded\n       "
        },
        "notifyEvent": {
          "type": "String",
          "description": "\nName of event fired when library is loaded and available.\n       "
        },
        "_libraryLoadCallback": {
          "type": "Function",
          "description": ""
        },
        "_libraryUrlChanged": {
          "type": "Function",
          "description": ""
        },
        "_loadLibrary": {
          "type": "Function",
          "description": "loads the library, and fires this.notifyEvent upon completion "
        },
        "libraryUrl": {
          "type": "String",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-youtube-api": {
      "name": "google-youtube-api",
      "description": "\nDynamically loads the Google Youtube Iframe API, firing the `api-load` event when ready.\n\nAny number of components can use `&lt;google-youtube-api&gt;` elements, and the library will only be loaded once.\n\nhttps://developers.google.com/youtube/iframe_api_reference\n",
      "attributes": {
        "api": {
          "type": "",
          "description": ""
        },
        "callbackName": {
          "type": "String",
          "description": ""
        },
        "libraryErrorMessage": {
          "type": "String",
          "description": "\nNot null if library has failed to load\n       "
        },
        "libraryLoaded": {
          "type": "Boolean",
          "description": "\nTrue if library has been successfully loaded\n       "
        },
        "notifyEvent": {
          "type": "String",
          "description": "\nName of event fired when library loads.\n       "
        },
        "_libraryLoadCallback": {
          "type": "Function",
          "description": ""
        },
        "_libraryUrlChanged": {
          "type": "Function",
          "description": ""
        },
        "_loadLibrary": {
          "type": "Function",
          "description": "loads the library, and fires this.notifyEvent upon completion "
        },
        "libraryUrl": {
          "type": "String",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-js-api": {
      "name": "google-js-api",
      "description": "\nDynamically loads Google JavaScript API `gapi`, firing the `js-api-load` event when ready.\n\nAny number of components can use `&lt;google-js-api&gt;` elements, and the library will only be loaded once.\n\n##### Example\n\n    &lt;google-js-api&gt;&lt;/google-js-api&gt;\n    &lt;script&gt;\n      var api = document.querySelector('google-js-api');\n      api.addEventListener('js-api-load', function(e) {\n        console.log('API loaded', gapi);\n      });\n    &lt;/script&gt;\n",
      "attributes": {
        "api": {
          "type": "",
          "description": ""
        },
        "libraryErrorMessage": {
          "type": "String",
          "description": "\nNot null if library has failed to load\n       "
        },
        "libraryLoaded": {
          "type": "Boolean",
          "description": "\nTrue if library has been successfully loaded\n       "
        },
        "notifyEvent": {
          "type": "String",
          "description": "\nName of event fired when library is loaded and available.\n       "
        },
        "_libraryLoadCallback": {
          "type": "Function",
          "description": ""
        },
        "_libraryUrlChanged": {
          "type": "Function",
          "description": ""
        },
        "_loadLibrary": {
          "type": "Function",
          "description": "loads the library, and fires this.notifyEvent upon completion "
        },
        "libraryUrl": {
          "type": "String",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-calendar-list": {
      "name": "google-calendar-list",
      "description": "\nElement providing a list of Google Calendars for a signed in user.\nNeeds a google-signin element included somewhere on the same page\nthat handles authentication.\n\n##### Example\n\n    &lt;google-calendar-list title=\"What I'm up to\"&gt;&lt;/google-calendar-list&gt;\n\n",
      "attributes": {
        "calendars": {
          "type": "Array",
          "description": "\nList of calendars\n       "
        },
        "displayCalendars": {
          "type": "Function",
          "description": "\nDisplays the calendar list if the user is signed in to Google.\n     "
        },
        "title": {
          "type": "String",
          "description": "\nA title to be displayed on top of the calendar list.\n       "
        },
        "_computeCalHref": {
          "type": "Function",
          "description": ""
        },
        "_computeCalStyle": {
          "type": "Function",
          "description": ""
        },
        "_signedIn": {
          "type": "Boolean",
          "description": ""
        },
        "_signInChanged": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-calendar-busy-now": {
      "name": "google-calendar-busy-now",
      "description": "\nA badge showing the free/busy status based on the events in a given calendar.\n\n##### Example\n\n    &lt;google-calendar-busy-now\n        calendarId=\"YOUR_CAL_ID\"\n        apiKey=\"YOUR_API_KEY\"\n        busyLabel=\"Do not disturb\"\n        freeLabel=\"I'm free, talk to me!\"&gt;\n    &lt;/google-calendar-busy-now&gt;\n\n",
      "attributes": {
        "apiKey": {
          "type": "String",
          "description": "\nAPI key to use with Calendar API requests.\n         "
        },
        "busyLabel": {
          "type": "String",
          "description": "\nLabel to be displayed if the status is busy.\n         "
        },
        "calendarId": {
          "type": "String",
          "description": "\nEvent from this calendar decide whether the status is free/busy.\n         "
        },
        "displayBusy": {
          "type": "Function",
          "description": "\nDisplays the busy/free status. Use it to refresh label state\n        "
        },
        "freeLabel": {
          "type": "String",
          "description": "\nLabel to be displayed if the status is free.\n         "
        },
        "_calendarIdChanged": {
          "type": "Function",
          "description": ""
        },
        "_isAuthorized": {
          "type": "Boolean",
          "description": ""
        },
        "_isAuthorizedChanged": {
          "type": "Function",
          "description": ""
        },
        "_label": {
          "type": "String",
          "description": ""
        },
        "_labelClass": {
          "type": "String",
          "description": ""
        },
        "_setState": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-castable-video": {
      "name": "google-castable-video",
      "description": "\nThe `google-castable-video` element enables your HTML5 videos to be casted to any Chromecast.\n\nIt behaves exactly like an HTML5 video element except for some added methods and events.\n\nInstead of listening for the video element's `timeupdate` event please listen for the `google-castable-video-timeupdate` event. This event is fired if the video is playing locally and on the Chromecast device.\n\n##### Example\n\n    &lt;video is=\"google-castable-video\"&gt;\n      &lt;source src=\"video.mp4\" type=\"video/mp4\"&gt;\n    &lt;/video&gt;\n\n",
      "attributes": {
        "appId": {
          "type": "String",
          "description": "\nThe appId that references which receiver the Chromecast will load.\n\n"
        },
        "bothCurrentTime": {
          "type": "",
          "description": ""
        },
        "bothPaused": {
          "type": "",
          "description": ""
        },
        "casting": {
          "type": "",
          "description": ""
        },
        "castMedia": {
          "type": "",
          "description": ""
        },
        "launchSessionManager": {
          "type": "Function",
          "description": "\nCall this when the user clicks the cast icon.\nOpens the cast extension to create a session with the selected receiver.\n\n"
        },
        "pause": {
          "type": "Function",
          "description": "\nCall the `pause` method from your controls.\n\n"
        },
        "play": {
          "type": "Function",
          "description": "\nCall the `play` method from your controls.\n\n"
        },
        "receiverAvailable": {
          "type": "",
          "description": ""
        },
        "session": {
          "type": "",
          "description": ""
        },
        "_bothPaused": {
          "type": "boolean",
          "description": "\nThe real paused state for local and cast playback.\n\n"
        },
        "_casting": {
          "type": "boolean",
          "description": "\nThe mode state depending on whether the video is playing locally or on the cast device.\n\n"
        },
        "_castMedia": {
          "type": "object",
          "description": "\nThe `chrome.cast.Media` object.\n\n"
        },
        "_initializeCastApi": {
          "type": "Function",
          "description": " Called internally when the cast sender api has been loaded."
        },
        "_onMediaDiscovered": {
          "type": "Function",
          "description": " or was already playing on cast device."
        },
        "_onSeeked": {
          "type": "Function",
          "description": " Redirecting `seeked` event to Chromecast."
        },
        "_onTimeupdate": {
          "type": "Function",
          "description": " Redirecting `timeupdate` event to `google-castable-video-timeupdate`."
        },
        "_onVolumechange": {
          "type": "Function",
          "description": " Redirecting `volumechange` event to Chromecast."
        },
        "_receiverAvailable": {
          "type": "boolean",
          "description": "\nReturns if any Chromecast is available.\n\n"
        },
        "_session": {
          "type": "object",
          "description": "\nThe `chrome.cast.Session` object.\n\n"
        },
        "_sessionUpdateListener": {
          "type": "Function",
          "description": " Internal method gets called when the cast session status changes."
        },
        "_synchronizeMedia": {
          "type": "Function",
          "description": " Internal method to synchronize the media objects."
        },
        "_triggerAvailability": {
          "type": "Function",
          "description": "\nThe `google-castable-video-receiver-status` event is fired whenever\nthe availability of Chromecasts changes. Use this to show or hide the cast icon.\n\n"
        },
        "_triggerCasting": {
          "type": "Function",
          "description": "\nThe `google-castable-video-casting` event is fired whenever the\nconnection status to a Chromecast changes. Use this to change the cast icon.\n\n"
        },
        "_triggerError": {
          "type": "Function",
          "description": "\nThe `google-castable-video-error` event is fired whenever\nan error occurs.\n\n"
        },
        "_triggerTimeupdate": {
          "type": "Function",
          "description": "\nThe `google-castable-video-timeupdate` event is fired whenever\nthe video's playback position changes.\n\n"
        },
        "extends": {
          "type": "string",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-chart": {
      "name": "google-chart",
      "description": "\n`google-chart` encapsulates Google Charts as a web component, allowing you to easily visualize\ndata. From simple line charts to complex hierarchical tree maps, the chart element provides a\nnumber of ready-to-use chart types.\n\n    &lt;google-chart\n      type='pie'\n      options='{\"title\": \"Distribution of days in 2001Q1\"}'\n      cols='[{\"label\":\"Month\", \"type\":\"string\"}, {\"label\":\"Days\", \"type\":\"number\"}]'\n      rows='[[\"Jan\", 31],[\"Feb\", 28],[\"Mar\", 31]]'&gt;\n    &lt;/google-chart&gt;\n\nHeight and width are specified as style attributes:\n\n    google-chart {\n      height: 300px;\n      width: 50em;\n    }\n\nData can be provided in one of three ways:\n\n- Via the `cols` and `rows` attributes:\n\n      cols='[{\"label\":\"Mth\", \"type\":\"string\"}, {\"label\":\"Days\", \"type\":\"number\"}]'\n      rows='[[\"Jan\", 31],[\"Feb\", 28],[\"Mar\", 31]]'\n\n- Via the `data` attribute, passing in the data directly:\n\n      data='[[\"Month\", \"Days\"], [\"Jan\", 31], [\"Feb\", 28], [\"Mar\", 31]]'\n\n- Via the `data` attribute, passing in the URL to a resource containing the\n  data, in JSON format:\n\n      data='http://example.com/chart-data.json'\n",
      "attributes": {
        "cols": {
          "type": "Array",
          "description": "\nSets the data columns for this object.\n\nWhen specifying data with `cols` you must also specify `rows`, and\nnot specify `data`.\n\nExample:\n&lt;pre&gt;[{label: \"Categories\", type: \"string\"},\n {label: \"Value\", type: \"number\"}]&lt;/pre&gt;\nSee &lt;a href=\"https://google-developers.appspot.com/chart/interactive/docs/reference#DataTable_addColumn\"&gt;Google Visualization API reference (addColumn)&lt;/a&gt;\nfor column definition format.\n\n"
        },
        "data": {
          "type": "Object",
          "description": "\nSets the entire dataset for this object.\nCan be used to provide the data directly, or to provide a URL from\nwhich to request the data.\n\nThe data format can be a two-dimensional array or the DataTable format\nexpected by Google Charts.\nSee &lt;a href=\"https://google-developers.appspot.com/chart/interactive/docs/reference#DataTable\"&gt;Google Visualization API reference (DataTable constructor)&lt;/a&gt;\nfor data table format details.\n\nWhen specifying data with `data` you must not specify `cols` or `rows`.\n\nExample:\n&lt;pre&gt;[[\"Categories\", \"Value\"],\n [\"Category 1\", 1.0],\n [\"Category 2\", 1.1]]&lt;/pre&gt;\n\n"
        },
        "drawChart": {
          "type": "Function",
          "description": "\nDraws the chart.\n\nCalled automatically on first load and whenever one of the attributes\nchanges. Can be called manually to handle e.g. page resizes.\n\n"
        },
        "getImageURI": {
          "type": "Function",
          "description": "\nReturns the chart serialized as an image URI.\n\nCall this after the chart is drawn (google-chart-render event).\n\n"
        },
        "options": {
          "type": "Object",
          "description": "\nSets the options for the chart.\n\nExample:\n&lt;pre&gt;{\n  title: \"Chart title goes here\",\n  hAxis: {title: \"Categories\"},\n  vAxis: {title: \"Values\", minValue: 0, maxValue: 2},\n  legend: \"none\"\n};&lt;/pre&gt;\nSee &lt;a href=\"https://google-developers.appspot.com/chart/interactive/docs/gallery\"&gt;Google Visualization API reference (Chart Gallery)&lt;/a&gt;\nfor the options available to each chart type.\n\n       "
        },
        "rows": {
          "type": "Array",
          "description": "\nSets the data rows for this object.\n\nWhen specifying data with `rows` you must also specify `cols`, and\nnot specify `data`.\n\nExample:\n&lt;pre&gt;[[\"Category 1\", 1.0],\n [\"Category 2\", 1.1]]&lt;/pre&gt;\nSee &lt;a href=\"https://google-developers.appspot.com/chart/interactive/docs/reference#addrow\"&gt;Google Visualization API reference (addRow)&lt;/a&gt;\nfor row format.\n\n"
        },
        "selection": {
          "type": "Array",
          "description": "\nSelected datapoint(s) in the map.\n\nAn array of objects, each with a numeric row and/or column property.\n`row` and `column` are the zero-based row or column number of an item\nin the data table to select.\n\nTo select a whole column, set row to null;\nto select a whole row, set column to null.\n\nExample:\n&lt;pre&gt;\n  [{row:0,column:1}, {row:1, column:null}]\n&lt;/pre&gt;\n\n"
        },
        "type": {
          "type": "String",
          "description": "\nSets the type of the chart.\n\nShould be one of:\n- `area`, `bar`, `bubble`, `candlestick`, `column`, `combo`, `geo`,\n  `histogram`, `line`, `pie`, `scatter`, `stepped-area`, `treemap`\n\nSee &lt;a href=\"https://google-developers.appspot.com/chart/interactive/docs/gallery\"&gt;Google Visualization API reference (Chart Gallery)&lt;/a&gt; for details.\n\n       "
        },
        "_canDraw": {
          "type": "boolean",
          "description": ""
        },
        "_chartObject": {
          "type": "object",
          "description": ""
        },
        "_chartTypes": {
          "type": "object",
          "description": ""
        },
        "_createDataTable": {
          "type": "Function",
          "description": ""
        },
        "_dataTable": {
          "type": "object",
          "description": ""
        },
        "_externalDataLoaded": {
          "type": "Function",
          "description": ""
        },
        "_isReady": {
          "type": "boolean",
          "description": ""
        },
        "_loadChartTypes": {
          "type": "Function",
          "description": ""
        },
        "_loadData": {
          "type": "Function",
          "description": ""
        },
        "_loadPackageByChartType": {
          "type": "Function",
          "description": ""
        },
        "_packages": {
          "type": "object",
          "description": ""
        },
        "_readyForAction": {
          "type": "Function",
          "description": ""
        },
        "_selectionChanged": {
          "type": "Function",
          "description": ""
        },
        "_typeChanged": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-feeds": {
      "name": "google-feeds",
      "description": "\nExposes [Google Feeds API](https://developers.google.com/feed/)\n\n&lt;b&gt;Example&lt;/b&gt;:\n\n    &lt;template is='dom-bind'&gt;\n      &lt;google-feeds feed='http://www.engadget.com/rss-full.xml'\n      results='{{result}}'&gt;&lt;/google-feeds&gt;\n      &lt;p&gt;Feed title: &lt;span&gt;{{result.title}}&lt;/span&gt;&lt;/p&gt;\n    &lt;/template&gt;\n\n",
      "attributes": {
        "count": {
          "type": "Number",
          "description": "\nNumber of feed items to fetch in fetchFeed\n       "
        },
        "feed": {
          "type": "String",
          "description": "\nurl of the feed to fetch.\n       "
        },
        "feeds": {
          "type": "Array",
          "description": "\nAn array of multiple feeds. Feed will load, and report results in `google-feeds-response` event.\n       "
        },
        "format": {
          "type": "String",
          "description": "\nFormat the data is returned. json(default)|xml|mixed\nOnly applies for one feed.\n       "
        },
        "loading": {
          "type": "Boolean",
          "description": "\nTrue if feeds API is loading an item\n       "
        },
        "query": {
          "type": "String",
          "description": "\nQuery for google.feeds.findFeeds(). Query result will be reported through `google-feeds-queryresponse` event\n       "
        },
        "results": {
          "type": "Object",
          "description": "\nResult of loading a single feed url\n       "
        },
        "_feedChanged": {
          "type": "Function",
          "description": ""
        },
        "_feedsApiLoaded": {
          "type": "Function",
          "description": ""
        },
        "_feedsCallbacks": {
          "type": "Array",
          "description": " into google-jsapi."
        },
        "_feedsChanged": {
          "type": "Function",
          "description": ""
        },
        "_fetchFeeds": {
          "type": "Function",
          "description": ""
        },
        "_fetchFeedsDone": {
          "type": "Function",
          "description": ""
        },
        "_fetchMultipleFeeds": {
          "type": "Function",
          "description": ""
        },
        "_findFeeds": {
          "type": "Function",
          "description": ""
        },
        "_findFeedsDone": {
          "type": "Function",
          "description": ""
        },
        "_format": {
          "type": "Function",
          "description": ""
        },
        "_isApiLoaded": {
          "type": "Function",
          "description": ""
        },
        "_queryChanged": {
          "type": "Function",
          "description": ""
        },
        "_withFeedsApi": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-hangout-button": {
      "name": "google-hangout-button",
      "description": "\nElement providing a button to start a Google Hangout.\n\n##### Example\n\n    &lt;google-hangout-button&gt;&lt;/google-hangout-button&gt;\n\n",
      "attributes": {
        "apps": {
          "type": "Array",
          "description": "\nSpecifies the Google+ Hangout apps to launch when a user clicks the\nHangout button. Invalid objects and parameters are ignored.\n\nSee the [Initial app parameters reference](https://developers.google.com/+/hangouts/button#initial_app_parameters)\nfor more details.\n       "
        },
        "invites": {
          "type": "Array",
          "description": "\nSpecifies the list of people to invite when the user clicks the\nHangout button. Invalid objects and parameters are ignored.\n\nSee the [Invite parameters reference](https://developers.google.com/+/hangouts/button#invite_parameters)\nfor more details.\n       "
        },
        "topic": {
          "type": "String",
          "description": "\nPre-populates the topic field for Hangouts on Air. Note that users can\nchange the topic of the Hangout after they have joined.\n       "
        },
        "type": {
          "type": "String",
          "description": "\nSpecifies what type of Hangout should be started.\nValid values are 'normal', 'onair', 'party' and 'moderated'\n\nSee the [Hangout button parameter reference](https://developers.google.com/+/hangouts/button#hangout_button_parameters)\nfor more details.\n       "
        },
        "width": {
          "type": "Number",
          "description": "\nSpecifies the width of the button.\n       "
        },
        "_load": {
          "type": "Function",
          "description": ""
        },
        "_loaded": {
          "type": "Boolean",
          "description": ""
        },
        "_postgame": {
          "type": "Function",
          "description": ""
        },
        "_pregame": {
          "type": "Function",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-map": {
      "name": "google-map",
      "description": "\nThe `google-map` element renders a Google Map.\n\n&lt;b&gt;Example&lt;/b&gt;:\n\n    &lt;style&gt;\n      google-map {\n        height: 600px;\n      }\n    &lt;/style&gt;\n    &lt;google-map latitude=\"37.77493\" longitude=\"-122.41942\"&gt;&lt;/google-map&gt;\n\n&lt;b&gt;Example&lt;/b&gt; - add markers to the map and ensure they're in view:\n\n    &lt;google-map latitude=\"37.77493\" longitude=\"-122.41942\" fit-to-markers&gt;\n      &lt;google-map-marker latitude=\"37.779\" longitude=\"-122.3892\"\n          draggable=\"true\" title=\"Go Giants!\"&gt;&lt;/google-map-marker&gt;\n      &lt;google-map-marker latitude=\"37.777\" longitude=\"-122.38911\"&gt;&lt;/google-map-marker&gt;\n    &lt;/google-map&gt;\n\n&lt;b&gt;Example&lt;/b&gt;:\n\n    &lt;google-map disable-default-ui zoom=\"15\"&gt;&lt;/google-map&gt;\n    &lt;script&gt;\n      var map = document.querySelector('google-map');\n      map.latitude = 37.77493;\n      map.longitude = -122.41942;\n      map.addEventListener('google-map-ready', function(e) {\n        alert('Map loaded!');\n      });\n    &lt;/script&gt;\n\n&lt;b&gt;Example&lt;/b&gt; - with Google directions, using data-binding inside another Polymer element\n\n    &lt;google-map map=\"{{map}}\"&gt;&lt;/google-map&gt;\n    &lt;google-map-directions map=\"{{map}}\"\n        start-address=\"San Francisco\" end-address=\"Mountain View\"&gt;\n    &lt;/google-map-directions&gt;\n\n",
      "attributes": {
        "additionalMapOptions": {
          "type": "Object",
          "description": "\nAdditional map options for google.maps.Map constructor.\nUse to specify additional options we do not expose as\nproperties.\nEx: `&lt;google-map additional-map-options='{\"mapTypeId\":\"satellite\"}'&gt;`\n\nNote, you can't use API enums like `google.maps.ControlPosition.TOP_RIGHT`\nwhen using this property as an HTML attribute. Instead, use the actual\nvalue (e.g. `3`) or set `.additionalMapOptions` in JS rather than using\nthe attribute.\n       "
        },
        "apiKey": {
          "type": "string",
          "description": "\nA Maps API key. To obtain an API key, see developers.google.com/maps/documentation/javascript/tutorial#api_key.\n       "
        },
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "clear": {
          "type": "Function",
          "description": "\nClears all markers from the map.\n\n"
        },
        "clickEvents": {
          "type": "Boolean",
          "description": "\nWhen true, map *click events are automatically registered.\n       "
        },
        "clientId": {
          "type": "string",
          "description": "\nA Maps API for Business Client ID. To obtain a Maps API for Business Client ID, see developers.google.com/maps/documentation/business/.\nIf set, a Client ID will take precedence over an API Key.\n       "
        },
        "disableDefaultUi": {
          "type": "Boolean",
          "description": "\nIf set, removes the map's default UI controls.\n       "
        },
        "disableZoom": {
          "type": "Boolean",
          "description": "\nIf true, prevent the user from zooming the map interactively.\n       "
        },
        "dragEvents": {
          "type": "Boolean",
          "description": "\nWhen true, map drag* events are automatically registered.\n       "
        },
        "fitToMarkers": {
          "type": "Boolean",
          "description": "\nIf set, the zoom level is set such that all markers (google-map-marker children) are brought into view.\n       "
        },
        "kml": {
          "type": "String",
          "description": "\nA kml file to load.\n       "
        },
        "language": {
          "type": "String",
          "description": "\nThe localized language to load the Maps API with. For more information\nsee https://developers.google.com/maps/documentation/javascript/basics#Language\n\nNote: the Maps API defaults to the preffered language setting of the browser.\nUse this parameter to override that behavior.\n       "
        },
        "latitude": {
          "type": "Number",
          "description": "\nA latitude to center the map on.\n       "
        },
        "longitude": {
          "type": "Number",
          "description": "\nA longitude to center the map on.\n       "
        },
        "map": {
          "type": "Object",
          "description": "\nA Maps API object.\n       "
        },
        "mapType": {
          "type": "String",
          "description": "\nMap type to display. One of 'roadmap', 'satellite', 'hybrid', 'terrain'.\n       "
        },
        "markers": {
          "type": "Array",
          "description": "\nThe markers on the map.\n       "
        },
        "maxZoom": {
          "type": "Number",
          "description": "\nA maximum zoom level which will be displayed on the map.\n       "
        },
        "minZoom": {
          "type": "Number",
          "description": "\nA minimum zoom level which will be displayed on the map.\n       "
        },
        "mouseEvents": {
          "type": "Boolean",
          "description": "\nWhen true, map mouse* events are automatically registered.\n       "
        },
        "noAutoTilt": {
          "type": "Boolean",
          "description": "\nWhen set, prevents the map from tilting (when the zoom level and viewport supports it).\n       "
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "objects": {
          "type": "Array",
          "description": "\nThe non-marker objects on the map.\n       "
        },
        "resize": {
          "type": "Function",
          "description": "\nExplicitly resizes the map, updating its center. This is useful if the\nmap does not show after you have unhidden it.\n\n"
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "signedIn": {
          "type": "Boolean",
          "description": "\nIf true, sign-in is enabled.\nSee https://developers.google.com/maps/documentation/javascript/signedin#enable_sign_in\n       "
        },
        "singleInfoWindow": {
          "type": "Boolean",
          "description": "\nIf set, all other info windows on markers are closed when opening a new one.\n       "
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "styles": {
          "type": "Object",
          "description": "\nIf set, custom styles can be applied to the map.\nFor style documentation see developers.google.com/maps/documentation/javascript/reference#MapTypeStyle\n       "
        },
        "version": {
          "type": "String",
          "description": "\nVersion of the Google Maps API to use.\n       "
        },
        "zoom": {
          "type": "Number",
          "description": "\nA zoom level to set the map to.\n       "
        },
        "_addMapListeners": {
          "type": "Function",
          "description": ""
        },
        "_attachChildrenToMap": {
          "type": "Function",
          "description": ""
        },
        "_clearListener": {
          "type": "Function",
          "description": ""
        },
        "_clickEventsChanged": {
          "type": "Function",
          "description": ""
        },
        "_debounceUpdateCenter": {
          "type": "Function",
          "description": ""
        },
        "_deselectMarker": {
          "type": "Function",
          "description": ""
        },
        "_disableDefaultUiChanged": {
          "type": "Function",
          "description": ""
        },
        "_disableZoomChanged": {
          "type": "Function",
          "description": ""
        },
        "_dragEventsChanged": {
          "type": "Function",
          "description": ""
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_fitToMarkersChanged": {
          "type": "Function",
          "description": ""
        },
        "_forwardEvent": {
          "type": "Function",
          "description": ""
        },
        "_getMapOptions": {
          "type": "Function",
          "description": ""
        },
        "_initGMap": {
          "type": "Function",
          "description": ""
        },
        "_loadKml": {
          "type": "Function",
          "description": ""
        },
        "_mapApiLoaded": {
          "type": "Function",
          "description": ""
        },
        "_mapTypeChanged": {
          "type": "Function",
          "description": ""
        },
        "_maxZoomChanged": {
          "type": "Function",
          "description": ""
        },
        "_minZoomChanged": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventsChanged": {
          "type": "Function",
          "description": ""
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_observeMarkers": {
          "type": "Function",
          "description": " watch for future updates to marker objects"
        },
        "_observeObjects": {
          "type": "Function",
          "description": " watch for future updates to non-marker objects"
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "_updateCenter": {
          "type": "Function",
          "description": ""
        },
        "_updateMarkers": {
          "type": "Function",
          "description": ""
        },
        "_updateObjects": {
          "type": "Function",
          "description": ""
        },
        "_zoomChanged": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "attributeChanged": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "google-map-marker": {
      "name": "google-map-marker",
      "description": "\nThe `google-map-marker` element represents a map marker. It is used as a\nchild of `google-map`.\n\n&lt;b&gt;Example&lt;/b&gt;:\n\n    &lt;google-map latitude=\"37.77493\" longitude=\"-122.41942\"&gt;\n      &lt;google-map-marker latitude=\"37.779\" longitude=\"-122.3892\"\n          title=\"Go Giants!\"&gt;&lt;/google-map-marker&gt;\n    &lt;/google-map&gt;\n\n&lt;b&gt;Example&lt;/b&gt; - marker with info window (children create the window content):\n\n    &lt;google-map-marker latitude=\"37.77493\" longitude=\"-122.41942\"&gt;\n      &lt;img src=\"image.png\"&gt;\n    &lt;/google-map-marker&gt;\n\n&lt;b&gt;Example&lt;/b&gt; - a draggable marker:\n\n    &lt;google-map-marker latitude=\"37.77493\" longitude=\"-122.41942\"\n         draggable=\"true\"&gt;&lt;/google-map-marker&gt;\n\n&lt;b&gt;Example&lt;/b&gt; - hide a marker:\n\n    &lt;google-map-marker latitude=\"37.77493\" longitude=\"-122.41942\"\n        hidden&gt;&lt;/google-map-marker&gt;\n\n",
      "attributes": {
        "animation": {
          "type": "String",
          "description": "\nA animation for the marker. \"DROP\" or \"BOUNCE\". See\nhttps://developers.google.com/maps/documentation/javascript/examples/marker-animations.\n       "
        },
        "clickEvents": {
          "type": "Boolean",
          "description": "\nWhen true, marker *click events are automatically registered.\n       "
        },
        "dragEvents": {
          "type": "Boolean",
          "description": "\nWhen true, marker drag* events are automatically registered.\n       "
        },
        "icon": {
          "type": "Object",
          "description": "\nImage URL for the marker icon.\n"
        },
        "info": {
          "type": "?Object",
          "description": "\nA Google Map Infowindow object.\n"
        },
        "latitude": {
          "type": "Number",
          "description": "\nThe marker's latitude coordinate.\n       "
        },
        "longitude": {
          "type": "Number",
          "description": "\nThe marker's longitude coordinate.\n       "
        },
        "map": {
          "type": "Object",
          "description": "\nThe Google map object.\n"
        },
        "marker": {
          "type": "Object",
          "description": "\nA Google Maps marker object.\n"
        },
        "mouseEvents": {
          "type": "Boolean",
          "description": "\nWhen true, marker mouse* events are automatically registered.\n       "
        },
        "open": {
          "type": "Boolean",
          "description": "\nSpecifies whether the InfoWindow is open or not\n       "
        },
        "zIndex": {
          "type": "Number",
          "description": "\nZ-index for the marker icon.\n       "
        },
        "_animationChanged": {
          "type": "Function",
          "description": ""
        },
        "_clearListener": {
          "type": "Function",
          "description": ""
        },
        "_clickEventsChanged": {
          "type": "Function",
          "description": ""
        },
        "_contentChanged": {
          "type": "Function",
          "description": ""
        },
        "_dragEventsChanged": {
          "type": "Function",
          "description": ""
        },
        "_forwardEvent": {
          "type": "Function",
          "description": ""
        },
        "_iconChanged": {
          "type": "Function",
          "description": ""
        },
        "_mapChanged": {
          "type": "Function",
          "description": ""
        },
        "_mapReady": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventsChanged": {
          "type": "Function",
          "description": ""
        },
        "_openChanged": {
          "type": "Function",
          "description": ""
        },
        "_updatePosition": {
          "type": "Function",
          "description": ""
        },
        "_zIndexChanged": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "attributeChanged": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-map-search": {
      "name": "google-map-search",
      "description": "\n`google-map-search` provides Google Maps Places API functionality.\n\nSee https://developers.google.com/maps/documentation/javascript/places for more\ninformation on the API.\n\n#### Example:\n\n    &lt;template is=\"dom-bind\"&gt;\n      &lt;google-map-search map=\"[[map]]\" query=\"Pizza\" results=\"{{results}}\"&gt;\n      &lt;/google-map-search&gt;\n      &lt;google-map map=\"{{map}}\" latitude=\"37.779\"\n                  longitude=\"-122.3892\"&gt;\n        &lt;template is=\"dom-repeat\" items=\"{{results}}\" as=\"marker\"&gt;\n          &lt;google-map-marker latitude=\"{{marker.latitude}}\"\n                             longitude=\"{{marker.longitude}}\"&gt;\n            &lt;h2&gt;{{marker.name}}&lt;/h2&gt;\n            &lt;span&gt;{{marker.formatted_address}}&lt;/span&gt;\n          &lt;/google-map-marker&gt;\n        &lt;/template&gt;\n      &lt;/google-map&gt;\n    &lt;/template&gt;\n ",
      "attributes": {
        "getDetails": {
          "type": "Function",
          "description": "\nFetches details for a given place.\n"
        },
        "globalSearch": {
          "type": "Boolean",
          "description": "\nBy default, search is restricted to the currently visible map area.\nSet this to true to search everywhere.\n\nIgnored if `radius` is set.\n       "
        },
        "latitude": {
          "type": "Number",
          "description": "\nLatitude of the center of the search area.\nIgnored if `globalSearch` is true.\n       "
        },
        "location": {
          "type": "Object",
          "description": "\nThe lat/lng location.\n       "
        },
        "longitude": {
          "type": "Number",
          "description": "\nLongitude of the center of the search area.\nIgnored if `globalSearch` is true.\n       "
        },
        "map": {
          "type": "Object",
          "description": "\nThe Google map object.\n"
        },
        "query": {
          "type": "String",
          "description": "\nThe search query.\n       "
        },
        "radius": {
          "type": "Number",
          "description": "\nSearch radius, in meters.\nIf `latitude` and `longitude` are not specified,\nthe center of the currently visible map area is used.\n\nIf not set, search will be restricted to the currently visible\nmap area, unless `globalSearch` is set to true.\n       "
        },
        "results": {
          "type": "Array",
          "description": "\nThe search results.\n       "
        },
        "search": {
          "type": "Function",
          "description": "\nPerform a search using for `query` for the search term.\n     "
        },
        "types": {
          "type": "String",
          "description": "\nSpace-separated list of result types.\nThe search will only return results of the listed types.\nSee https://developers.google.com/places/documentation/supported_types\nfor a list of supported types.\nLeave empty or null to search for all result types.\n       "
        },
        "_gotResults": {
          "type": "Function",
          "description": ""
        },
        "_updateLocation": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-map-directions": {
      "name": "google-map-directions",
      "description": "\nProvides the Google Maps API Directions Service to provide directions\nbetween a `startAddress` and `endAddress`.\n\nSee https://developers.google.com/maps/documentation/javascript/directions for more\ninformation on the API.\n\n#### Example:\n\n    &lt;template is=\"dom-bind\"&gt;\n      &lt;google-map-directions map=\"{{map}}\"\n          start-address=\"San Francisco\"\n          end-address=\"Mountain View\"\n          travel-mode=\"BICYCLING\"\n          waypoints='[{\"location\": \"Palo Alto\"}, {\"location\": \"San Mateo\"}]'&gt;&lt;/google-map-directions&gt;\n      &lt;google-map map=\"{{map}}\" latitude=\"37.779\"\n                  longitude=\"-122.3892\"&gt;&lt;/google-map&gt;\n    &lt;/template&gt;\n\n",
      "attributes": {
        "apiKey": {
          "type": "string",
          "description": "\nA Maps API key. To obtain an API key, see developers.google.com/maps/documentation/javascript/tutorial#api_key.\n       "
        },
        "endAddress": {
          "type": "String",
          "description": "\nEnd address or latlng for directions to end.\n\n"
        },
        "language": {
          "type": "String",
          "description": "\nThe localized language to load the Maps API with. For more information\nsee https://developers.google.com/maps/documentation/javascript/basics#Language\n\nNote: the Maps API defaults to the preffered language setting of the browser.\nUse this parameter to override that behavior.\n       "
        },
        "map": {
          "type": "Object",
          "description": "\nThe Google map object.\n\n"
        },
        "rendererOptions": {
          "type": "Object",
          "description": "\nOptions for the display of results\n       "
        },
        "response": {
          "type": "Object",
          "description": "\nThe response from the directions service.\n\n       "
        },
        "startAddress": {
          "type": "String",
          "description": "\nStart address or latlng to get directions from.\n\n"
        },
        "travelMode": {
          "type": "String",
          "description": "\nTravel mode to use.  One of 'DRIVING', 'WALKING', 'BICYCLING', 'TRANSIT'.\n       "
        },
        "waypoints": {
          "type": "Array",
          "description": "\nArray of intermediate waypoints. Directions will be calculated\nfrom the origin to the destination by way of each waypoint in this array.\nThe maximum allowed waypoints is 8, plus the origin, and destination.\nMaps API for Business customers are allowed 23 waypoints,\nplus the origin, and destination.\nWaypoints are not supported for transit directions. Optional.\n\n"
        },
        "_mapApiLoaded": {
          "type": "Function",
          "description": ""
        },
        "_mapChanged": {
          "type": "Function",
          "description": ""
        },
        "_responseChanged": {
          "type": "Function",
          "description": ""
        },
        "_route": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-sheets": {
      "name": "google-sheets",
      "description": "\nElement for interacting with Google Sheets.\n\n`&lt;google-sheets&gt;` pulls cell data from the Google Sheet specified by `key`.\nA spreadsheet's key can be found in the URL when viewing it in google docs (e.g. `docs.google.com/spreadsheet/ccc?key=&lt;KEY&gt;#gid=12345`).\n\nOptionally, pass the `tab-id` attribute to specify a particular worksheet tab in the spreadsheet. For example, the first tab would be `tab-id=\"1\"`. If `tab` is updated at a later time, the underlying data is also updated. **API calls are cached** as to not make extraneous calls.\n\nSee [developers.google.com/google-apps/spreadsheets](https://developers.google.com/google-apps/spreadsheets) for full Spreadsheets API documentation.\n\n#### Example\n\n    &lt;google-sheets key=\"...\" tab-id=\"1\" client-id=\"...\"&gt;&lt;/google-sheets&gt;\n\n    &lt;script&gt;\n      var sheet = document.querySelector('google-sheets');\n\n      sheet.addEventListener('google-sheet-data', function(e) {\n       // this.spreadsheets - list of the user's spreadsheets\n       // this.tab - information on the tab that was fetched\n       // this.rows - cell row information for the tab that was fetched\n      });\n\n      sheet.addEventListener('error', function(e) {\n       // e.detail.response\n      });\n    &lt;/script&gt;\n\n&lt;b&gt;Example&lt;/b&gt; - `published` is a perf optimization and hints that the spreadsheet has been published (public):\n\n    &lt;google-sheets key=\"0Anye-JMjUkZZdDBkMVluMEhZMmFGeHpYdDJJV1FBRWc\" published&gt;&lt;/google-sheets&gt;\n\n&lt;b&gt;Example&lt;/b&gt; - leaving off the `key` returns as list of the user's spreadsheets.\n\n    &lt;google-sheets client-id=\"...\"&gt;&lt;/google-sheets&gt;\n\n&lt;b&gt;Example&lt;/b&gt; - show a list of Map markers, using data-binding features inside Polymer:\n\n    &lt;template is=\"dom-bind\"&gt;\n      &lt;google-sheets\n        key=\"0Anye-JMjUkZZdDBkMVluMEhZMmFGeHpYdDJJV1FBRWc\" tab-id=\"1\" rows=\"{{rows}}\"\n        client-id=\"...\"&gt;\n      &lt;/google-sheets&gt;\n      &lt;google-map&gt;\n        &lt;google-map-marker latitude=\"{{gsx$lat.$t}}\" longitude=\"{{gsx$lng.$t}}\"&gt;\n      &lt;/google-map&gt;\n    &lt;/template&gt;\n\n&lt;b&gt;Example&lt;/b&gt; - list a user's private spreadsheets. Authenticate with google-signin button.\n\n    &lt;google-signin\n      client-id=\"1054047045356-j8pgqgls9vdef3rl09hapoicumbte0bo.apps.googleusercontent.com\"\n      scopes=\"https://spreadsheets.google.com/feeds\"&gt;\n    &lt;/google-signin&gt;\n\n    &lt;template is=\"dom-bind\"&gt;\n      &lt;google-sheets client-id=\"1054047045356-j8pgqgls9vdef3rl09hapoicumbte0bo.apps.googleusercontent.com\"\n         key=\"1QMGizivw3UJ3-R9BFK7sfrXE0RL87dygk2C0RcuKoDY\" tab-id=\"1\"\n         spreadsheets=\"{{spreadsheets}}\"&gt;&lt;/google-sheets&gt;\n      &lt;template is=\"dom-repeat\" items=\"[[spreadsheets]]\"&gt;\n        &lt;p&gt;{{item.title.$t}}&lt;/p&gt;\n      &lt;/template&gt;\n    &lt;/template&gt;\n\n",
      "attributes": {
        "clientId": {
          "type": "String",
          "description": "\nA Google Developers client ID. Obtain from [console.developers.google.com](https://console.developers.google.com). Required for accessing a private spreadsheet. Optional if accessing a public spreadsheet.\n       "
        },
        "key": {
          "type": "String",
          "description": "\nThe key of the spreadsheet. This can be found in the URL when viewing\nthe document is Google Docs (e.g. `docs.google.com/spreadsheet/ccc?key=&lt;KEY&gt;`).\n\nLeaving off this attribute still returns a list of the users spreadsheets in the `spreadsheets` property.\n       "
        },
        "openInGoogleDocsUrl": {
          "type": "String",
          "description": "\nThe URL to open this spreadsheet in Google Sheets.\n       "
        },
        "published": {
          "type": "Boolean",
          "description": "\nA hint that the spreadsheet is published publicly in Google Docs. Used as a performance optimization.\nMake sure the sheet is also publicly viewable by anyone in the Share settings.\n\n"
        },
        "rows": {
          "type": "Array",
          "description": "\nIf a spreadsheet `key` is specified, returns a list of cell row data.\n       "
        },
        "sheet": {
          "type": "Object",
          "description": "\nThe fetched sheet corresponding to the `key` attribute.\n       "
        },
        "spreadsheets": {
          "type": "Array",
          "description": "\nList of the user's spreadsheets. Shared across instances.\n       "
        },
        "tab": {
          "type": "Object",
          "description": "\nMeta data about the particular tab that was retrieved for the spreadsheet.\n       "
        },
        "tabId": {
          "type": "Number",
          "description": "\nTab within a spreadsheet. For example, the first tab in a spreadsheet\nwould be `tab-id=\"1\"`.\n       "
        },
        "_computeGoogleDocsUrl": {
          "type": "Function",
          "description": ""
        },
        "_configUpdate": {
          "type": "Function",
          "description": ""
        },
        "_getCellRows": {
          "type": "Function",
          "description": ""
        },
        "_getWorksheet": {
          "type": "Function",
          "description": ""
        },
        "_keyChanged": {
          "type": "Function",
          "description": ""
        },
        "_listSpreadsheets": {
          "type": "Function",
          "description": ""
        },
        "_onCellRows": {
          "type": "Function",
          "description": ""
        },
        "_onSignInFail": {
          "type": "Function",
          "description": ""
        },
        "_onSignInSuccess": {
          "type": "Function",
          "description": ""
        },
        "_onSpreadsheetList": {
          "type": "Function",
          "description": ""
        },
        "_onWorksheet": {
          "type": "Function",
          "description": ""
        },
        "_sheetChanged": {
          "type": "Function",
          "description": ""
        },
        "_tabChanged": {
          "type": "Function",
          "description": ""
        },
        "_tabIdChanged": {
          "type": "Function",
          "description": ""
        },
        "_worksheetId": {
          "type": "object",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": "\nFired when the spreadsheet's cell information is available.\n\n"
        }
      }
    },
    "google-signin": {
      "name": "google-signin",
      "description": "\n&lt;google-signin&gt; is used to authenticate with Google, allowing you to interact\nwith other Google APIs such as Drive and Google+.\n\n&lt;img style=\"max-width:100%;\" src=\"https://cloud.githubusercontent.com/assets/107076/6791176/5c868822-d16a-11e4-918c-ec9b84a2db45.png\"/&gt;\n\nIf you do not need to show the button, use companion `&lt;google-signin-aware&gt;` element to declare scopes, check authentication state.\n\n#### Examples\n\n    &lt;google-signin client-id=\"...\" scopes=\"https://www.googleapis.com/auth/drive\"&gt;&lt;/google-signin&gt;\n\n    &lt;google-signin label-signin=\"Sign-in\" client-id=\"...\" scopes=\"https://www.googleapis.com/auth/drive\"&gt;&lt;/google-signin&gt;\n\n    &lt;google-signin theme=\"dark\" width=\"iconOnly\" client-id=\"...\" scopes=\"https://www.googleapis.com/auth/drive\"&gt;&lt;/google-signin&gt;\n\n\n#### Notes\n\nThe attribute `clientId` is provided in your Google Developers Console\n(https://console.developers.google.com).\n\nThe `scopes` attribute allows you to specify which scope permissions are required\n(e.g do you want to allow interaction with the Google Drive API). Many APIs also\nneed to be enabled in the Google Developers Console before you can use them.\n\nThe `requestVisibleActions` attribute is necessary if you want to write app\nactivities (https://developers.google.com/+/web/app-activities/) on behalf of\nthe user. Please note that this attribute is only valid in combination with the\nplus.login scope (https://www.googleapis.com/auth/plus.login).\n\nThe `offline` attribute allows you to get an auth code which your server can\nredeem for an offline access token\n(https://developers.google.com/identity/sign-in/web/server-side-flow).\nYou can also set `offline-always-prompt` instead of `offline` to ensure that your app\nwill re-prompt the user for offline access and generate a working `refresh_token`\neven if they have already granted offline access to your app in the past.\n\nUse label properties to customize prompts.\n\nThe button can be styled in using the `height`, `width`, and `theme` attributes.\nThese attributes help you follow the Google+ Sign-In button branding guidelines\n(https://developers.google.com/+/branding-guidelines).\n\nThe `google-signin-success` event is triggered when a user successfully authenticates\nand `google-signed-out` is triggered when user signs out.\nYou can also use `isAuthorized` attribute to observe user's authentication state.\n\nAdditional events, such as `google-signout-attempted` are\ntriggered when the user attempts to sign-out and successfully signs out.\n\nWhen requesting offline access, the `google-signin-offline-success` event is\ntriggered when the user successfully consents with offline support.\n\nThe `google-signin-necessary` event is fired when scopes requested via\ngoogle-signin-aware elements require additional user permissions.\n\n#### Testing\n\nBy default, the demo accompanying this element is setup to work on localhost with\nport 8080. That said, you *should* update the `clientId` to your own one for\nany apps you're building. See the Google Developers Console\n(https://console.developers.google.com) for more info.\n\n",
      "attributes": {
        "appPackageName": {
          "type": "String",
          "description": "\nApp package name for android over-the-air installs.\nSee the relevant [docs](https://developers.google.com/+/web/signin/android-app-installs)\n         "
        },
        "brand": {
          "type": "String",
          "description": "\nThe brand being used for logo and styling.\n\n"
        },
        "clientId": {
          "type": "String",
          "description": "\na Google Developers clientId reference\n         "
        },
        "cookiePolicy": {
          "type": "String",
          "description": "\nThe cookie policy defines what URIs have access to the session cookie\nremembering the user's sign-in state.\nSee the relevant [docs](https://developers.google.com/+/web/signin/reference#determining_a_value_for_cookie_policy) for more information.\n\n"
        },
        "fill": {
          "type": "Boolean",
          "description": "\nBy default the ripple expands to fill the button. Set this to true to\nconstrain the ripple to a circle within the button.\n         "
        },
        "hasPlusScopes": {
          "type": "Boolean",
          "description": "\nTrue if *any* element has google+ scopes\n         "
        },
        "height": {
          "type": "HeightValue",
          "description": "\nThe height to use for the button.\n\nAvailable options: short, standard, tall.\n\n"
        },
        "hostedDomain": {
          "type": "String",
          "description": "\nThe Google Apps domain to which users must belong to sign in.\nSee the relevant [docs](https://developers.google.com/identity/sign-in/web/reference) for more information.\n         "
        },
        "isAuthorized": {
          "type": "Boolean",
          "description": "\nTrue if authorizations for *this* element have been granted\n         "
        },
        "labelAdditional": {
          "type": "String",
          "description": "\nAn optional label for the button for additional permissions.\n         "
        },
        "labelSignin": {
          "type": "String",
          "description": "\nAn optional label for the sign-in button.\n         "
        },
        "labelSignout": {
          "type": "String",
          "description": "\nAn optional label for the sign-out button.\n         "
        },
        "needAdditionalAuth": {
          "type": "Boolean",
          "description": "\nTrue if additional authorization required globally\n         "
        },
        "offline": {
          "type": "Boolean",
          "description": "\nAllows for offline `access_token` retrieval during the signin process.\n         "
        },
        "offlineAlwaysPrompt": {
          "type": "Boolean",
          "description": "\nForces a re-prompt, even if the user has already granted offline\naccess to your application in the past. You only need one of\n`offline` and `offlineAlwaysPrompt`.\n         "
        },
        "raised": {
          "type": "Boolean",
          "description": "\nIf true, the button will be styled with a shadow.\n         "
        },
        "requestVisibleActions": {
          "type": "String",
          "description": "\nThe app activity types you want to write on behalf of the user\n(e.g http://schemas.google.com/AddActivity)\n         "
        },
        "scopes": {
          "type": "String",
          "description": "\nThe scopes to provide access to (e.g https://www.googleapis.com/auth/drive)\nand should be space-delimited.\n         "
        },
        "signedIn": {
          "type": "Boolean",
          "description": "\nIs user signed in?\n         "
        },
        "signIn": {
          "type": "Function",
          "description": "Sign in user. Opens the authorization dialog for signing in.\nThe dialog will be blocked by a popup blocker unless called inside click handler.\n       "
        },
        "signOut": {
          "type": "Function",
          "description": "Sign out the user "
        },
        "theme": {
          "type": "ThemeValue",
          "description": "\nThe theme to use for the button.\n\nAvailable options: light, dark.\n\n"
        },
        "width": {
          "type": "WidthValue",
          "description": "\nThe width to use for the button.\n\nAvailable options: iconOnly, standard, wide.\n\n"
        },
        "_brand": {
          "type": "String",
          "description": ""
        },
        "_brandIcon": {
          "type": "String",
          "description": ""
        },
        "_computeBrand": {
          "type": "Function",
          "description": ""
        },
        "_computeButtonClass": {
          "type": "Function",
          "description": ""
        },
        "_computeButtonIsSignIn": {
          "type": "Function",
          "description": " Button state computed "
        },
        "_computeButtonIsSignOut": {
          "type": "Function",
          "description": ""
        },
        "_computeButtonIsSignOutAddl": {
          "type": "Function",
          "description": ""
        },
        "_computeIcon": {
          "type": "Function",
          "description": ""
        },
        "_computeSigninLabel": {
          "type": "Function",
          "description": "\nDetermines the proper label based on the attributes.\n       "
        },
        "_labelSignin": {
          "type": "String",
          "description": ""
        },
        "_observeSignedIn": {
          "type": "Function",
          "description": ""
        },
        "_signInKeyPress": {
          "type": "Function",
          "description": ""
        },
        "_signOutKeyPress": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-signin-aware": {
      "name": "google-signin-aware",
      "description": "\n`google-signin-aware` is used to enable authentication in custom elements by\ninteracting with a google-signin element that needs to be present somewhere\non the page.\n\nThe `scopes` attribute allows you to specify which scope permissions are required\n(e.g do you want to allow interaction with the Google Drive API).\n\nThe `google-signin-aware-success` event is triggered when a user successfully\nauthenticates. If either `offline` or `offlineAlwaysPrompt` is set to true, successful\nauthentication will also trigger the `google-signin-offline-success`event.\nThe `google-signin-aware-signed-out` event is triggered when a user explicitly\nsigns out via the google-signin element.\n\nYou can bind to `isAuthorized` property to monitor authorization state.\n##### Example\n\n    &lt;google-signin-aware scopes=\"https://www.googleapis.com/auth/drive\"&gt;&lt;/google-signin-aware&gt;\n\n\n##### Example with offline\n    &lt;template id=\"awareness\" is=\"dom-bind\"&gt;\n      &lt;google-signin-aware\n          scopes=\"https://www.googleapis.com/auth/drive\"\n          offline\n          on-google-signin-aware-success=\"handleSignin\"\n          on-google-signin-offline-success=\"handleOffline\"&gt;&lt;/google-signin-aware&gt;\n    &lt;\\/template&gt;\n    &lt;script&gt;\n      var aware = document.querySelector('#awareness');\n      aware.handleSignin = function(response) {\n        var user = gapi.auth2.getAuthInstance().currentUser.get();\n        console.log('User name: ' + user.getBasicProfile().getName());\n      };\n      aware.handleOffline = function(response) {\n        console.log('Offline code received: ' + response.detail.code);\n        // Here you would POST response.detail.code to your webserver, which can\n        // exchange the authorization code for an access token. More info at:\n        // https://developers.google.com/identity/protocols/OAuth2WebServer\n      };\n    &lt;\\/script&gt;\n",
      "attributes": {
        "appPackageName": {
          "type": "String",
          "description": "\nApp package name for android over-the-air installs.\nSee the relevant [docs](https://developers.google.com/+/web/signin/android-app-installs)\n         "
        },
        "clientId": {
          "type": "String",
          "description": "\na Google Developers clientId reference\n         "
        },
        "cookiePolicy": {
          "type": "String",
          "description": "\nThe cookie policy defines what URIs have access to the session cookie\nremembering the user's sign-in state.\nSee the relevant [docs](https://developers.google.com/+/web/signin/reference#determining_a_value_for_cookie_policy) for more information.\n"
        },
        "hasPlusScopes": {
          "type": "Boolean",
          "description": "\nTrue if *any* element has google+ scopes\n         "
        },
        "hostedDomain": {
          "type": "String",
          "description": "\nThe Google Apps domain to which users must belong to sign in.\nSee the relevant [docs](https://developers.google.com/identity/sign-in/web/reference) for more information.\n         "
        },
        "isAuthorized": {
          "type": "Boolean",
          "description": "\nTrue if authorizations for *this* element have been granted\n         "
        },
        "needAdditionalAuth": {
          "type": "Boolean",
          "description": "\nTrue if additional authorizations for *any* element are required\n         "
        },
        "offline": {
          "type": "Boolean",
          "description": "\nAllows for offline `access_token` retrieval during the signin process.\nSee also `offlineAlwaysPrompt`. You only need to set one of the two; if both\nare set, the behavior of `offlineAlwaysPrompt` will override `offline`.\n         "
        },
        "offlineAlwaysPrompt": {
          "type": "Boolean",
          "description": "\nWorks the same as `offline` with the addition that it will always\nforce a re-prompt to the user, guaranteeing that you will get a\nrefresh_token even if the user has already granted offline access to\nthis application. You only need to set one of `offline` or\n`offlineAlwaysPrompt`, not both.\n          "
        },
        "requestVisibleActions": {
          "type": "String",
          "description": "\nThe app activity types you want to write on behalf of the user\n(e.g http://schemas.google.com/AddActivity)\n\n         "
        },
        "scopes": {
          "type": "String",
          "description": "\nThe scopes to provide access to (e.g https://www.googleapis.com/auth/drive)\nand should be space-delimited.\n         "
        },
        "signedIn": {
          "type": "Boolean",
          "description": "\nTrue if user is signed in\n         "
        },
        "signIn": {
          "type": "Function",
          "description": "pops up the authorization dialog "
        },
        "signOut": {
          "type": "Function",
          "description": "signs user out "
        },
        "_appPackageNameChanged": {
          "type": "Function",
          "description": ""
        },
        "_clientIdChanged": {
          "type": "Function",
          "description": ""
        },
        "_cookiePolicyChanged": {
          "type": "Function",
          "description": ""
        },
        "_hostedDomainChanged": {
          "type": "Function",
          "description": ""
        },
        "_offlineAlwaysPromptChanged": {
          "type": "Function",
          "description": ""
        },
        "_offlineChanged": {
          "type": "Function",
          "description": ""
        },
        "_requestVisibleActionsChanged": {
          "type": "Function",
          "description": ""
        },
        "_scopesChanged": {
          "type": "Function",
          "description": ""
        },
        "_updateOfflineCode": {
          "type": "Function",
          "description": ""
        },
        "_updateScopeStatus": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-streetview-pano": {
      "name": "google-streetview-pano",
      "description": "\nElement for generating a Google Maps Street View Panorama.\n\n##### Example\n\n    &lt;google-streetview-pano\n      pano-id=\"CWskcsTEZBNXaD8gG-zATA\"\n      heading=\"330\"\n      pitch=\"-2\"\n      zoom=\"0.8\"\n      disable-default-ui&gt;\n    &lt;/google-streetview-pano&gt;\n\nThere are tons of great panoramas on the [Google Maps | Views page](https://www.google.com/maps/views/home?gl=us)\n\nTo grab a panorama, look at its url in the address bar. For example:\n\ngoogle.com/maps/views/view/102684927602131521305/photo/**1szTnskrdKIAAAGuu3fZRw**\n\nThe hash in bold is the `pano-id`. You'll often need to dial in the `heading`, `pitch` and `zoom` manually.\n\nYou can also use the position attribute and set it to a position with a computed value. Example: { lat: 42.345573, lng: -71.098326 }\n\n    &lt;google-streetview-pano\n      position=\"[[_myComputedPosition()]]\"\n      heading=\"330\"\n      pitch=\"-2\"\n      zoom=\"0.8\"\n      disable-default-ui&gt;\n    &lt;/google-streetview-pano&gt;\n\n",
      "attributes": {
        "apiKey": {
          "type": "string",
          "description": "\nA Maps API key. To obtain an API key, see developers.google.com/maps/documentation/javascript/tutorial#api_key.\n       "
        },
        "clientId": {
          "type": "string",
          "description": "\nA Maps API for Business Client ID. To obtain a Maps API for Business Client ID, see developers.google.com/maps/documentation/business/.\nIf set, a Client ID will take precedence over an API Key.\n       "
        },
        "disableAutoPan": {
          "type": "Boolean",
          "description": "\nIf true, disables the auto panning animation\n       "
        },
        "disableDefaultUi": {
          "type": "Boolean",
          "description": "\nIf true, disables all default UI.\n       "
        },
        "heading": {
          "type": "Number",
          "description": "\nThe camera heading in degrees relative to true north. True north is 0°, east is 90°, south is 180°, west is 270°.\n       "
        },
        "language": {
          "type": "string",
          "description": "\nThe localized language to load the Maps API with. For more information\nsee https://developers.google.com/maps/documentation/javascript/basics#Language\n\nNote: the Maps API defaults to the preferred language setting of the browser.\nUse this parameter to override that behavior.\n\n       "
        },
        "pano": {
          "type": "object",
          "description": ""
        },
        "panoId": {
          "type": "String",
          "description": "\nSpecifies which photosphere to load\n\n\n       "
        },
        "pitch": {
          "type": "Number",
          "description": "\nThe camera pitch in degrees, relative to the street view vehicle. Ranges from 90° (directly upwards) to -90° (directly downwards).\n       "
        },
        "position": {
          "type": "Object",
          "description": "\nSpecifies which position to load\n\n\n       "
        },
        "rAFid": {
          "type": "object",
          "description": ""
        },
        "reset": {
          "type": "Function",
          "description": "\nReset the pov for the panorama.\n"
        },
        "stop": {
          "type": "Function",
          "description": "\nCancel the slow panning animation.\n"
        },
        "update": {
          "type": "Function",
          "description": "\nFired every rAF. Updates the heading to create a slow pan effect\nWill be canceled by mouse enter or calling stop()\n     "
        },
        "version": {
          "type": "String",
          "description": "\nVersion of the Google Maps API to use.\n\n       "
        },
        "zoom": {
          "type": "Number",
          "description": "\nSets the zoom level of the panorama. Fully zoomed-out is level 0, where the field of view is 180 degrees.\n       "
        },
        "_autoStop": {
          "type": "Function",
          "description": ""
        },
        "_autoUpdate": {
          "type": "Function",
          "description": ""
        },
        "_getPanoOptions": {
          "type": "Function",
          "description": "\nReturns the an object with the current panorama configurations.\n     "
        },
        "_mapApiLoaded": {
          "type": "Function",
          "description": "\nCalled when the Google Maps API has loaded.\n     "
        },
        "_panoIdChanged": {
          "type": "Function",
          "description": ""
        },
        "_positionChanged": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-url-shortener": {
      "name": "google-url-shortener",
      "description": "\n`google-url-shortener` is a web component that shortens URLs with the\n&lt;a href=\"https://developers.google.com/url-shortener/\"&gt;Google URL Shortener API\n&lt;/a&gt;.\n\n##### Example\n\n    &lt;google-url-shortener id=\"shortener\"&gt;&lt;/google-url-shortener&gt;\n\n    &lt;script&gt;\n      var shortener = document.getElementById('shortener');\n\n      shortener.addEventListener('google-url-shorten', function(event) {\n        console.log(event.detail.shortUrl);\n      });\n\n      // Shorten the current page URL.\n      shortener.longUrl = document.URL;\n      shortener.shorten();\n    &lt;/script&gt;\n\n##### Example using `auto` and binding.\n\n    &lt;google-url-shortener id=\"shortener\" longUrl=\"{{longUrl}}\" auto&gt;\n    &lt;/google-url-shortener&gt;\n\n    &lt;script&gt;\n      var shortener = document.getElementById('shortener');\n\n      shortener.addEventListener('google-url-shorten', function(event) {\n        // This will be called automatically every time `longUrl` changes.\n        console.log(event.detail.shortUrl);\n      });\n    &lt;/script&gt;\n\n",
      "attributes": {
        "auto": {
          "type": "Boolean",
          "description": "\nIf true, automatically performs the shortening request when `longUrl`\nchanges.\n         "
        },
        "error": {
          "type": "String",
          "description": "\nError when url was shortened\n         "
        },
        "longUrl": {
          "type": "String",
          "description": "\nThe URL to be shortened.\n         "
        },
        "shorten": {
          "type": "Function",
          "description": "\nShortens the URL in `longUrl`. Use if `auto` is not set.\n        "
        },
        "shortUrl": {
          "type": "String",
          "description": "\nShortened URL\n         "
        },
        "_apiLoadError": {
          "type": "Function",
          "description": ""
        },
        "_longUrlChanged": {
          "type": "Function",
          "description": ""
        },
        "_readyForAction": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "google-youtube": {
      "name": "google-youtube",
      "description": "\n`google-youtube` encapsulates the YouTube player into a web component.\n\n    &lt;google-youtube\n      video-id=\"...\"\n      height=\"270px\"\n      width=\"480px\"\n      rel=\"0\"\n      start=\"5\"\n      autoplay=\"1\"&gt;\n    &lt;/google-youtube&gt;\n\n`google-youtube` supports all of the [embedded player parameters](https://developers.google.com/youtube/player_parameters). Each can be set as an attribute on `google-youtube`.\n\nThe standard set of [YouTube player events](https://developers.google.com/youtube/iframe_api_reference#Events) are exposed, as well as methods for playing, pausing, seeking to a specific time, and loading a new video.\n\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--google-youtube-container`  | Mixin applied to the container div | `{}`\n`--google-youtube-thumbnail`  | Mixin for the video thumbnail      | `{}`\n`--google-youtube-iframe`     | Mixin for the embeded iframe       | `{}`\n\n\n",
      "attributes": {
        "autoplay": {
          "type": "Number",
          "description": "\n\"1\" if video should start automatically\n       "
        },
        "chromeless": {
          "type": "Boolean",
          "description": "\nA shorthand to enable a set of player attributes that, used together, simulate a \"chromeless\" YouTube player.\n\nEquivalent to setting the following attributes:\n- `controls=\"0\"`\n- `modestbranding=\"1\"`\n- `showinfo=\"0\"`\n- `iv_load_policy=\"3\"`\n- `rel=\"0\"`\n\nThe \"chromeless\" player has minimal YouTube branding in cued state, and the native controls\nwill be disabled during playback. Creating your own custom play/pause/etc. controls is recommended.\n       "
        },
        "currenttime": {
          "type": "Number",
          "description": "\nExposes the current playback time, in seconds.\n\nYou can divide this value by the `duration` to determine the playback percentage.\n       "
        },
        "currenttimeformatted": {
          "type": "String",
          "description": "\nExposes the current playback time, formatted as a (HH:)MM:SS string.\n       "
        },
        "duration": {
          "type": "Number",
          "description": "\nExposes the video duration, in seconds.\n\nYou can divide the `currenttime` to determine the playback percentage.\n\n"
        },
        "durationformatted": {
          "type": "String",
          "description": "\nExposes the video duration, formatted as a (HH:)MM:SS string.\n       "
        },
        "fluid": {
          "type": "Boolean",
          "description": "\nIf `fluid` is set, then the player will set its width to 100% to fill\nthe parent container, while adding `padding-top` to preserve the\naspect ratio provided by `width` and `height`. If `width` and `height`\nhave not been set, the player will fall back to a 16:9 aspect ratio.\nThis is useful for responsive designs where you don't want to\nintroduce letterboxing on your video.\n       "
        },
        "fractionloaded": {
          "type": "Number",
          "description": "\nThe fraction of the bytes that have been loaded for the current video, in the range [0-1].\n       "
        },
        "height": {
          "type": "String",
          "description": "\nSets the height of the player on the page.\nAccepts anything valid for a CSS measurement, e.g. '200px' or '50%'.\nIf the unit of measurement is left off, 'px' is assumed.\n       "
        },
        "mute": {
          "type": "Function",
          "description": "\nMutes the current video.\n\nDevelopers should take care not to break expected user experience by programmatically\nmodifying the volume on mobile browsers.\nNote that the YouTube player, in addition, does not display volume controls in a\nmobile environment.\n\n"
        },
        "pause": {
          "type": "Function",
          "description": "\nPauses the current video.\n\n"
        },
        "play": {
          "type": "Function",
          "description": "\nPlays the current video.\n\nNote that on certain mobile browsers, playback\n[can't be initiated programmatically](https://developers.google.com/youtube/iframe_api_reference#Mobile_considerations).\n\nIf `this.playsupported` is not `true`, calling `play()` will have no effect.\n\n"
        },
        "playbackstarted": {
          "type": "Boolean",
          "description": "\nWhether playback has started.\n\nThis defaults to `false` and is set to `true` once the first 'playing' event is fired by\nthe underlying YouTube Player API.\n\nOnce set to `true`, it will remain that way indefinitely.\nPaused/buffering/ended events won't cause `playbackstarted` to reset to `false`.\nNor will loading a new video into the player.\n       "
        },
        "playsupported": {
          "type": "Boolean",
          "description": "\nWhether programmatic `&lt;video&gt;.play()` for initial playback is supported in the current browser.\n\nMost mobile browsers [do not support](https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW1) autoplaying or scripted playback of videos.\nIf you attempt to automatically initiate playback of a `&lt;google-youtube&gt;`, e.g. by calling the `play()` method before\nplayback has initially begun, the YouTube Player will enter an unrecoverable \"stuck\" state.\nTo protect against this, check the value of `playsupported` and don't call `play()` if it is set to `false`.\n(You can hide/disable your custom play button, etc.)\n\nThe `playsupported` value is determined at runtime, by dynamically creating a `&lt;video&gt;` element with an\ninlined data source and calling `play()` on it. (Inspired by [Modernizr](https://github.com/Modernizr/Modernizr/blob/master/feature-detects/video/autoplay.js).)\n\nIf you would rather not incur the minimal overhead involved in going through this process, you can explicitly set\n`playsupported` to `true` or `false` when initializing `&lt;google-youtube&gt;`. This is only recommended if you know that\nyour web app will never (or only) be used on mobile browsers.\n       "
        },
        "seekTo": {
          "type": "Function",
          "description": "\nSkips ahead (or back) to the specified number of seconds.\n\n"
        },
        "setVolume": {
          "type": "Function",
          "description": "\nModifies the volume of the current video.\n\nDevelopers should take care not to break expected user experience by programmatically\nmodifying the volume on mobile browsers.\nNote that the YouTube player, in addition, does not display volume controls in a\nmobile environment.\n\n"
        },
        "state": {
          "type": "Number",
          "description": "\nExposes the current player state.\nUsing this attribute is an alternative to listening to `google-youtube-state-change` events,\nand can simplify the logic in templates with conditional binding.\n\nThe [possible values](https://developers.google.com/youtube/iframe_api_reference#onStateChange):\n  - -1 (unstarted)\n  - 0 (ended)\n  - 1 (playing)\n  - 2 (paused)\n  - 3 (buffering)\n  - 5 (video cued)\n       "
        },
        "thumbnail": {
          "type": "String",
          "description": "\nThe URL of an image to use as a custom thumbnail.\n\nThis is optional; if not provided, the standard YouTube embed (which uses the thumbnail associated\nwith the video on YouTube) will be used.\n\nIf `thumbnail` is set, than an `&lt;img&gt;` containing the thumbnail will be used in lieu of the actual\nYouTube embed. When the thumbnail is clicked, the `&lt;img&gt;` is swapped out for the actual YouTube embed,\nwhich will have [`autoplay=1`](https://developers.google.com/youtube/player_parameters#autoplay) set by default (in additional to any other player parameters specified on this element).\n\nPlease note that `autoplay=1` won't actually autoplay videos on mobile browsers, so two taps will be required\nto play the video there. Also, on desktop browsers, setting `autoplay=1` will prevent the playback\nfrom [incrementing the view count](https://support.google.com/youtube/answer/1714329) for the video.\n       "
        },
        "unMute": {
          "type": "Function",
          "description": "\nUnmutes the current video.\n\nDevelopers should take care not to break expected user experience by programmatically\nmodifying the volume on mobile browsers.\nNote that the YouTube player, in addition, does not display volume controls in a\nmobile environment.\n\n"
        },
        "videoId": {
          "type": "String",
          "description": "\nSets the id of the video to play. Changing this attribute will trigger a call\nto load a new video into the player (if `this.autoplay` is set to `1` and `playsupported` is true)\nor cue a new video otherwise.\n\nThe underlying YouTube embed will not be added to the page unless this\nvalue is set.\n\nYou can [search for videos programmatically](https://developers.google.com/youtube/v3/docs/search/list)\nusing the YouTube Data API, or just hardcode known video ids to display on your page.\n     "
        },
        "width": {
          "type": "String",
          "description": "\nSets the width of the player on the page.\nAccepts anything valid for a CSS measurement, e.g. '200px' or '50%'.\nIf the unit of measurement is left off, 'px' is assumed.\n       "
        },
        "__updatePlaybackStatsInterval": {
          "type": "object",
          "description": ""
        },
        "_apiLoad": {
          "type": "Function",
          "description": ""
        },
        "_computeContainerStyle": {
          "type": "Function",
          "description": ""
        },
        "_determinePlaySupported": {
          "type": "Function",
          "description": "\nDetects whether programmatic &lt;video&gt;.play() is supported in the current browser.\n\nThis is triggered via on-ironlocalstorage-load-empty. The logic is:\n- If playsupported is explicitly set to true or false on the element, use that.\n- Otherwise, if there's a cached value in localStorage, use that.\n- Otherwise, create a hidden &lt;video&gt; element and call play() on it:\n  - If playback starts, playsupported is true.\n  - If playback doesn't start (within 500ms), playsupported is false.\n  - Whatever happens, cache the result in localStorage.\n     "
        },
        "_handleThumbnailTap": {
          "type": "Function",
          "description": ""
        },
        "_pendingVideoId": {
          "type": "string",
          "description": ""
        },
        "_player": {
          "type": "object",
          "description": ""
        },
        "_toHHMMSS": {
          "type": "Function",
          "description": ""
        },
        "_updatePlaybackStats": {
          "type": "Function",
          "description": ""
        },
        "_useExistingPlaySupportedValue": {
          "type": "Function",
          "description": ""
        },
        "_videoIdChanged": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": "\nClean up the underlying Player `&lt;iframe&gt;` when we're removed from the DOM.\n     "
        },
        "ready": {
          "type": "Function",
          "description": "\nSets fluid width/height.\n\nIf the fluid attribute is set, the aspect ratio of the video will\nbe inferred (if set in pixels), or assumed to be 16:9. The element\nwill give itself enough top padding to force the player to use the\ncorrect aspect ratio, even as the screen size changes.\n\n     "
        }
      }
    },
    "google-youtube-upload": {
      "name": "google-youtube-upload",
      "description": "\nElement enabling you to upload videos to YouTube.\n\n##### Examples\n\nManual upload with a `Video Upload` button once a video file is selected:\n\n    &lt;google-youtube-upload client-id=\"...\"&gt;&lt;/google-youtube-upload&gt;\n\nAutomatic upload on video file select, with a custom title, and 'unlisted' privacy:\n\n    &lt;google-youtube-upload\n      auto\n      video-title=\"My Awesome Video\"\n      privacy-status=\"unlisted\"\n      client-id=\"...\"&gt;\n    &lt;/google-youtube-upload&gt;\n\n",
      "attributes": {
        "authenticated": {
          "type": "Boolean",
          "description": "\nWhether the user has authenticated or not.\n\n"
        },
        "auto": {
          "type": "Boolean",
          "description": "\nWhether files should be automatically uploaded.\n\n"
        },
        "categoryId": {
          "type": "Number",
          "description": "\nThe numeric YouTube\n[cateogry id](https://developers.google.com/apis-explorer/#p/youtube/v3/youtube.videoCategories.list?part=snippet&regionCode=us).\n\n"
        },
        "clientId": {
          "type": "String",
          "description": "\nAn OAuth 2 clientId reference, obtained from the\n[Google Developers Console](https://console.developers.google.com).\n\nFollow\n[the steps](https://developers.google.com/console/help/new/#generatingoauth2)\nfor registering for OAuth 2, ensure that the\n[YouTube Data API v3](https://developers.google.com/youtube/registering_an_application)\nis enabled for your API project, and ensure that the JavaScript Origin\nis set to the domain hosting the page on which\nyou'll be using this element.\n\n"
        },
        "description": {
          "type": "String",
          "description": "\nThe description for the new YouTube video.\n\n"
        },
        "privacyStatus": {
          "type": "String",
          "description": "\nThe [privacy setting](https://support.google.com/youtube/answer/157177?hl=en)\nfor the new video.\n\nValid values are 'public', 'private', and 'unlisted'.\n\n"
        },
        "tags": {
          "type": "Array",
          "description": "\nThe array of tags for the new YouTube video.\n\n"
        },
        "uploadFile": {
          "type": "Function",
          "description": "\nUploads a video file to YouTube.\n\n`this.accessToken` must already be set to a valid OAuth 2 access token.\n\n"
        },
        "videoId": {
          "type": "String",
          "description": "\nThe id of the new video.\n\nThis is set as soon as a `youtube-upload-complete` event is fired.\n\n"
        },
        "videoTitle": {
          "type": "String",
          "description": "\nThe title for the new YouTube video.\n\n"
        },
        "_channel": {
          "type": "Object",
          "description": ""
        },
        "_clientLoaded": {
          "type": "Function",
          "description": ""
        },
        "_computeChannelImageStyle": {
          "type": "Function",
          "description": ""
        },
        "_computeUploadButtonStyle": {
          "type": "Function",
          "description": ""
        },
        "_computeUploadDivStyle": {
          "type": "Function",
          "description": ""
        },
        "_handleFileChanged": {
          "type": "Function",
          "description": ""
        },
        "_handleUploadClicked": {
          "type": "Function",
          "description": ""
        },
        "_loadChannels": {
          "type": "Function",
          "description": ""
        },
        "_pollForVideoStatus": {
          "type": "Function",
          "description": ""
        },
        "_selectedFile": {
          "type": "Object",
          "description": ""
        },
        "_uploadStartTime": {
          "type": "number",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-a11y-announcer": {
      "name": "iron-a11y-announcer",
      "description": "\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n",
      "attributes": {
        "announce": {
          "type": "Function",
          "description": "\nCause a text string to be announced by screen readers.\n\n"
        },
        "mode": {
          "type": "String",
          "description": "\nThe value of mode is used to set the `aria-live` attribute\nfor the element that will be announced. Valid values are: `off`,\n`polite` and `assertive`.\n           "
        },
        "_onIronAnnounce": {
          "type": "Function",
          "description": ""
        },
        "_text": {
          "type": "String",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-a11y-keys": {
      "name": "iron-a11y-keys",
      "description": "\n`iron-a11y-keys` provides a cross-browser interface for processing \nkeyboard commands. The interface adheres to [WAI-ARIA best \npractices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding). \nIt uses an expressive syntax to filter key presses.\n\n## Basic usage\n\nThe sample code below is a portion of a custom element. The goal is to call\nthe `onEnter` method whenever the `paper-input` element is in focus and \nthe `Enter` key is pressed.\n\n    &lt;iron-a11y-keys id=\"a11y\" target=\"[[target]]\" keys=\"enter\"\n                        on-keys-pressed=\"onEnter\"&gt;&lt;/iron-a11y-keys&gt;\n    &lt;paper-input id=\"input\"\n                 placeholder=\"Type something. Press enter. Check console.\"\n                 value=\"{{userInput::input}}\"&gt;&lt;/paper-input&gt;\n\nThe custom element declares an `iron-a11y-keys` element that is bound to a \nproperty called `target`. The `target` property\nneeds to evaluate to the `paper-input` node. `iron-a11y-keys` registers \nan event handler for the target node using Polymer's [annotated event handler\nsyntax](https://www.polymer-project.org/1.0/docs/devguide/events.html#annotated-listeners). `{{userInput::input}}` sets the `userInput` property to the \nuser's input on each keystroke. \n\nThe last step is to link the two elements within the custom element's \nregistration.\n\n    ...\n    properties: {\n      userInput: {\n        type: String,\n        notify: true,\n      },\n      target: {\n        type: Object,\n        value: function() {\n          return this.$.input;\n        }\n      },\n    },\n    onEnter: function() {\n      console.log(this.userInput);\n    }\n    ...\n\n## The `keys` attribute\n\nThe `keys` attribute expresses what combination of keys triggers the event.\n\nThe attribute accepts a space-separated, plus-sign-concatenated \nset of modifier keys and some common keyboard keys.\n\nThe common keys are: `a-z`, `0-9` (top row and number pad), `*` (shift 8 and \nnumber pad), `F1-F12`, `Page Up`, `Page Down`, `Left Arrow`, `Right Arrow`,\n`Down Arrow`, `Up Arrow`, `Home`, `End`, `Escape`, `Space`, `Tab`, `Enter`.\n\nThe modifier keys are: `Shift`, `Control`, `Alt`.\n\nAll keys are expected to be lowercase and shortened. E.g.\n`Left Arrow` is `left`, `Page Down` is `pagedown`, `Control` is `ctrl`, \n`F1` is `f1`, `Escape` is `esc`, etc.\n\n### Grammar\n\nBelow is the [EBNF](http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form) \nGrammar of the `keys` attribute.\n\n    modifier = \"shift\" | \"ctrl\" | \"alt\";\n    ascii = ? /[a-z0-9]/ ? ;\n    fnkey = ? f1 through f12 ? ;\n    arrow = \"up\" | \"down\" | \"left\" | \"right\" ;\n    key = \"tab\" | \"esc\" | \"space\" | \"*\" | \"pageup\" | \"pagedown\" | \n          \"home\" | \"end\" | arrow | ascii | fnkey;\n    keycombo = { modifier, \"+\" }, key ;\n    keys = keycombo, { \" \", keycombo } ;\n\n### Example\n\nGiven the following value for `keys`: \n\n`ctrl+shift+f7 up pagedown esc space alt+m`\n\nThe event is fired if any of the following key combinations are fired: \n`Control` and `Shift` and `F7` keys, `Up Arrow` key, `Page Down` key, \n`Escape` key, `Space` key, `Alt` and `M` keys.\n\n### WAI-ARIA Slider Example\n\nThe following is an example of the set of keys that fulfills WAI-ARIA's \n\"slider\" role [best\npractices](http://www.w3.org/TR/wai-aria-practices/#slider):\n\n    &lt;iron-a11y-keys target=\"[[target]]\" keys=\"left pagedown down\" \n                    on-keys-pressed=\"decrement\"&gt;&lt;/iron-a11y-keys&gt;\n    &lt;iron-a11y-keys target=\"\"[[target]] keys=\"right pageup up\" \n                    on-keys-pressed=\"increment\"&gt;&lt;/iron-a11y-keys&gt;\n    &lt;iron-a11y-keys target=\"[[target]]\" keys=\"home\" \n                    on-keys-pressed=\"setMin\"&gt;&lt;/iron-a11y-keys&gt;\n    &lt;iron-a11y-keys target=\"\"[[target]] keys=\"end\" \n                    on-keys-pressed=\"setMax\"&gt;&lt;/iron-a11y-keys&gt;\n\nThe `target` properties must evaluate to a node. See the basic usage \nexample above.\n\nEach of the values for the `on-keys-pressed` attributes must evalute\nto methods. The `increment` method should move the slider a set amount \ntoward the maximum value. `decrement` should move the slider a set amount \ntoward the minimum value. `setMin` should move the slider to the minimum \nvalue. `setMax` should move the slider to the maximum value.\n\n",
      "attributes": {
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "keys": {
          "type": "String",
          "description": ""
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "target": {
          "type": "?Node",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_fireKeysPressed": {
          "type": "Function",
          "description": ""
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_keysChanged": {
          "type": "Function",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_targetChanged": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-ajax": {
      "name": "iron-ajax",
      "description": "\nThe `iron-ajax` element exposes network request functionality.\n\n    &lt;iron-ajax\n        auto\n        url=\"http://gdata.youtube.com/feeds/api/videos/\"\n        params='{\"alt\":\"json\", \"q\":\"chrome\"}'\n        handle-as=\"json\"\n        on-response=\"handleResponse\"\n        debounce-duration=\"300\"&gt;&lt;/iron-ajax&gt;\n\nWith `auto` set to `true`, the element performs a request whenever\nits `url`, `params` or `body` properties are changed. Automatically generated\nrequests will be debounced in the case that multiple attributes are changed\nsequentially.\n\nNote: The `params` attribute must be double quoted JSON.\n\nYou can trigger a request explicitly by calling `generateRequest` on the\nelement.\n\n",
      "attributes": {
        "activeRequests": {
          "type": "Array",
          "description": "\nAn Array of all in-flight requests originating from this iron-ajax\nelement.\n       "
        },
        "auto": {
          "type": "Boolean",
          "description": "\nIf true, automatically performs an Ajax request when either `url` or\n`params` changes.\n       "
        },
        "body": {
          "type": "Object",
          "description": "\nBody content to send with the request, typically used with \"POST\"\nrequests.\n\nIf body is a string it will be sent unmodified.\n\nIf Content-Type is set to a value listed below, then\nthe body will be encoded accordingly.\n\n   * `content-type=\"application/json\"`\n     * body is encoded like `{\"foo\":\"bar baz\",\"x\":1}`\n   * `content-type=\"application/x-www-form-urlencoded\"`\n     * body is encoded like `foo=bar+baz&x=1`\n\nOtherwise the body will be passed to the browser unmodified, and it\nwill handle any encoding (e.g. for FormData, Blob, ArrayBuffer).\n\n"
        },
        "bubbles": {
          "type": "Boolean",
          "description": "\nBy default, these events do not bubble largely because the `error` event has special\nmeaning in the window object. Setting this attribute will cause iron-ajax's request,\nresponse, and error events to bubble to the window object.\n       "
        },
        "contentType": {
          "type": "String",
          "description": "\nContent type to use when sending data. If the `contentType` property\nis set and a `Content-Type` header is specified in the `headers`\nproperty, the `headers` property value will take precedence.\n\nVaries the handling of the `body` param.\n       "
        },
        "debounceDuration": {
          "type": "Number",
          "description": "\nLength of time in milliseconds to debounce multiple automatically generated requests.\n       "
        },
        "generateRequest": {
          "type": "Function",
          "description": "\nPerforms an AJAX request to the specified URL.\n\n"
        },
        "handleAs": {
          "type": "String",
          "description": "\nSpecifies what data to store in the `response` property, and\nto deliver as `event.detail.response` in `response` events.\n\nOne of:\n\n   `text`: uses `XHR.responseText`.\n\n   `xml`: uses `XHR.responseXML`.\n\n   `json`: uses `XHR.responseText` parsed as JSON.\n\n   `arraybuffer`: uses `XHR.response`.\n\n   `blob`: uses `XHR.response`.\n\n   `document`: uses `XHR.response`.\n       "
        },
        "headers": {
          "type": "Object",
          "description": "\nHTTP request headers to send.\n\nExample:\n\n    &lt;iron-ajax\n        auto\n        url=\"http://somesite.com\"\n        headers='{\"X-Requested-With\": \"XMLHttpRequest\"}'\n        handle-as=\"json\"&gt;&lt;/iron-ajax&gt;\n\nNote: setting a `Content-Type` header here will override the value\nspecified by the `contentType` property of this element.\n       "
        },
        "jsonPrefix": {
          "type": "String",
          "description": "\nPrefix to be stripped from a JSON response before parsing it.\n\nIn order to prevent an attack using CSRF with Array responses\n(http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/)\nmany backends will mitigate this by prefixing all JSON response bodies\nwith a string that would be nonsensical to a JavaScript parser.\n\n       "
        },
        "lastError": {
          "type": "Object",
          "description": "\nlastRequest's error, if any.\n\n"
        },
        "lastRequest": {
          "type": "Object",
          "description": "\nThe most recent request made by this iron-ajax element.\n       "
        },
        "lastResponse": {
          "type": "Object",
          "description": "\nlastRequest's response.\n\nNote that lastResponse and lastError are set when lastRequest finishes,\nso if loading is true, then lastResponse and lastError will correspond\nto the result of the previous request.\n\nThe type of the response is determined by the value of `handleAs` at\nthe time that the request was generated.\n\n"
        },
        "loading": {
          "type": "Boolean",
          "description": "\nTrue while lastRequest is in flight.\n       "
        },
        "method": {
          "type": "String",
          "description": "\nThe HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'.\nDefault is 'GET'.\n       "
        },
        "params": {
          "type": "Object",
          "description": "\nAn object that contains query parameters to be appended to the\nspecified `url` when generating a request. If you wish to set the body\ncontent when making a POST request, you should use the `body` property\ninstead.\n       "
        },
        "queryString": {
          "type": "",
          "description": "\nThe query string that should be appended to the `url`, serialized from\nthe current value of `params`.\n\n"
        },
        "requestHeaders": {
          "type": "",
          "description": "\nAn object that maps header names to header values, first applying the\nthe value of `Content-Type` and then overlaying the headers specified\nin the `headers` property.\n\n"
        },
        "requestUrl": {
          "type": "",
          "description": "\nThe `url` with query string (if `params` are specified), suitable for\nproviding to an `iron-request` instance.\n\n"
        },
        "sync": {
          "type": "Boolean",
          "description": "\nToggle whether XHR is synchronous or asynchronous. Don't change this\nto true unless You Know What You Are Doing™.\n       "
        },
        "timeout": {
          "type": "Number",
          "description": "\nSet the timeout flag on the request.\n       "
        },
        "toRequestOptions": {
          "type": "Function",
          "description": "\nRequest options suitable for generating an `iron-request` instance based\non the current state of the `iron-ajax` instance's properties.\n\n"
        },
        "url": {
          "type": "String",
          "description": "\nThe URL target of the request.\n       "
        },
        "verbose": {
          "type": "Boolean",
          "description": "\nIf true, error messages will automatically be logged to the console.\n       "
        },
        "withCredentials": {
          "type": "Boolean",
          "description": "\nSet the withCredentials flag on the request.\n       "
        },
        "_boundHandleResponse": {
          "type": "Function",
          "description": ""
        },
        "_discardRequest": {
          "type": "Function",
          "description": ""
        },
        "_handleError": {
          "type": "Function",
          "description": ""
        },
        "_handleResponse": {
          "type": "Function",
          "description": ""
        },
        "_requestOptionsChanged": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": "\nFired when an error is received.\n\n"
        }
      }
    },
    "iron-request": {
      "name": "iron-request",
      "description": "\niron-request can be used to perform XMLHttpRequests.\n\n    &lt;iron-request id=\"xhr\"&gt;&lt;/iron-request&gt;\n    ...\n    this.$.xhr.send({url: url, params: params});\n",
      "attributes": {
        "abort": {
          "type": "Function",
          "description": "\nAborts the request.\n     "
        },
        "aborted": {
          "type": "Boolean",
          "description": "\nAborted will be true if an abort of the request is attempted.\n       "
        },
        "completes": {
          "type": "Promise",
          "description": "\nA promise that resolves when the `xhr` response comes back, or rejects\nif there is an error before the `xhr` completes.\n\n"
        },
        "errored": {
          "type": "Boolean",
          "description": "\nErrored will be true if the browser fired an error event from the\nXHR object (mainly network errors).\n       "
        },
        "parseResponse": {
          "type": "Function",
          "description": "\nAttempts to parse the response body of the XHR. If parsing succeeds,\nthe value returned will be deserialized based on the `responseType`\nset on the XHR.\n\n"
        },
        "progress": {
          "type": "Object",
          "description": "\nAn object that contains progress information emitted by the XHR if\navailable.\n\n"
        },
        "response": {
          "type": "*",
          "description": "\nA reference to the parsed response body, if the `xhr` has completely\nresolved.\n\n"
        },
        "send": {
          "type": "Function",
          "description": "\nSends an HTTP request to the server and returns the XHR object.\n\nThe handling of the `body` parameter will vary based on the Content-Type\nheader. See the docs for iron-ajax's `body` param for details.\n\n"
        },
        "status": {
          "type": "Number",
          "description": "\nA reference to the status code, if the `xhr` has completely resolved.\n       "
        },
        "statusText": {
          "type": "String",
          "description": "\nA reference to the status text, if the `xhr` has completely resolved.\n       "
        },
        "succeeded": {
          "type": "",
          "description": "\nSucceeded is true if the request succeeded. The request succeeded if it\nloaded without error, wasn't aborted, and the status code is ≥ 200, and\n&lt; 300, or if the status code is 0.\n\nThe status code 0 is accepted as a success because some schemes - e.g.\nfile:// - don't provide status codes.\n\n"
        },
        "timedOut": {
          "type": "Boolean",
          "description": "\nTimedOut will be true if the XHR threw a timeout event.\n       "
        },
        "xhr": {
          "type": "XMLHttpRequest",
          "description": "\nA reference to the XMLHttpRequest instance used to generate the\nnetwork request.\n\n"
        },
        "_encodeBodyObject": {
          "type": "Function",
          "description": "\n"
        },
        "_updateStatus": {
          "type": "Function",
          "description": "\nUpdates the status code and status text.\n     "
        },
        "_wwwFormUrlEncode": {
          "type": "Function",
          "description": "\n"
        },
        "_wwwFormUrlEncodePiece": {
          "type": "Function",
          "description": "\n"
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "iron-autogrow-textarea": {
      "name": "iron-autogrow-textarea",
      "description": "\n`iron-autogrow-textarea` is an element containing a textarea that grows in height as more\nlines of input are entered. Unless an explicit height or the `maxRows` property is set, it will\nnever scroll.\n\nExample:\n\n    &lt;iron-autogrow-textarea&gt;&lt;/iron-autogrow-textarea&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`\n\n",
      "attributes": {
        "autocomplete": {
          "type": "String",
          "description": "\nBound to the textarea's `autocomplete` attribute.\n       "
        },
        "autofocus": {
          "type": "Boolean",
          "description": "\nBound to the textarea's `autofocus` attribute.\n       "
        },
        "bindValue": {
          "type": "(string|number)",
          "description": "\nUse this property instead of `value` for two-way data binding.\nThis property will be deprecated in the future. Use `value` instead.\n"
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "hasValidator": {
          "type": "Function",
          "description": "\n"
        },
        "inputmode": {
          "type": "String",
          "description": "\nBound to the textarea's `inputmode` attribute.\n       "
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nTrue if the last call to `validate` is invalid.\n       "
        },
        "maxlength": {
          "type": "Number",
          "description": "\nThe maximum length of the input value.\n       "
        },
        "maxRows": {
          "type": "Number",
          "description": "\nThe maximum number of rows this element can grow to until it\nscrolls. 0 means no maximum.\n\n"
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "placeholder": {
          "type": "String",
          "description": "\nBound to the textarea's `placeholder` attribute.\n       "
        },
        "readonly": {
          "type": "String",
          "description": "\nBound to the textarea's `readonly` attribute.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the textarea as required.\n       "
        },
        "rows": {
          "type": "Number",
          "description": "\nThe initial number of rows.\n\n"
        },
        "selectionEnd": {
          "type": "",
          "description": "\nSets the textarea's selection end.\n     "
        },
        "selectionStart": {
          "type": "",
          "description": "\nReturns textarea's selection start.\n"
        },
        "textarea": {
          "type": "",
          "description": "\nReturns the underlying textarea.\n"
        },
        "validate": {
          "type": "Function",
          "description": "\nReturns true if `value` is valid. The validator provided in `validator`\nwill be used first, if it exists; otherwise, the `textarea`'s validity\nis used.\n"
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use.\n       "
        },
        "validatorType": {
          "type": "String",
          "description": "\nNamespace for this validator.\n       "
        },
        "value": {
          "type": "String",
          "description": "\nThe value for this element.\n       "
        },
        "_bindValueChanged": {
          "type": "Function",
          "description": ""
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_constrain": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_getValidity": {
          "type": "Function",
          "description": "\nReturns true if `value` is valid.  By default, it is passed\nto the validator's `validate()` function, if a validator is set. You\nshould override this method if you want to implement custom validity\nlogic for your element.\n\n"
        },
        "_invalidChanged": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onInput": {
          "type": "Function",
          "description": ""
        },
        "_onValueChanged": {
          "type": "Function",
          "description": ""
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_updateCached": {
          "type": "Function",
          "description": ""
        },
        "_validator": {
          "type": "",
          "description": ""
        },
        "_validatorMeta": {
          "type": "Object",
          "description": ""
        },
        "_valueForMirror": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-collapse": {
      "name": "iron-collapse",
      "description": "\n`iron-collapse` creates a collapsible block of content.  By default, the content\nwill be collapsed.  Use `opened` or `toggle()` to show/hide the content.\n\n    &lt;button on-click=\"toggle\"&gt;toggle collapse&lt;/button&gt;\n\n    &lt;iron-collapse id=\"collapse\"&gt;\n      &lt;div&gt;Content goes here...&lt;/div&gt;\n    &lt;/iron-collapse&gt;\n\n    ...\n\n    toggle: function() {\n      this.$.collapse.toggle();\n    }\n\n`iron-collapse` adjusts the height/width of the collapsible element to show/hide\nthe content.  So avoid putting padding/margin/border on the collapsible directly,\nand instead put a div inside and style that.\n\n    &lt;style&gt;\n      .collapse-content {\n        padding: 15px;\n        border: 1px solid #dedede;\n      }\n    &lt;/style&gt;\n\n    &lt;iron-collapse&gt;\n      &lt;div class=\"collapse-content\"&gt;\n        &lt;div&gt;Content goes here...&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/iron-collapse&gt;\n\n",
      "attributes": {
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "dimension": {
          "type": "",
          "description": ""
        },
        "enableTransition": {
          "type": "Function",
          "description": "\nenableTransition() is deprecated, but left over so it doesn't break existing code.\nPlease use `noAnimation` property instead.\n\n"
        },
        "hide": {
          "type": "Function",
          "description": ""
        },
        "horizontal": {
          "type": "Boolean",
          "description": "\nIf true, the orientation is horizontal; otherwise is vertical.\n\n"
        },
        "noAnimation": {
          "type": "Boolean",
          "description": "\nSet noAnimation to true to disable animations\n\n"
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "opened": {
          "type": "Boolean",
          "description": "\nSet opened to true to show the collapse element and to false to hide it.\n\n"
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "show": {
          "type": "Function",
          "description": ""
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "toggle": {
          "type": "Function",
          "description": "\nToggle the opened state.\n\n"
        },
        "updateSize": {
          "type": "Function",
          "description": ""
        },
        "_calcSize": {
          "type": "Function",
          "description": ""
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_horizontalChanged": {
          "type": "Function",
          "description": ""
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_openedChanged": {
          "type": "Function",
          "description": ""
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "_transitionEnd": {
          "type": "Function",
          "description": ""
        },
        "_updateTransition": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "iron-component-page": {
      "name": "iron-component-page",
      "description": "\nLoads Polymer element and behavior documentation using\n[Hydrolysis](https://github.com/PolymerLabs/hydrolysis) and renders a complete\ndocumentation page including demos (if available).\n",
      "attributes": {
        "active": {
          "type": "String",
          "description": "\nThe element or behavior that will be displayed on the page. Defaults\nto the element matching the name of the source file.\n           "
        },
        "base": {
          "type": "String",
          "description": "\nThe relative root for determining paths to demos and default source\ndetection.\n           "
        },
        "catalog": {
          "type": "Boolean",
          "description": "\nToggle flag to be used when this element is being displayed in the\nPolymer Elements catalog.\n           "
        },
        "docBehaviors": {
          "type": "Array",
          "description": "The Hydrolysis behavior descriptors that have been loaded. "
        },
        "docDemos": {
          "type": "Array",
          "description": "\nDemos for the currently selected element.\n           "
        },
        "docElements": {
          "type": "Array",
          "description": "The Hydrolysis element descriptors that have been loaded. "
        },
        "docSrc": {
          "type": "String",
          "description": "\nThe URL to a precompiled JSON descriptor. If you have precompiled\nand stored a documentation set using Hydrolysis, you can load the\nanalyzer directly via AJAX by specifying this attribute.\n\nIf a `doc-src` is not specified, it is ignored and the default\nrules according to the `src` attribute are used.\n           "
        },
        "marshal": {
          "type": "Function",
          "description": "\nRenders this element into static HTML for offline use.\n\nThis is mostly useful for debugging and one-off documentation generation.\nIf you want to integrate doc generation into your build process, you\nprobably want to be calling `hydrolysis.Analyzer.analyze()` directly.\n\n"
        },
        "scrollMode": {
          "type": "String",
          "description": "\nThe scroll mode for the page. For details about the modes,\nsee the mode property in paper-header-panel.\n           "
        },
        "src": {
          "type": "String",
          "description": "\nThe URL to an import that declares (or transitively imports) the\nelements that you wish to see documented.\n\nIf the URL is relative, it will be resolved relative to the master\ndocument.\n\nIf a `src` URL is not specified, it will resolve the name of the\ndirectory containing this element, followed by `dirname.html`. For\nexample:\n\n`awesome-sauce/index.html`:\n\n    &lt;iron-doc-viewer&gt;&lt;/iron-doc-viewer&gt;\n\nWould implicitly have `src=\"awesome-sauce.html\"`.\n           "
        },
        "transitive": {
          "type": "Boolean",
          "description": "\nWhether _all_ dependencies should be loaded and documented.\n\nTurning this on will probably slow down the load process dramatically.\n           "
        },
        "version": {
          "type": "string",
          "description": "\nAn optional version string.\n           "
        },
        "view": {
          "type": "String",
          "description": "\nThe current view. Can be `docs` or `demo`.\n           "
        },
        "_activeChanged": {
          "type": "Function",
          "description": ""
        },
        "_activeDescriptor": {
          "type": "!hydrolysis.ElementDescriptor",
          "description": "\nThe currently displayed element.\n\n"
        },
        "_ajaxDesc": {
          "type": "Object",
          "description": ""
        },
        "_ajaxLoading": {
          "type": "Boolean",
          "description": ""
        },
        "_analyzer": {
          "type": "!hydrolysis.Analyzer",
          "description": "\nThe hydrolysis analyzer.\n\n"
        },
        "_analyzerChanged": {
          "type": "Function",
          "description": ""
        },
        "_demoUrl": {
          "type": "String",
          "description": "The complete URL to this component's demo. "
        },
        "_demoView": {
          "type": "Function",
          "description": ""
        },
        "_detectAnalyzer": {
          "type": "Function",
          "description": ""
        },
        "_detectLoading": {
          "type": "Function",
          "description": ""
        },
        "_findDescriptor": {
          "type": "Function",
          "description": ""
        },
        "_fragmentPrefix": {
          "type": "string",
          "description": ""
        },
        "_getDefaultActive": {
          "type": "Function",
          "description": ""
        },
        "_handleAjaxResponse": {
          "type": "Function",
          "description": ""
        },
        "_handleComponentSelectedEvent": {
          "type": "Function",
          "description": ""
        },
        "_handleError": {
          "type": "Function",
          "description": ""
        },
        "_handleMenuItemSelected": {
          "type": "Function",
          "description": ""
        },
        "_hydroDesc": {
          "type": "Object",
          "description": ""
        },
        "_hydroLoading": {
          "type": "Boolean",
          "description": ""
        },
        "_loading": {
          "type": "Boolean",
          "description": "Whether the analyzer is loading source. "
        },
        "_loadingChanged": {
          "type": "Function",
          "description": ""
        },
        "_loadJson": {
          "type": "Function",
          "description": "\nLoads an array of hydrolysis element descriptors (as JSON) from the text\ncontent of this element, if present.\n\n"
        },
        "_setActiveFromHash": {
          "type": "Function",
          "description": "\nLoad the page identified in the fragment identifier.\n         "
        },
        "_srcChanged": {
          "type": "Function",
          "description": ""
        },
        "_srcUrl": {
          "type": "string",
          "description": "The complete URL to this component's source. "
        },
        "_updateFrameSrc": {
          "type": "Function",
          "description": ""
        },
        "_viewType": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "demo-snippet": {
      "name": "demo-snippet",
      "description": "\n`demo-snippet` is a helper element that displays the source of a code snippet and\nits rendered demo. It can be used for both native elements and\nPolymer elements.\n\n    Example of a native element demo\n\n        &lt;demo-snippet&gt;\n          &lt;template&gt;\n            &lt;input type=\"date\"&gt;\n          &lt;/template&gt;\n        &lt;/demo-snippet&gt;\n\n    Example of a Polymer &lt;paper-checkbox&gt; demo\n\n        &lt;demo-snippet&gt;\n          &lt;template&gt;\n            &lt;paper-checkbox&gt;Checkbox&lt;/paper-checkbox&gt;\n            &lt;paper-checkbox checked&gt;Checkbox&lt;/paper-checkbox&gt;\n          &lt;/template&gt;\n        &lt;/demo-snippet&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--demo-snippet` | Mixin applied to the entire element | `{}`\n`--demo-snippet-demo` | Mixin applied to just the demo section | `{}`\n`--demo-snippet-code` | Mixin applied to just the code section | `{}`\n\n",
      "attributes": {
        "_copyToClipboard": {
          "type": "Function",
          "description": ""
        },
        "_markdown": {
          "type": "String",
          "description": ""
        },
        "_resetCopyButtonState": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "url-bar": {
      "name": "url-bar",
      "description": "\n`url-bar` is a helper element that displays a simple read-only URL bar if\nand only if the page is in an iframe. In this way we can demo elements that\ndeal with the URL in our iframe-based demo environments.\n\nIf the page is not in an iframe, the url-bar element is not displayed.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--url-bar` | Mixin applied to the entire element | `{}`\n\n",
      "attributes": {
        "hash": {
          "type": "String",
          "description": ""
        },
        "inIframe": {
          "type": "Object",
          "description": ""
        },
        "path": {
          "type": "String",
          "description": ""
        },
        "query": {
          "type": "String",
          "description": ""
        },
        "url": {
          "type": "Object",
          "description": ""
        },
        "__computeUrl": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-doc-viewer": {
      "name": "iron-doc-viewer",
      "description": "\nRenders documentation describing an element's API.\n\n`iron-doc-viewer` renders element and behavior descriptions as extracted by\n[Hydrolysis](https://github.com/PolymerLabs/hydrolysis). You can provide them\neither via binding...\n\n    &lt;iron-doc-viewer descriptor=\"{{elementDescriptor}}\"&gt;&lt;/iron-doc-viewer&gt;\n\n...or by placing the element descriptor in JSON as the text content of an\n`iron-doc-viewer`:\n\n    &lt;iron-doc-viewer&gt;\n      {\n        \"is\": \"awesome-sauce\",\n        \"properties\": [\n          {\"name\": \"isAwesome\", \"type\": \"boolean\", \"desc\": \"Is it awesome?\"},\n        ]\n      }\n    &lt;/iron-doc-viewer&gt;\n\nHowever, be aware that due to current limitations in Polymer 0.8, _changes_ to\nthe text content will not be respected, only the initial value will be loaded.\nIf you wish to update the documented element, please set it via the `descriptor`\nproperty.\n\n",
      "attributes": {
        "descriptor": {
          "type": "hydrolysis.ElementDescriptor",
          "description": "\nThe [Hydrolysis](https://github.com/PolymerLabs/hydrolysis)-generated\nelement descriptor to display details for.\n\nAlternatively, the element descriptor can be provided as JSON via the text content\nof this element.\n\n"
        },
        "prefix": {
          "type": "String",
          "description": "\nPrefix for fragment identifiers used in anchors.\nFor static routing `iron-component-page` can\nset this to a string identifying the current component.\n           "
        },
        "scrollToAnchor": {
          "type": "Function",
          "description": "\nScrolls to the currently selected anchor, as identified\nby the URL hash. Whichever element or script is in charge\nof routing should call this method on initial page load and\non hashchange events.\n         "
        },
        "_broadcastBehavior": {
          "type": "Function",
          "description": ""
        },
        "_collapsedChanged": {
          "type": "Function",
          "description": ""
        },
        "_descriptorChanged": {
          "type": "Function",
          "description": "Converts `descriptor` into our template-friendly `_model`. "
        },
        "_formatAnchor": {
          "type": "Function",
          "description": ""
        },
        "_hideBehaviors": {
          "type": "Function",
          "description": ""
        },
        "_loadJson": {
          "type": "Function",
          "description": "\nLoads a hydrolysis element descriptor (as JSON) from the text content of\nthis element, if present.\n\n"
        },
        "_noneToShow": {
          "type": "Function",
          "description": ""
        },
        "_privateToggleLabel": {
          "type": "string",
          "description": "The label to show for the Private API toggle. "
        },
        "_showPrivate": {
          "type": "Boolean",
          "description": "Whether private properties should be hidden or shown. "
        },
        "_showPrivateChanged": {
          "type": "Function",
          "description": ""
        },
        "_toggleCollapsed": {
          "type": "Function",
          "description": ""
        },
        "_togglePrivate": {
          "type": "Function",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": "\nBroadcast when another component is clicked on\n"
        }
      }
    },
    "iron-doc-property": {
      "name": "iron-doc-property",
      "description": "\nRenders documentation describing a specific property of an element.\n\nGive it a hydrolysis `PropertyDescriptor` (via `descriptor`), and watch it go!\n",
      "attributes": {
        "anchorId": {
          "type": "String",
          "description": "\nUnique anchor ID for deep-linking.\n           "
        },
        "collapsed": {
          "type": "Boolean",
          "description": "\nWhether the property should show a one-liner, or full summary.\n\nNote that this property _is_ reflected as an attribute, but we perform\nthe reflection manually. In order to support the CSS transitions, we\nmust calculate the element height before setting the attribute.\n           "
        },
        "descriptor": {
          "type": "hydrolysis.PropertyDescriptor",
          "description": "\nThe [Hydrolysis](https://github.com/PolymerLabs/hydrolysis)-generated\nelement descriptor to display details for.\n\nAlternatively, the element descriptor can be provided as JSON via the text content\nof this element.\n\n"
        },
        "_collapsedChanged": {
          "type": "Function",
          "description": "\nReflects `collapsed` as the `_collapsed` attribute.\n\n\"Why not use `reflectToAttribute: true`?\", you ask? A fine question!\n\nWe avoid simple reflection purely because there is no purely declarative\nway of transitioning to/from `height: auto`. This callback manages\nsetting explicit heights for the property so that CSS can interpolate it.\n\n"
        },
        "_computeDefaultDisplay": {
          "type": "Function",
          "description": ""
        },
        "_computeHideDefault": {
          "type": "Function",
          "description": ""
        },
        "_computeHideMeta": {
          "type": "Function",
          "description": " hidden if no type and no defaults"
        },
        "_computeHideParams": {
          "type": "Function",
          "description": " hidden if no params, and no return value"
        },
        "_descriptorChanged": {
          "type": "Function",
          "description": ""
        },
        "_getAnnotation": {
          "type": "Function",
          "description": ""
        },
        "_onTransitionEnd": {
          "type": "Function",
          "description": "\nResets any state that was set up for transitions.\n\nWe are careful to reset our explicit heights after a transition\ncompletes, so that the property doesn't clip values if the user resizes\ntheir viewport.\n         "
        },
        "_paramText": {
          "type": "string",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-dropdown": {
      "name": "iron-dropdown",
      "description": "\n`&lt;iron-dropdown&gt;` is a generalized element that is useful when you have\nhidden content (`.dropdown-content`) that is revealed due to some change in\nstate that should cause it to do so.\n\nNote that this is a low-level element intended to be used as part of other\ncomposite elements that cause dropdowns to be revealed.\n\nExamples of elements that might be implemented using an `iron-dropdown`\ninclude comboboxes, menubuttons, selects. The list goes on.\n\nThe `&lt;iron-dropdown&gt;` element exposes attributes that allow the position\nof the `.dropdown-content` relative to the `.dropdown-trigger` to be\nconfigured.\n\n    &lt;iron-dropdown horizontal-align=\"right\" vertical-align=\"top\"&gt;\n      &lt;div class=\"dropdown-content\"&gt;Hello!&lt;/div&gt;\n    &lt;/iron-dropdown&gt;\n\nIn the above example, the `&lt;div&gt;` with class `.dropdown-content` will be\nhidden until the dropdown element has `opened` set to true, or when the `open`\nmethod is called on the element.\n\n",
      "attributes": {
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "allowOutsideScroll": {
          "type": "Boolean",
          "description": "\nBy default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.\n           "
        },
        "animationConfig": {
          "type": "Object",
          "description": "\nAnimation configuration. See README for more info.\n       "
        },
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "autoFitOnAttach": {
          "type": "Boolean",
          "description": "\nSet to true to auto-fit on attach.\n       "
        },
        "backdropElement": {
          "type": "Element",
          "description": "\nThe backdrop element.\n"
        },
        "cancel": {
          "type": "Function",
          "description": "\nCancels the overlay.\n"
        },
        "cancelAnimation": {
          "type": "Function",
          "description": "\nCancels the currently running animation.\n     "
        },
        "canceled": {
          "type": "Boolean",
          "description": "\nTrue if the overlay was canceled when it was last closed.\n       "
        },
        "center": {
          "type": "Function",
          "description": "\nCenters horizontally and vertically if not already positioned. This also sets\n`position:fixed`.\n     "
        },
        "close": {
          "type": "Function",
          "description": "\nClose the overlay.\n     "
        },
        "closeAnimationConfig": {
          "type": "Object",
          "description": "\nAn animation config. If provided, this will be used to animate the\nclosing of the dropdown.\n           "
        },
        "closingReason": {
          "type": "Object",
          "description": "\nReturns the reason this dialog was last closed.\n       "
        },
        "constrain": {
          "type": "Function",
          "description": "\nConstrains the size of the element to the window or `fitInfo` by setting `max-height`\nand/or `max-width`.\n     "
        },
        "containedElement": {
          "type": "",
          "description": "\nThe element that is contained by the dropdown, if any.\n         "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "entryAnimation": {
          "type": "String",
          "description": "\nConvenience property for setting an 'entry' animation. Do not set `animationConfig.entry`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
        },
        "exitAnimation": {
          "type": "String",
          "description": "\nConvenience property for setting an 'exit' animation. Do not set `animationConfig.exit`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
        },
        "fit": {
          "type": "Function",
          "description": "\nFits and optionally centers the element into the window, or `fitInfo` if specified.\n     "
        },
        "fitInto": {
          "type": "Object",
          "description": "\nThe element to fit `this` into.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "focusTarget": {
          "type": "Object",
          "description": "\nIf provided, this will be the element that will be focused when\nthe dropdown opens.\n           "
        },
        "getAnimationConfig": {
          "type": "Function",
          "description": "\nAn element implementing `Polymer.NeonAnimationRunnerBehavior` calls this method to configure\nan animation with an optional type. Elements implementing `Polymer.NeonAnimatableBehavior`\nshould define the property `animationConfig`, which is either a configuration object\nor a map of animation type to array of configuration objects.\n     "
        },
        "horizontalAlign": {
          "type": "String",
          "description": "\nThe orientation against which to align the dropdown content\nhorizontally relative to the dropdown trigger.\n           "
        },
        "horizontalOffset": {
          "type": "Number",
          "description": "\nA pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\", this offset will increase or decrease\nthe distance to the left side of the screen: a negative offset will\nmove the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.\n           "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "noAnimations": {
          "type": "Boolean",
          "description": "\nSet to true to disable animations when opening and closing the\ndropdown.\n           "
        },
        "noAutoFocus": {
          "type": "Boolean",
          "description": "\nSet to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened.\n       "
        },
        "noCancelOnEscKey": {
          "type": "Boolean",
          "description": "\nSet to true to disable canceling the overlay with the ESC key.\n       "
        },
        "noCancelOnOutsideClick": {
          "type": "Boolean",
          "description": "\nSet to true to disable canceling the overlay by clicking outside it.\n       "
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "open": {
          "type": "Function",
          "description": "\nOpen the overlay.\n     "
        },
        "openAnimationConfig": {
          "type": "Object",
          "description": "\nAn animation config. If provided, this will be used to animate the\nopening of the dropdown.\n           "
        },
        "opened": {
          "type": "Boolean",
          "description": "\nTrue if the overlay is currently displayed.\n       "
        },
        "playAnimation": {
          "type": "Function",
          "description": "\nPlays an animation with an optional `type`.\n"
        },
        "positionTarget": {
          "type": "Object",
          "description": "\nThe element that should be used to position the dropdown when\nit is opened.\n           "
        },
        "refit": {
          "type": "Function",
          "description": "\nUseful to call this after the element, the window, or the `fitInfo`\nelement has been resized. Will maintain the scroll position.\n         "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "resetFit": {
          "type": "Function",
          "description": "\nResets the target element's position and size constraints, and clear\nthe memoized data.\n         "
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "restoreFocusOnClose": {
          "type": "Boolean",
          "description": "\nSet to true to enable restoring of focus when overlay is closed.\n       "
        },
        "sizingTarget": {
          "type": "!Element",
          "description": "\nThe element that will receive a `max-height`/`width`. By default it is the same as `this`,\nbut it can be set to a child element. This is useful, for example, for implementing a\nscrolling region inside the element.\n"
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "toggle": {
          "type": "Function",
          "description": "\nToggle the opened state of the overlay.\n     "
        },
        "verticalAlign": {
          "type": "String",
          "description": "\nThe orientation against which to align the dropdown content\nvertically relative to the dropdown trigger.\n           "
        },
        "verticalOffset": {
          "type": "Number",
          "description": "\nA pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\", this offset will increase or decrease\nthe distance to the top side of the screen: a negative offset will\nmove the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.\n           "
        },
        "withBackdrop": {
          "type": "Boolean",
          "description": "\nSet to true to display a backdrop behind the overlay.\n       "
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_animationMeta": {
          "type": "Object",
          "description": ""
        },
        "_applyFocus": {
          "type": "Function",
          "description": "\nApply focus to focusTarget or containedElement\n         "
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_canceledChanged": {
          "type": "Function",
          "description": ""
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_cloneConfig": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_completeAnimations": {
          "type": "Function",
          "description": ""
        },
        "_configureAnimationEffects": {
          "type": "Function",
          "description": ""
        },
        "_copyProperties": {
          "type": "Function",
          "description": ""
        },
        "_defaultPositionTarget": {
          "type": "",
          "description": "\nThe element that should be used to position the dropdown when\nit opens, if no position target is configured.\n         "
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_discoverInfo": {
          "type": "Function",
          "description": "\nOverridden from `IronFitBehavior`.\nEnsure positionedBy has correct values for horizontally & vertically.\n         "
        },
        "_ensureSetup": {
          "type": "Function",
          "description": ""
        },
        "_entryAnimationChanged": {
          "type": "Function",
          "description": ""
        },
        "_exitAnimationChanged": {
          "type": "Function",
          "description": ""
        },
        "_finishPositioning": {
          "type": "Function",
          "description": ""
        },
        "_finishRenderClosed": {
          "type": "Function",
          "description": "\nTasks to be performed at the end of close action. Will fire `iron-overlay-closed`.\n"
        },
        "_finishRenderOpened": {
          "type": "Function",
          "description": "\nTasks to be performed at the end of open action. Will fire `iron-overlay-opened`.\n"
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_fitHeight": {
          "type": "",
          "description": ""
        },
        "_fitInfo": {
          "type": "?Object",
          "description": ""
        },
        "_fitLeft": {
          "type": "",
          "description": ""
        },
        "_fitTop": {
          "type": "",
          "description": ""
        },
        "_fitWidth": {
          "type": "",
          "description": ""
        },
        "_focusableNodes": {
          "type": "Array.<Node>",
          "description": "\nArray of nodes that can receive focus (overlay included), ordered by `tabindex`.\nThis is used to retrieve which is the first and last focusable nodes in order\nto wrap the focus for overlays `with-backdrop`.\n\nIf you know what is your content (specifically the first and last focusable children),\nyou can override this method to return only `[firstFocusable, lastFocusable];`\n"
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_focusedChild": {
          "type": "?Node",
          "description": "\nThe node being focused.\n"
        },
        "_focusNode": {
          "type": "Node",
          "description": "\nReturns the node to give focus to.\n"
        },
        "_focusTarget": {
          "type": "",
          "description": "\nThe element that should be focused when the dropdown opens.\n"
        },
        "_getAnimationConfigRecursive": {
          "type": "Function",
          "description": ""
        },
        "_horizontalAlignTargetValue": {
          "type": "Function",
          "description": "\nThe horizontal offset value used to position the dropdown.\n"
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_localeHorizontalAlign": {
          "type": "",
          "description": "\nThe horizontal align value, accounting for the RTL/LTR text direction.\n         "
        },
        "_manager": {
          "type": "Polymer.IronOverlayManagerClass",
          "description": "\nShortcut to access to the overlay manager.\n"
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onCaptureClick": {
          "type": "Function",
          "description": "\nCancels (closes) the overlay. Call when click happens outside the overlay.\n"
        },
        "_onCaptureEsc": {
          "type": "Function",
          "description": "\nHandles the ESC key event and cancels (closes) the overlay.\n"
        },
        "_onCaptureFocus": {
          "type": "Function",
          "description": "\nKeeps track of the focused child. If withBackdrop, traps focus within overlay.\n"
        },
        "_onCaptureTab": {
          "type": "Function",
          "description": "\nHandles TAB key events to track focus changes.\nWill wrap focus for overlays withBackdrop.\n"
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_onIronResize": {
          "type": "Function",
          "description": "\nRefits if the overlay is opened and not animating.\n"
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onNeonAnimationFinish": {
          "type": "Function",
          "description": "\nCalled when animation finishes on the dropdown (when opening or\nclosing). Responsible for \"completing\" the process of opening or\nclosing the dropdown by positioning it or setting its display to\nnone.\n         "
        },
        "_onNodesChange": {
          "type": "Function",
          "description": "\nWill call notifyResize if overlay is opened.\nCan be overridden in order to avoid multiple observers on the same node.\n"
        },
        "_openedChanged": {
          "type": "Function",
          "description": "\nCalled when the value of `opened` changes.\n\n"
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "_player": {
          "type": "?Object",
          "description": ""
        },
        "_preparePositioning": {
          "type": "Function",
          "description": ""
        },
        "_prepareRenderOpened": {
          "type": "Function",
          "description": "\ntasks which must occur before opening; e.g. making the element visible.\n"
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_renderClosed": {
          "type": "Function",
          "description": "\nOverridden from `IronOverlayBehavior`.\n         "
        },
        "_renderOpened": {
          "type": "Function",
          "description": "\nOverridden from `IronOverlayBehavior`.\n         "
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_runAnimationEffects": {
          "type": "Function",
          "description": ""
        },
        "_sizeDimension": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAnimationConfig": {
          "type": "Function",
          "description": "\nConstructs the final animation config from different properties used\nto configure specific parts of the opening and closing animations.\n         "
        },
        "_updateOverlayPosition": {
          "type": "Function",
          "description": "\nUpdates the overlay position based on configured horizontal\nand vertical alignment.\n         "
        },
        "_verticalAlignTargetValue": {
          "type": "Function",
          "description": "\nThe vertical offset value used to position the dropdown.\n"
        },
        "_withBackdropChanged": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-flex-layout": {
      "name": "iron-flex-layout",
      "description": "\nThe `&lt;iron-flex-layout&gt;` component provides simple ways to use\n[CSS flexible box layout](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes),\nalso known as flexbox. This component provides two different ways to use flexbox:\n\n1. [Layout classes](https://github.com/PolymerElements/iron-flex-layout/tree/master/iron-flex-layout-classes.html).\nThe layout class stylesheet provides a simple set of class-based flexbox rules, that\nlet you specify layout properties directly in markup. You must include this file\nin every element that needs to use them.\n\n  Sample use:\n\n      &lt;link rel=\"import\" href=\"../iron-flex-layout/iron-flex-layout-classes.html\"&gt;\n      &lt;style is=\"custom-style\" include=\"iron-flex iron-flex-alignment\"&gt;&lt;/style&gt;\n\n      &lt;div class=\"layout horizontal layout-start\"&gt;\n        &lt;div&gt;cross axis start alignment&lt;/div&gt;\n      &lt;/div&gt;\n\n2. [Custom CSS mixins](https://github.com/PolymerElements/iron-flex-layout/blob/master/iron-flex-layout.html).\nThe mixin stylesheet includes custom CSS mixins that can be applied inside a CSS rule using the `@apply` function.\n\nPlease note that the old [/deep/ layout classes](https://github.com/PolymerElements/iron-flex-layout/tree/master/classes)\nare deprecated, and should not be used. To continue using layout properties\ndirectly in markup, please switch to using the new `dom-module`-based\n[layout classes](https://github.com/PolymerElements/iron-flex-layout/tree/master/iron-flex-layout-classes.html).\nPlease note that the new version does not use `/deep/`, and therefore requires you\nto import the `dom-modules` in every element that needs to use them.\n\nA complete [guide](https://elements.polymer-project.org/guides/flex-layout) to `&lt;iron-flex-layout&gt;` is available.\n\n",
      "attributes": {}
    },
    "iron-form": {
      "name": "iron-form",
      "description": "\n`&lt;iron-form&gt;` is an HTML `&lt;form&gt;` element that can validate and submit any custom\nelements that implement `Polymer.IronFormElementBehavior`, as well as any\nnative HTML elements. For more information on which attributes are\navailable on the native form element, see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form\n\nIt supports both `get` and `post` methods, and uses an `iron-ajax` element to\nsubmit the form data to the action URL.\n\n  Example:\n\n    &lt;form is=\"iron-form\" id=\"form\" method=\"post\" action=\"/form/handler\"&gt;\n      &lt;paper-input name=\"name\" label=\"name\"&gt;&lt;/paper-input&gt;\n      &lt;input name=\"address\"&gt;\n      ...\n    &lt;/form&gt;\n\nBy default, a native `&lt;button&gt;` element will submit this form. However, if you\nwant to submit it from a custom element's click handler, you need to explicitly\ncall the form's `submit` method.\n\n  Example:\n\n    &lt;paper-button raised onclick=\"submitForm()\"&gt;Submit&lt;/paper-button&gt;\n\n    function submitForm() {\n      document.getElementById('form').submit();\n    }\n\nTo customize the request sent to the server, you can listen to the `iron-form-presubmit`\nevent, and modify the form's[`iron-ajax`](https://elements.polymer-project.org/elements/iron-ajax)\nobject. However, If you want to not use `iron-ajax` at all, you can cancel the\nevent and do your own custom submission:\n\n  Example of modifying the request, but still using the build-in form submission:\n\n    form.addEventListener('iron-form-presubmit', function() {\n      this.request.method = 'put';\n      this.request.params = someCustomParams;\n    });\n\n  Example of bypassing the build-in form submission:\n\n    form.addEventListener('iron-form-presubmit', function(event) {\n      event.preventDefault();\n      var firebase = new Firebase(form.getAttribute('action'));\n      firebase.set(form.serialize());\n    });\n\n",
      "attributes": {
        "contentType": {
          "type": "String",
          "description": "\nContent type to use when sending data. If the `contentType` property\nis set and a `Content-Type` header is specified in the `headers`\nproperty, the `headers` property value will take precedence.\nIf Content-Type is set to a value listed below, then\nthe `body` (typically used with POST requests) will be encoded accordingly.\n\n   * `content-type=\"application/json\"`\n     * body is encoded like `{\"foo\":\"bar baz\",\"x\":1}`\n   * `content-type=\"application/x-www-form-urlencoded\"`\n     * body is encoded like `foo=bar+baz&x=1`\n       "
        },
        "disableNativeValidationUi": {
          "type": "Boolean",
          "description": "\nBy default, the form will display the browser's native validation\nUI (i.e. popup bubbles and invalid styles on invalid fields). You can\nmanually disable this; however, if you do, note that you will have to\nmanually style invalid *native* HTML fields yourself, as you are\nexplicitly preventing the native form from doing so.\n       "
        },
        "headers": {
          "type": "Object",
          "description": "\nHTTP request headers to send.\n\nNote: setting a `Content-Type` header here will override the value\nspecified by the `contentType` property of this element.\n      "
        },
        "request": {
          "type": "Object",
          "description": "\niron-ajax request object used to submit the form.\n      "
        },
        "serialize": {
          "type": "Function",
          "description": "\nReturns a json object containing name/value pairs for all the registered\ncustom components and native elements of the form. If there are elements\nwith duplicate names, then their values will get aggregated into an\narray of values.\n\n"
        },
        "submit": {
          "type": "Function",
          "description": "\nSubmits the form.\n     "
        },
        "validate": {
          "type": "Function",
          "description": "\nValidates all the required elements (custom and native) in the form.\n"
        },
        "withCredentials": {
          "type": "Boolean",
          "description": "\nSet the withCredentials flag when sending data.\n      "
        },
        "_doFakeSubmitForValidation": {
          "type": "Function",
          "description": ""
        },
        "_handleFormError": {
          "type": "Function",
          "description": ""
        },
        "_handleFormResponse": {
          "type": "Function",
          "description": ""
        },
        "_isChildOfRegisteredParent": {
          "type": "Function",
          "description": "\nReturns true if `node` is in the shadow DOM of a different element,\nthat has also implemented IronFormElementBehavior and is registered\nto this form.\n     "
        },
        "_onReset": {
          "type": "Function",
          "description": "\nHandler that is called when the native form fires a `reset` event\n\n"
        },
        "_onSubmit": {
          "type": "Function",
          "description": "\nHandler that is called when the native form fires a `submit` event\n\n"
        },
        "_registerElement": {
          "type": "Function",
          "description": ""
        },
        "_resetCustomElements": {
          "type": "Function",
          "description": "\nResets all non-disabled form custom elements to their initial values.\n     "
        },
        "_unregisterElement": {
          "type": "Function",
          "description": ""
        },
        "_usesCheckedInsteadOfValue": {
          "type": "Function",
          "description": "\nReturns whether the given element is a radio-button or a checkbox.\n"
        },
        "_useValue": {
          "type": "Function",
          "description": ""
        },
        "extends": {
          "type": "string",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": "\nFired after the form is submitted and an error is received. An\nIronRequestElement is included as the event.detail object.\n\n"
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-icon": {
      "name": "iron-icon",
      "description": "\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px square.\n\nExample using src:\n\n    &lt;iron-icon src=\"star.png\"&gt;&lt;/iron-icon&gt;\n\nExample setting size to 32px x 32px:\n\n    &lt;iron-icon class=\"big\" src=\"big_star.png\"&gt;&lt;/iron-icon&gt;\n\n    &lt;style is=\"custom-style\"&gt;\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    &lt;/style&gt;\n\nThe iron elements include several sets of icons.\nTo use the default set of icons, import `iron-icons.html` and use the `icon` attribute to specify an icon:\n\n    &lt;link rel=\"import\" href=\"/components/iron-icons/iron-icons.html\"&gt;\n\n    &lt;iron-icon icon=\"menu\"&gt;&lt;/iron-icon&gt;\n\nTo use a different built-in set of icons, import the specific `iron-icons/&lt;iconset&gt;-icons.html`, and\nspecify the icon as `&lt;iconset&gt;:&lt;icon&gt;`. For example, to use a communication icon, you would\nuse:\n\n    &lt;link rel=\"import\" href=\"/components/iron-icons/communication-icons.html\"&gt;\n\n    &lt;iron-icon icon=\"communication:email\"&gt;&lt;/iron-icon&gt;\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID `fruit`:\n\n    &lt;iron-icon icon=\"fruit:cherry\"&gt;&lt;/iron-icon&gt;\n\nSee [iron-iconset](iron-iconset) and [iron-iconset-svg](iron-iconset-svg) for more information about\nhow to create a custom iconset.\n\nSee the [iron-icons demo](iron-icons?view=demo:demo/index.html) to see the icons available\nin the various iconsets.\n\nTo load a subset of icons from one of the default `iron-icons` sets, you can\nuse the [poly-icon](https://poly-icon.appspot.com/) tool. It allows you\nto select individual icons, and creates an iconset from them that you can\nuse directly in your elements.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n",
      "attributes": {
        "icon": {
          "type": "String",
          "description": "\nThe name of the icon to use. The name should be of the form:\n`iconset_name:icon_name`.\n         "
        },
        "src": {
          "type": "String",
          "description": "\nIf using iron-icon without an iconset, you can set the src to be\nthe URL of an individual icon image file. Note that this will take\nprecedence over a given icon attribute.\n         "
        },
        "theme": {
          "type": "String",
          "description": "\nThe name of the theme to used, if one is specified by the\niconset.\n         "
        },
        "_DEFAULT_ICONSET": {
          "type": "string",
          "description": ""
        },
        "_iconChanged": {
          "type": "Function",
          "description": ""
        },
        "_meta": {
          "type": "!Polymer.IronMeta",
          "description": "\n"
        },
        "_srcChanged": {
          "type": "Function",
          "description": ""
        },
        "_updateIcon": {
          "type": "Function",
          "description": ""
        },
        "_usesIconset": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-icons": {
      "name": "iron-icons",
      "description": "\n\n`iron-icons` is a utility import that includes the definition for the `iron-icon` element, `iron-iconset-svg` element, as well as an import for the default icon set.\n\nThe `iron-icons` directory also includes imports for additional icon sets that can be loaded into your project.\n\nExample loading icon set:\n\n    &lt;link rel=\"import\" href=\"../iron-icons/maps-icons.html\"&gt;\n\nTo use an icon from one of these sets, first prefix your `iron-icon` with the icon set name, followed by a colon, \":\", and then the icon id.\n\nExample using the directions-bus icon from the maps icon set:\n\n    &lt;iron-icon icon=\"maps:directions-bus\"&gt;&lt;/iron-icon&gt;\n\n\nSee [iron-icon](#iron-icon) for more information about working with icons.\n\nSee [iron-iconset](#iron-iconset) and [iron-iconset-svg](#iron-iconset-svg) for more information about how to create a custom iconset.\n\n",
      "attributes": {}
    },
    "iron-iconset-svg": {
      "name": "iron-iconset-svg",
      "description": "\nThe `iron-iconset-svg` element allows users to define their own icon sets\nthat contain svg icons. The svg icon elements should be children of the\n`iron-iconset-svg` element. Multiple icons should be given distinct id's.\n\nUsing svg elements to create icons has a few advantages over traditional\nbitmap graphics like jpg or png. Icons that use svg are vector based so\nthey are resolution independent and should look good on any device. They\nare stylable via css. Icons can be themed, colorized, and even animated.\n\nExample:\n\n    &lt;iron-iconset-svg name=\"my-svg-icons\" size=\"24\"&gt;\n      &lt;svg&gt;\n        &lt;defs&gt;\n          &lt;g id=\"shape\"&gt;\n            &lt;rect x=\"12\" y=\"0\" width=\"12\" height=\"24\" /&gt;\n            &lt;circle cx=\"12\" cy=\"12\" r=\"12\" /&gt;\n          &lt;/g&gt;\n        &lt;/defs&gt;\n      &lt;/svg&gt;\n    &lt;/iron-iconset-svg&gt;\n\nThis will automatically register the icon set \"my-svg-icons\" to the iconset\ndatabase.  To use these icons from within another element, make a\n`iron-iconset` element and call the `byId` method\nto retrieve a given iconset. To apply a particular icon inside an\nelement use the `applyIcon` method. For example:\n\n    iconset.applyIcon(iconNode, 'car');\n\n",
      "attributes": {
        "applyIcon": {
          "type": "Function",
          "description": "\nApplies an icon to the given element.\n\nAn svg icon is prepended to the element's shadowRoot if it exists,\notherwise to the element itself.\n\n"
        },
        "getIconNames": {
          "type": "Function",
          "description": "\nConstruct an array of all icon names in this iconset.\n\n"
        },
        "name": {
          "type": "String",
          "description": "\nThe name of the iconset.\n       "
        },
        "removeIcon": {
          "type": "Function",
          "description": "\nRemove an icon from the given element by undoing the changes effected\nby `applyIcon`.\n\n"
        },
        "size": {
          "type": "Number",
          "description": "\nThe size of an individual icon. Note that icons must be square.\n       "
        },
        "_cloneIcon": {
          "type": "Function",
          "description": "\nProduce installable clone of the SVG element matching `id` in this\niconset, or `undefined` if there is no matching element.\n\n"
        },
        "_createIconMap": {
          "type": "Function",
          "description": "\nCreate a map of child SVG elements by id.\n\n"
        },
        "_nameChanged": {
          "type": "Function",
          "description": "\n\nWhen name is changed, register iconset metadata\n\n     "
        },
        "_prepareSvgClone": {
          "type": "Function",
          "description": "\n"
        },
        "attached": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-iconset": {
      "name": "iron-iconset",
      "description": "\n",
      "attributes": {
        "applyIcon": {
          "type": "Function",
          "description": "\nApplies an icon to the given element as a css background image. This\nmethod does not size the element, and it's usually necessary to set\nthe element's height and width so that the background image is visible.\n\n"
        },
        "iconNames": {
          "type": "Array",
          "description": "\nArray of fully-qualified names of icons in this set.\n       "
        },
        "icons": {
          "type": "String",
          "description": "\nA space separated list of names corresponding to icons in the iconset\nimage file. This list must be ordered the same as the icon images\nin the image file.\n       "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of the iconset.\n       "
        },
        "removeIcon": {
          "type": "Function",
          "description": "\nRemove an icon from the given element by undoing the changes effected\nby `applyIcon`.\n\n"
        },
        "size": {
          "type": "Number",
          "description": "\nThe size of an individual icon. Note that icons must be square.\n       "
        },
        "src": {
          "type": "String",
          "description": "\nThe URL of the iconset image.\n       "
        },
        "width": {
          "type": "Number",
          "description": "\nThe width of the iconset image. This must only be specified if the\nicons are arranged into separate rows inside the image.\n\n"
        },
        "_addIconStyles": {
          "type": "Function",
          "description": ""
        },
        "_computeIconMap": {
          "type": "Function",
          "description": ""
        },
        "_computeIconNames": {
          "type": "Function",
          "description": ""
        },
        "_getIconOffset": {
          "type": "Function",
          "description": ""
        },
        "_getThemedOffset": {
          "type": "Function",
          "description": "\nReturns an object containing `offsetX` and `offsetY` properties which\nspecify the pixel location in the iconset's src file for the given\n`icon` and `theme`. It's uncommon to call this method. It is useful,\nfor example, to manually position a css backgroundImage to the proper\noffset. It's more common to use the `applyIcon` method.\n\n"
        },
        "_invalidateIconMap": {
          "type": "Function",
          "description": ""
        },
        "_mapThemes": {
          "type": "Function",
          "description": ""
        },
        "_nameChanged": {
          "type": "Function",
          "description": ""
        },
        "_offsetX": {
          "type": "Number",
          "description": "\nThe horizontal offset of the icon images in the inconset src image.\nThis is typically used if the image resource contains additional images\nbeside those intended for the iconset.\n       "
        },
        "_offsetY": {
          "type": "Number",
          "description": "\nThe vertical offset of the icon images in the inconset src image.\nThis is typically used if the image resource contains additional images\nbeside those intended for the iconset.\n       "
        },
        "_prepareIconset": {
          "type": "Function",
          "description": ""
        },
        "_recomputeIconMap": {
          "type": "Function",
          "description": ""
        },
        "_removeIconStyles": {
          "type": "Function",
          "description": ""
        },
        "_srcChanged": {
          "type": "Function",
          "description": ""
        },
        "_validateIconMap": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-image": {
      "name": "iron-image",
      "description": "\n`iron-image` is an element for displaying an image that provides useful sizing and\npreloading options not found on the standard `&lt;img&gt;` tag.\n\nThe `sizing` option allows the image to be either cropped (`cover`) or\nletterboxed (`contain`) to fill a fixed user-size placed on the element.\n\nThe `preload` option prevents the browser from rendering the image until the\nimage is fully loaded.  In the interim, either the element's CSS `background-color`\ncan be be used as the placeholder, or the `placeholder` property can be\nset to a URL (preferably a data-URI, for instant rendering) for an\nplaceholder image.\n\nThe `fade` option (only valid when `preload` is set) will cause the placeholder\nimage/color to be faded out once the image is rendered.\n\nExamples:\n\n  Basically identical to `&lt;img src=\"...\"&gt;` tag:\n\n    &lt;iron-image src=\"http://lorempixel.com/400/400\"&gt;&lt;/iron-image&gt;\n\n  Will letterbox the image to fit:\n\n    &lt;iron-image style=\"width:400px; height:400px;\" sizing=\"contain\"\n      src=\"http://lorempixel.com/600/400\"&gt;&lt;/iron-image&gt;\n\n  Will crop the image to fit:\n\n    &lt;iron-image style=\"width:400px; height:400px;\" sizing=\"cover\"\n      src=\"http://lorempixel.com/600/400\"&gt;&lt;/iron-image&gt;\n\n  Will show light-gray background until the image loads:\n\n    &lt;iron-image style=\"width:400px; height:400px; background-color: lightgray;\"\n      sizing=\"cover\" preload src=\"http://lorempixel.com/600/400\"&gt;&lt;/iron-image&gt;\n\n  Will show a base-64 encoded placeholder image until the image loads:\n\n    &lt;iron-image style=\"width:400px; height:400px;\" placeholder=\"data:image/gif;base64,...\"\n      sizing=\"cover\" preload src=\"http://lorempixel.com/600/400\"&gt;&lt;/iron-image&gt;\n\n  Will fade the light-gray background out once the image is loaded:\n\n    &lt;iron-image style=\"width:400px; height:400px; background-color: lightgray;\"\n      sizing=\"cover\" preload fade src=\"http://lorempixel.com/600/400\"&gt;&lt;/iron-image&gt;\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-image-placeholder` | Mixin applied to #placeholder | `{}`\n`--iron-image-width` | Sets the width of the wrapped image | `auto`\n`--iron-image-height` | Sets the height of the wrapped image | `auto`\n\n",
      "attributes": {
        "alt": {
          "type": "String",
          "description": "\nA short text alternative for the image.\n         "
        },
        "error": {
          "type": "Boolean",
          "description": "\nRead-only value that indicates that the last set `src` failed to load.\n         "
        },
        "fade": {
          "type": "Boolean",
          "description": "\nWhen `preload` is true, setting `fade` to true will cause the image to\nfade into place.\n         "
        },
        "height": {
          "type": "Number",
          "description": "\nCan be used to set the height of image (e.g. via binding); size may also be\nset via CSS.\n\n"
        },
        "loaded": {
          "type": "Boolean",
          "description": "\nRead-only value that is true when the image is loaded.\n         "
        },
        "loading": {
          "type": "Boolean",
          "description": "\nRead-only value that tracks the loading state of the image when the `preload`\noption is used.\n         "
        },
        "placeholder": {
          "type": "String",
          "description": "\nThis image will be used as a background/placeholder until the src image has\nloaded.  Use of a data-URI for placeholder is encouraged for instant rendering.\n         "
        },
        "position": {
          "type": "String",
          "description": "\nWhen a sizing option is used (`cover` or `contain`), this determines\nhow the image is aligned within the element bounds.\n         "
        },
        "preload": {
          "type": "Boolean",
          "description": "\nWhen `true`, any change to the `src` property will cause the `placeholder`\nimage to be shown until the new image has loaded.\n         "
        },
        "preventLoad": {
          "type": "Boolean",
          "description": "\nWhen true, the image is prevented from loading and any placeholder is\nshown.  This may be useful when a binding to the src property is known to\nbe invalid, to prevent 404 requests.\n         "
        },
        "sizing": {
          "type": "String",
          "description": "\nSets a sizing option for the image.  Valid values are `contain` (full\naspect ratio of the image is contained within the element and\nletterboxed) or `cover` (image is cropped in order to fully cover the\nbounds of the element), or `null` (default: image takes natural size).\n         "
        },
        "src": {
          "type": "String",
          "description": "\nThe URL of an image.\n         "
        },
        "width": {
          "type": "Number",
          "description": "\nCan be used to set the width of image (e.g. via binding); size may also be\nset via CSS.\n         "
        },
        "_computeImgDivARIAHidden": {
          "type": "Function",
          "description": ""
        },
        "_computeImgDivARIALabel": {
          "type": "Function",
          "description": ""
        },
        "_computeImgDivHidden": {
          "type": "Function",
          "description": ""
        },
        "_computeImgHidden": {
          "type": "Function",
          "description": ""
        },
        "_computePlaceholderClassName": {
          "type": "Function",
          "description": ""
        },
        "_computePlaceholderHidden": {
          "type": "Function",
          "description": ""
        },
        "_heightChanged": {
          "type": "Function",
          "description": ""
        },
        "_load": {
          "type": "Function",
          "description": ""
        },
        "_placeholderChanged": {
          "type": "Function",
          "description": ""
        },
        "_preventLoadChanged": {
          "type": "Function",
          "description": ""
        },
        "_reset": {
          "type": "Function",
          "description": ""
        },
        "_resolveSrc": {
          "type": "Function",
          "description": ""
        },
        "_srcChanged": {
          "type": "Function",
          "description": ""
        },
        "_transformChanged": {
          "type": "Function",
          "description": ""
        },
        "_widthChanged": {
          "type": "Function",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-input": {
      "name": "iron-input",
      "description": "\n`&lt;iron-input&gt;` adds two-way binding and custom validators using `Polymer.IronValidatorBehavior`\nto `&lt;input&gt;`.\n\n### Two-way binding\n\nBy default you can only get notified of changes to an `input`'s `value` due to user input:\n\n    &lt;input value=\"{{myValue::input}}\"&gt;\n\n`iron-input` adds the `bind-value` property that mirrors the `value` property, and can be used\nfor two-way data binding. `bind-value` will notify if it is changed either by user input or by script.\n\n    &lt;input is=\"iron-input\" bind-value=\"{{myValue}}\"&gt;\n\n### Custom validators\n\nYou can use custom validators that implement `Polymer.IronValidatorBehavior` with `&lt;iron-input&gt;`.\n\n    &lt;input is=\"iron-input\" validator=\"my-custom-validator\"&gt;\n\n### Stopping invalid input\n\nIt may be desirable to only allow users to enter certain characters. You can use the\n`prevent-invalid-input` and `allowed-pattern` attributes together to accomplish this. This feature\nis separate from validation, and `allowed-pattern` does not affect how the input is validated.\n\n    &lt;!-- only allow characters that match [0-9] --&gt;\n    &lt;input is=\"iron-input\" prevent-invalid-input allowed-pattern=\"[0-9]\"&gt;\n\n",
      "attributes": {
        "allowedPattern": {
          "type": "String",
          "description": "\nRegular expression that list the characters allowed as input.\nThis pattern represents the allowed characters for the field; as the user inputs text,\neach individual character will be checked against the pattern (rather than checking\nthe entire value as a whole). The recommended format should be a list of allowed characters;\nfor example, `[a-zA-Z0-9.+-!;:]`\n       "
        },
        "bindValue": {
          "type": "String",
          "description": "\nUse this property instead of `value` for two-way data binding.\n       "
        },
        "hasValidator": {
          "type": "Function",
          "description": "\n"
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nTrue if the last call to `validate` is invalid.\n       "
        },
        "preventInvalidInput": {
          "type": "Boolean",
          "description": "\nSet to true to prevent the user from entering invalid input. If `allowedPattern` is set,\nany character typed by the user will be matched against that pattern, and rejected if it's not a match.\nPasted input will have each character checked individually; if any character\ndoesn't match `allowedPattern`, the entire pasted string will be rejected.\nIf `allowedPattern` is not set, it will use the `type` attribute (only supported for `type=number`).\n       "
        },
        "validate": {
          "type": "Function",
          "description": "\nReturns true if `value` is valid. The validator provided in `validator` will be used first,\nthen any constraints.\n"
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use.\n       "
        },
        "validatorType": {
          "type": "String",
          "description": "\nNamespace for this validator.\n       "
        },
        "_allowedPatternChanged": {
          "type": "Function",
          "description": ""
        },
        "_announceInvalidCharacter": {
          "type": "Function",
          "description": ""
        },
        "_bindValueChanged": {
          "type": "Function",
          "description": "\n"
        },
        "_canDispatchEventOnDisabled": {
          "type": "Function",
          "description": ""
        },
        "_checkPatternValidity": {
          "type": "Function",
          "description": ""
        },
        "_dispatchEventFirefoxIE": {
          "type": "Function",
          "description": ""
        },
        "_getValidity": {
          "type": "Function",
          "description": "\nReturns true if `value` is valid.  By default, it is passed\nto the validator's `validate()` function, if a validator is set. You\nshould override this method if you want to implement custom validity\nlogic for your element.\n\n"
        },
        "_invalidChanged": {
          "type": "Function",
          "description": ""
        },
        "_isPrintable": {
          "type": "Function",
          "description": ""
        },
        "_onInput": {
          "type": "Function",
          "description": ""
        },
        "_onKeypress": {
          "type": "Function",
          "description": ""
        },
        "_patternAlreadyChecked": {
          "type": "Boolean",
          "description": ""
        },
        "_patternRegExp": {
          "type": "",
          "description": ""
        },
        "_previousValidInput": {
          "type": "String",
          "description": ""
        },
        "_validator": {
          "type": "",
          "description": ""
        },
        "_validatorMeta": {
          "type": "Object",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "extends": {
          "type": "string",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-jsonp-library": {
      "name": "iron-jsonp-library",
      "description": "\nLoads specified jsonp library.\n\nExample:\n\n    &lt;iron-jsonp-library\n      library-url=\"https://apis.google.com/js/plusone.js?onload=%%callback%%\"\n      notify-event=\"api-load\"\n      library-loaded=\"{{loaded}}\"&gt;&lt;/iron-jsonp-library&gt;\n\nWill emit 'api-load' event when loaded, and set 'loaded' to true\n\nImplemented by  Polymer.IronJsonpLibraryBehavior. Use it\nto create specific library loader elements.\n\n",
      "attributes": {
        "callbackName": {
          "type": "string",
          "description": "\nSet if library requires specific callback name.\nName will be automatically generated if not set.\n       "
        },
        "libraryErrorMessage": {
          "type": "String",
          "description": "\nNot null if library has failed to load\n       "
        },
        "libraryLoaded": {
          "type": "Boolean",
          "description": "\nTrue if library has been successfully loaded\n       "
        },
        "libraryUrl": {
          "type": "string",
          "description": "\nLibrary url. Must contain string `%%callback%%`.\n\n`%%callback%%` is a placeholder for jsonp wrapper function name\n\nEx: https://maps.googleapis.com/maps/api/js?callback=%%callback%%\n       "
        },
        "notifyEvent": {
          "type": "string",
          "description": "\nevent with name specified in 'notifyEvent' attribute\nwill fire upon successful load\n       "
        },
        "_libraryLoadCallback": {
          "type": "Function",
          "description": ""
        },
        "_libraryUrlChanged": {
          "type": "Function",
          "description": ""
        },
        "_loadLibrary": {
          "type": "Function",
          "description": "loads the library, and fires this.notifyEvent upon completion "
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-label": {
      "name": "iron-label",
      "description": "\n`&lt;iron-label&gt;` provides a version of the `&lt;label&gt;` element that works with Custom Elements as well as native elements.\n\nAll text in the `iron-label` will be applied to the target element as a screen-reader accessible description.\n\nThere are three ways to use `iron-label` to target an element:\n\n1. place an element inside iron-label and some text:\n\n        &lt;iron-label&gt;\n          Label for the Button\n          &lt;paper-button&gt;button&lt;/paper-button&gt;\n        &lt;/iron-label&gt;\n\n2. place some elements inside iron-label and target one with the `iron-label-target` attribute.\nThe other elements will provide the label for that element\nNote: This is not necessary if the element you want to label is the first\nelement child of iron-label:\n\n        &lt;iron-label&gt;\n          &lt;span&gt;Label for the Button&lt;/span&gt;\n          &lt;paper-button iron-label-target&gt;button&lt;/paper-button&gt;\n        &lt;/iron-label&gt;\n\n        &lt;iron-label&gt;\n          &lt;paper-button&gt;button&lt;/paper-button&gt;\n          &lt;span&gt;Label for the Button&lt;/span&gt;\n        &lt;/iron-label&gt;\n\n3. Set the `for` attribute on the `iron-label` element with the id of the target\nelement in the same document or ShadowRoot:\n\n        &lt;iron-label for=\"foo\"&gt;\n          Context for the button with the \"foo\" class\"\n        &lt;/iron-label&gt;\n        &lt;paper-button id=\"foo\"&gt;Far away button&lt;/paper-button&gt;\n\nAll taps on the `iron-label` will be forwarded to the \"target\" element.\n\n",
      "attributes": {
        "for": {
          "type": "String",
          "description": "\nAn ID reference to another element that needs to be\nlabelled by this `iron-label` element.\n          "
        },
        "_applyLabelledBy": {
          "type": "Function",
          "description": ""
        },
        "_findTarget": {
          "type": "Function",
          "description": ""
        },
        "_forChanged": {
          "type": "Function",
          "description": ""
        },
        "_forElement": {
          "type": "Element",
          "description": "\n"
        },
        "_generateLabelId": {
          "type": "Function",
          "description": " generate a unique id for this element"
        },
        "_tapHandler": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-list": {
      "name": "iron-list",
      "description": "\n\n`iron-list` displays a virtual, 'infinite' list. The template inside\nthe iron-list element represents the DOM to create for each list item.\nThe `items` property specifies an array of list item data.\n\nFor performance reasons, not every item in the list is rendered at once;\ninstead a small subset of actual template elements *(enough to fill the viewport)*\nare rendered and reused as the user scrolls. As such, it is important that all\nstate of the list template be bound to the model driving it, since the view may\nbe reused with a new model at any time. Particularly, any state that may change\nas the result of a user interaction with the list item must be bound to the model\nto avoid view state inconsistency.\n\n__Important:__ `iron-list` must either be explicitly sized, or delegate scrolling to an\nexplicitly sized parent. By \"explicitly sized\", we mean it either has an explicit\nCSS `height` property set via a class or inline style, or else is sized by other\nlayout means (e.g. the `flex` or `fit` classes).\n\n### Template model\n\nList item templates should bind to template models of the following structure:\n\n```js\n{\n  index: 0,        // index in the item array\n  selected: false, // true if the current item is selected\n  tabIndex: -1,    // a dynamically generated tabIndex for focus management\n  item: {}         // user data corresponding to items[index]\n}\n```\n\nAlternatively, you can change the property name used as data index by changing the\n`indexAs` property. The `as` property defines the name of the variable to add to the binding\nscope for the array.\n\nFor example, given the following `data` array:\n\n##### data.json\n\n```js\n[\n  {\"name\": \"Bob\"},\n  {\"name\": \"Tim\"},\n  {\"name\": \"Mike\"}\n]\n```\n\nThe following code would render the list (note the name and checked properties are\nbound from the model object provided to the template scope):\n\n```html\n&lt;template is=\"dom-bind\"&gt;\n  &lt;iron-ajax url=\"data.json\" last-response=\"{{data}}\" auto&gt;&lt;/iron-ajax&gt;\n  &lt;iron-list items=\"[[data]]\" as=\"item\"&gt;\n    &lt;template&gt;\n      &lt;div&gt;\n        Name: [[item.name]]\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/iron-list&gt;\n&lt;/template&gt;\n```\n\n### Accessibility\n\n`iron-list` automatically manages the focus state for the items. It also provides\na `tabIndex` property within the template scope that can be used for keyboard navigation.\nFor example, users can press the up and down keys to move to previous and next\nitems in the list:\n\n```html\n&lt;iron-list items=\"[[data]]\" as=\"item\"&gt;\n  &lt;template&gt;\n    &lt;div tabindex$=\"[[tabIndex]]\"&gt;\n      Name: [[item.name]]\n    &lt;/div&gt;\n  &lt;/template&gt;\n&lt;/iron-list&gt;\n```\n\n### Styling\n\nYou can use the `--iron-list-items-container` mixin to style the container of items:\n\n```css\niron-list {\n --iron-list-items-container: {\n    margin: auto;\n  };\n}\n```\n\n### Resizing\n\n`iron-list` lays out the items when it receives a notification via the `iron-resize` event.\nThis event is fired by any element that implements `IronResizableBehavior`.\n\nBy default, elements such as `iron-pages`, `paper-tabs` or `paper-dialog` will trigger\nthis event automatically. If you hide the list manually (e.g. you use `display: none`)\nyou might want to implement `IronResizableBehavior` or fire this event manually right\nafter the list became visible again. For example:\n\n```js\ndocument.querySelector('iron-list').fire('iron-resize');\n```\n\n### When should `&lt;iron-list&gt;` be used?\n\n`iron-list` should be used when a page has significantly more DOM nodes than the ones\nvisible on the screen. e.g. the page has 500 nodes, but only 20 are visible at the time.\nThis is why we refer to it as a `virtual` list. In this case, a `dom-repeat` will still\ncreate 500 nodes which could slow down the web app, but `iron-list` will only create 20.\n\nHowever, having an `iron-list` does not mean that you can load all the data at once.\nSay, you have a million records in the database, you want to split the data into pages\nso you can bring a page at the time. The page could contain 500 items, and iron-list\nwill only render 20.\n\n",
      "attributes": {
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "as": {
          "type": "String",
          "description": "\nThe name of the variable to add to the binding scope for the array\nelement associated with a given template instance.\n       "
        },
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "clearSelection": {
          "type": "Function",
          "description": "\nClears the current selection state of the list.\n\n"
        },
        "deselectItem": {
          "type": "Function",
          "description": "\nDeselects the given item list if it is already selected.\n\n\n"
        },
        "firstVisibleIndex": {
          "type": "number",
          "description": "\nGets the index of the first visible item in the viewport.\n\n"
        },
        "indexAs": {
          "type": "String",
          "description": "\nThe name of the variable to add to the binding scope with the index\nfor the row.\n       "
        },
        "items": {
          "type": "Array",
          "description": "\nAn array containing items determining how many instances of the template\nto stamp and that that each template instance should bind to.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "lastVisibleIndex": {
          "type": "number",
          "description": "\nGets the index of the last visible item in the viewport.\n\n"
        },
        "modelForElement": {
          "type": "Function",
          "description": ""
        },
        "multiSelection": {
          "type": "Boolean",
          "description": "\nWhen `true`, multiple items may be selected at once (in this case,\n`selected` is an array of currently selected items).  When `false`,\nonly one item may be selected at a time.\n       "
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "scroll": {
          "type": "Function",
          "description": "\nScrolls the content to a particular place.\n\n"
        },
        "scrollTarget": {
          "type": "HTMLElement",
          "description": "\nSpecifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an element,\nbut there are a few more posibilities:\n\n### Elements id\n\n```html\n&lt;div id=\"scrollable-element\" style=\"overflow: auto;\"&gt;\n &lt;x-element scroll-target=\"scrollable-element\"&gt;\n   &lt;!-- Content--&gt;\n &lt;/x-element&gt;\n&lt;/div&gt;\n```\nIn this case, the `scrollTarget` will point to the outer div element. \n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n&lt;x-element scroll-target=\"document\"&gt;\n  &lt;!-- Content --&gt;\n&lt;/x-element&gt;\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```\n\n"
        },
        "scrollToIndex": {
          "type": "Function",
          "description": "\nScroll to a specific item in the virtual list regardless\nof the physical items in the DOM tree.\n\n"
        },
        "selectedAs": {
          "type": "String",
          "description": "\nThe name of the variable to add to the binding scope to indicate\nif the row is selected.\n       "
        },
        "selectedItem": {
          "type": "Object",
          "description": "\nWhen `multiSelection` is false, this is the currently selected item, or `null`\nif no item is selected.\n       "
        },
        "selectedItems": {
          "type": "Object",
          "description": "\nWhen `multiSelection` is true, this is an array that contains the selected items.\n       "
        },
        "selectionEnabled": {
          "type": "Boolean",
          "description": "\nWhen true, tapping a row will select the item, placing its data model\nin the set of selected items retrievable via the selection property.\n\nNote that tapping focusable elements within the list item will not\nresult in selection, since they are presumed to have their * own action.\n       "
        },
        "selectItem": {
          "type": "Function",
          "description": "\nSelect the list item at the given index.\n\n"
        },
        "stamp": {
          "type": "Function",
          "description": ""
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "templatize": {
          "type": "Function",
          "description": ""
        },
        "toggleSelectionForItem": {
          "type": "Function",
          "description": "\nSelect or deselect a given item depending on whether the item\nhas already been selected.\n\n"
        },
        "updateSizeForItem": {
          "type": "Function",
          "description": "\nUpdates the size of an item.\n\n"
        },
        "updateViewportBoundaries": {
          "type": "Function",
          "description": "\nInvoke this method if you dynamically update the viewport's\nsize or CSS padding.\n\n"
        },
        "__hideTemplateChildren__": {
          "type": "Object",
          "description": ""
        },
        "__setPropertyImpl": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_adjustScrollPosition": {
          "type": "Function",
          "description": "\nAdjusts the scroll position when it was overestimated.\n     "
        },
        "_adjustVirtualIndex": {
          "type": "Function",
          "description": "\n"
        },
        "_assignModels": {
          "type": "Function",
          "description": "\nAssigns the data models to a given set of items.\n"
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_collection": {
          "type": "?Polymer.Collection",
          "description": "\nA Polymer collection for the items.\n"
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_constructorImpl": {
          "type": "Function",
          "description": ""
        },
        "_createFocusBackfillItem": {
          "type": "Function",
          "description": ""
        },
        "_createForwardPropEffector": {
          "type": "Function",
          "description": ""
        },
        "_createHostPropEffector": {
          "type": "Function",
          "description": ""
        },
        "_createInstancePropEffector": {
          "type": "Function",
          "description": ""
        },
        "_createPool": {
          "type": "Function",
          "description": "\nCreates a pool of DOM elements and attaches them to the local dom.\n     "
        },
        "_customPrepAnnotations": {
          "type": "Function",
          "description": ""
        },
        "_customPrepEffects": {
          "type": "Function",
          "description": ""
        },
        "_debounceTemplate": {
          "type": "Function",
          "description": ""
        },
        "_defaultScrollTarget": {
          "type": "",
          "description": ""
        },
        "_didEnter": {
          "type": "Function",
          "description": ""
        },
        "_didFocus": {
          "type": "Function",
          "description": ""
        },
        "_didMoveDown": {
          "type": "Function",
          "description": ""
        },
        "_didMoveUp": {
          "type": "Function",
          "description": ""
        },
        "_doc": {
          "type": "Element",
          "description": "\nShortcut for the document element\n\n"
        },
        "_ensureTemplatized": {
          "type": "Function",
          "description": "\nTempletizes the user template.\n     "
        },
        "_estScrollHeight": {
          "type": "number",
          "description": "\nThe estimated scroll height based on `_physicalAverage`\n     "
        },
        "_extendTemplate": {
          "type": "Function",
          "description": ""
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_firstVisibleIndexVal": {
          "type": "?number",
          "description": "\nA cached value for the first visible index.\nSee `firstVisibleIndex`\n"
        },
        "_flushTemplates": {
          "type": "Function",
          "description": ""
        },
        "_focusBackfillItem": {
          "type": "object",
          "description": "\nThe item that backfills the `_offscreenFocusedItem` in the physical items\nlist when that item is moved offscreen.\n     "
        },
        "_focusedIndex": {
          "type": "Unary",
          "description": "\nThe index of the `_focusedItem`.\n     "
        },
        "_focusedItem": {
          "type": "object",
          "description": "\nThe currently focused physical item.\n     "
        },
        "_focusPhysicalItem": {
          "type": "Function",
          "description": ""
        },
        "_forwardInstancePath": {
          "type": "Function",
          "description": "\nImplements extension point from Templatizer\nCalled as a side effect of a template instance path change, responsible\nfor notifying items.&lt;key-for-instance&gt;.&lt;path&gt; change up to host.\n     "
        },
        "_forwardInstanceProp": {
          "type": "Function",
          "description": ""
        },
        "_forwardItemPath": {
          "type": "Function",
          "description": "\nCalled as a side effect of a host items.&lt;key&gt;.&lt;path&gt; path change,\nresponsible for notifying item.&lt;path&gt; changes.\n     "
        },
        "_forwardParentPath": {
          "type": "Function",
          "description": "\nImplements extension point from Templatizer\nCalled as side-effect of a host path change, responsible for\nnotifying parent.&lt;path&gt; path change on each row.\n     "
        },
        "_forwardParentProp": {
          "type": "Function",
          "description": "\nImplements extension point from Templatizer mixin\nCalled as side-effect of a host property change, responsible for\nnotifying parent path change on each row.\n     "
        },
        "_getModelFromItem": {
          "type": "Function",
          "description": ""
        },
        "_getNormalizedItem": {
          "type": "Function",
          "description": "\nGets a valid item instance from its index or the object value.\n\n"
        },
        "_getPhysicalIndex": {
          "type": "Function",
          "description": ""
        },
        "_getRootDataHost": {
          "type": "Function",
          "description": ""
        },
        "_getStampedChildren": {
          "type": "Function",
          "description": "\nImplements extension point from Templatizer mixin.\n     "
        },
        "_hiddenContentSize": {
          "type": "",
          "description": "\nThe height of the physical content that isn't on the screen.\n     "
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_increasePool": {
          "type": "Function",
          "description": "\nIncreases the pool size.\n     "
        },
        "_increasePoolIfNeeded": {
          "type": "Function",
          "description": "\nIncreases the pool of physical items only if needed.\n\n"
        },
        "_instanceProps": {
          "type": "Member",
          "description": ""
        },
        "_isIndexRendered": {
          "type": "Function",
          "description": ""
        },
        "_isIndexVisible": {
          "type": "Function",
          "description": ""
        },
        "_isValidScrollTarget": {
          "type": "Function",
          "description": "\nReturns true if the scroll target is a valid HTMLElement.\n\n"
        },
        "_isVisible": {
          "type": "",
          "description": "\nTrue if the current list is visible.\n    "
        },
        "_itemsChanged": {
          "type": "Function",
          "description": "\nCalled when the items have changed. That is, ressignments\nto `items`, splices or updates to a single item.\n     "
        },
        "_itemsRendered": {
          "type": "boolean",
          "description": "\nTrue if the current item list was rendered for the first time\nafter attached.\n     "
        },
        "_iterateItems": {
          "type": "Function",
          "description": "\nExecutes a provided function per every physical index in `itemSet`\n`itemSet` default value is equivalent to the entire set of physical indexes.\n\n"
        },
        "_lastPage": {
          "type": "object",
          "description": "\nThe page that is currently rendered.\n     "
        },
        "_lastVisibleIndexVal": {
          "type": "?number",
          "description": "\nA cached value for the last visible index.\nSee `lastVisibleIndex`\n"
        },
        "_listenImpl": {
          "type": "Function",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_manageFocus": {
          "type": "Function",
          "description": "\nCreates a temporary backfill item in the rendered pool of physical items\nto replace the main focused item. The focused item has tabIndex = 0\nand might be currently focused by the user.\n\nThis dynamic replacement helps to preserve the focus state.\n     "
        },
        "_maxPages": {
          "type": "number",
          "description": "\nThe max number of pages to render. One page is equivalent to the height of the list.\n     "
        },
        "_maxScrollTop": {
          "type": "",
          "description": "\nThe maximum scroll top value.\n     "
        },
        "_maxVirtualStart": {
          "type": "",
          "description": "\nThe largest n-th value for an item such that it can be rendered in `_physicalStart`.\n     "
        },
        "_minVirtualStart": {
          "type": "number",
          "description": "\nThe lowest n-th value for an item such that it can be rendered in `_physicalStart`.\n     "
        },
        "_multiSelectionChanged": {
          "type": "Function",
          "description": ""
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_notifyPathUpImpl": {
          "type": "Function",
          "description": ""
        },
        "_offscreenFocusedItem": {
          "type": "object",
          "description": "\nThe the item that is focused if it is moved offscreen.\n"
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_optPhysicalSize": {
          "type": "",
          "description": "\nAn optimal physical size such that we will have enough physical items\nto fill up the viewport and recycle when the user scrolls.\n\nThis default value assumes that we will at least have the equivalent\nto a viewport of physical items above and below the user's viewport.\n     "
        },
        "_parentPropPrefix": {
          "type": "string",
          "description": ""
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "_pathEffectorImpl": {
          "type": "Function",
          "description": ""
        },
        "_physicalAverage": {
          "type": "number",
          "description": "\nThe average `F` of the tiles observed till now.\n     "
        },
        "_physicalAverageCount": {
          "type": "number",
          "description": "\nThe number of tiles which `offsetHeight` &gt; 0 observed until now.\n     "
        },
        "_physicalBottom": {
          "type": "",
          "description": "\nThe bottom of the physical content.\n     "
        },
        "_physicalCount": {
          "type": "",
          "description": ""
        },
        "_physicalCountVal": {
          "type": "number",
          "description": "\nThe number of tiles in the DOM.\n     "
        },
        "_physicalEnd": {
          "type": "number",
          "description": "\nThe k-th tile that is at the bottom of the scrolling list.\n     "
        },
        "_physicalIndexForKey": {
          "type": "object",
          "description": "\nA map between an item key and its physical item index\n     "
        },
        "_physicalItems": {
          "type": "?Array.<!TemplatizerNode>",
          "description": "\nAn array of DOM nodes that are currently in the tree\n"
        },
        "_physicalSize": {
          "type": "number",
          "description": "\nThe sum of the heights of all the tiles in the DOM.\n     "
        },
        "_physicalSizes": {
          "type": "?Array.<number>",
          "description": "\nAn array of heights for each item in `_physicalItems`\n"
        },
        "_physicalStart": {
          "type": "",
          "description": ""
        },
        "_physicalStartVal": {
          "type": "number",
          "description": "\nThe k-th tile that is at the top of the scrolling list.\n     "
        },
        "_physicalTop": {
          "type": "number",
          "description": "\nThe Y position of the item rendered in the `_physicalStart`\ntile relative to the scrolling list.\n     "
        },
        "_positionItems": {
          "type": "Function",
          "description": "\nUpdates the position of the physical items.\n     "
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_prepParentProperties": {
          "type": "Function",
          "description": ""
        },
        "_ratio": {
          "type": "number",
          "description": "\nThe ratio of hidden tiles that should remain in the scroll direction.\nRecommended value ~0.5, so it will distribute tiles evely in both directions.\n     "
        },
        "_removeFocusedItem": {
          "type": "Function",
          "description": ""
        },
        "_removeItem": {
          "type": "Function",
          "description": ""
        },
        "_render": {
          "type": "Function",
          "description": "\nRender a new list of items. This method does exactly the same as `update`,\nbut it also ensures that only one `update` cycle is created.\n     "
        },
        "_resetAverage": {
          "type": "Function",
          "description": "\nReset the physical average and the average count.\n     "
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_resetScrollPosition": {
          "type": "Function",
          "description": "\nSets the position of the scroll.\n     "
        },
        "_resizeHandler": {
          "type": "Function",
          "description": "\nA handler for the `iron-resize` event triggered by `IronResizableBehavior`\nwhen the element is resized.\n     "
        },
        "_restoreFocusedItem": {
          "type": "Function",
          "description": ""
        },
        "_scopeElementClassImpl": {
          "type": "Function",
          "description": ""
        },
        "_scrollBottom": {
          "type": "",
          "description": "\nThe bottom of the scroll.\n     "
        },
        "_scrollerPaddingTop": {
          "type": "number",
          "description": "\nThe padding-top value for the list.\n     "
        },
        "_scrollHandler": {
          "type": "Function",
          "description": "\nUpdate the models, the position of the\nitems in the viewport and recycle tiles as needed.\n     "
        },
        "_scrollHeight": {
          "type": "number",
          "description": "\nThe scroll height of the dom node\n     "
        },
        "_scrollLeft": {
          "type": "number",
          "description": "\nGets the number of pixels that the content of an element is scrolled to the left.\n\n"
        },
        "_scrollPosition": {
          "type": "number",
          "description": "\nThis value is the same as `scrollTop`.\n     "
        },
        "_scrollTargetChanged": {
          "type": "Function",
          "description": ""
        },
        "_scrollTargetHeight": {
          "type": "number",
          "description": "\nGets the height of the scroll target.\n\n"
        },
        "_scrollTargetWidth": {
          "type": "number",
          "description": "\nGets the width of the scroll target.\n\n"
        },
        "_scrollTop": {
          "type": "number",
          "description": "\nGets the number of pixels that the content of an element is scrolled upward.\n\n"
        },
        "_selectionEnabledChanged": {
          "type": "Function",
          "description": "\nAdd an event listener to `tap` if `selectionEnabled` is true,\nit will remove the listener otherwise.\n     "
        },
        "_selectionHandler": {
          "type": "Function",
          "description": "\nSelect an item from an event object.\n     "
        },
        "_setOverflow": {
          "type": "Function",
          "description": "\nSet the overflow property if this element has its own scrolling region\n     "
        },
        "_showHideChildren": {
          "type": "Function",
          "description": ""
        },
        "_showHideChildrenImpl": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_update": {
          "type": "Function",
          "description": "\nUpdate the list of items, starting from the `_virtualStart` item.\n"
        },
        "_updateMetrics": {
          "type": "Function",
          "description": "\nUpdates the height for a given set of items.\n\n"
        },
        "_updateScrollerSize": {
          "type": "Function",
          "description": "\nSets the scroll height, that's the height of the content,\n\n"
        },
        "_viewportSize": {
          "type": "number",
          "description": "\nThe height of the list. This is referred as the viewport in the context of list.\n     "
        },
        "_virtualCount": {
          "type": "number",
          "description": "\nThe number of items in the list.\n     "
        },
        "_virtualEnd": {
          "type": "",
          "description": "\nThe n-th item rendered in the last physical item.\n     "
        },
        "_virtualStart": {
          "type": "",
          "description": ""
        },
        "_virtualStartVal": {
          "type": "number",
          "description": "\nThe n-th item rendered in the `_physicalStart` tile.\n     "
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-localstorage": {
      "name": "iron-localstorage",
      "description": "\nElement access to Web Storage API (window.localStorage).\n\nKeeps `value` property in sync with localStorage.\n\nValue is saved as json by default.\n\n### Usage:\n\n`ls-sample` will automatically save changes to its value.\n\n    &lt;dom-module id=\"ls-sample\"&gt;\n      &lt;iron-localstorage name=\"my-app-storage\"\n        value=\"{{cartoon}}\"\n        on-iron-localstorage-load-empty=\"initializeDefaultCartoon\"\n      &gt;&lt;/iron-localstorage&gt;\n    &lt;/dom-module&gt;\n\n    &lt;script&gt;\n      Polymer({\n        is: 'ls-sample',\n        properties: {\n          cartoon: {\n            type: Object\n          }\n        },\n        // initializes default if nothing has been stored\n        initializeDefaultCartoon: function() {\n          this.cartoon = {\n            name: \"Mickey\",\n            hasEars: true\n          }\n        },\n        // use path set api to propagate changes to localstorage\n        makeModifications: function() {\n          this.set('cartoon.name', \"Minions\");\n          this.set('cartoon.hasEars', false);\n        }\n      });\n    &lt;/script&gt;\n\n### Tech notes:\n\n* `value.*` is observed, and saved on modifications. You must use\n    path change notifification methods such as `set()` to modify value\n    for changes to be observed.\n\n* Set `auto-save-disabled` to prevent automatic saving.\n\n* Value is saved as JSON by default.\n\n* To delete a key, set value to null\n\nElement listens to StorageAPI `storage` event, and will reload upon receiving it.\n\n**Warning**: do not bind value to sub-properties until Polymer\n[bug 1550](https://github.com/Polymer/polymer/issues/1550)\nis resolved. Local storage will be blown away.\n`&lt;iron-localstorage value=\"{{foo.bar}}\"` will cause **data loss**.\n\n",
      "attributes": {
        "autoSaveDisabled": {
          "type": "Boolean",
          "description": "\nValue will not be saved automatically if true. You'll have to do it manually with `save()`\n       "
        },
        "errorMessage": {
          "type": "String",
          "description": "\nLast error encountered while saving/loading items\n       "
        },
        "name": {
          "type": "String",
          "description": "\nlocalStorage item key\n       "
        },
        "reload": {
          "type": "Function",
          "description": "\nLoads the value again. Use if you modify\nlocalStorage using DOM calls, and want to\nkeep this element in sync.\n     "
        },
        "save": {
          "type": "Function",
          "description": "\nSaves the value to localStorage. Call to save if autoSaveDisabled is set.\nIf `value` is null or undefined, deletes localStorage.\n     "
        },
        "useRaw": {
          "type": "Boolean",
          "description": "\nIf true: do not convert value to JSON on save/load\n       "
        },
        "value": {
          "type": "*",
          "description": "\nThe data associated with this storage.\nIf set to null item will be deleted.\n"
        },
        "_debounceReload": {
          "type": "Function",
          "description": ""
        },
        "_handleStorage": {
          "type": "Function",
          "description": ""
        },
        "_load": {
          "type": "Function",
          "description": "\nloads value from local storage\n"
        },
        "_loaded": {
          "type": "Boolean",
          "description": "True if value has been loaded "
        },
        "_trySaveValue": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-media-query": {
      "name": "iron-media-query",
      "description": "\n`iron-media-query` can be used to data bind to a CSS media query.\nThe `query` property is a bare CSS media query.\nThe `query-matches` property is a boolean representing whether the page matches that media query.\n\nExample:\n\n    &lt;iron-media-query query=\"(min-width: 600px)\" query-matches=\"{{queryMatches}}\"&gt;&lt;/iron-media-query&gt;\n\n",
      "attributes": {
        "full": {
          "type": "Boolean",
          "description": "\nIf true, the query attribute is assumed to be a complete media query\nstring rather than a single media feature.\n       "
        },
        "query": {
          "type": "String",
          "description": "\nThe CSS media query to evaluate.\n       "
        },
        "queryChanged": {
          "type": "Function",
          "description": ""
        },
        "queryHandler": {
          "type": "Function",
          "description": ""
        },
        "queryMatches": {
          "type": "Boolean",
          "description": "\nThe Boolean return value of the media query.\n       "
        },
        "_add": {
          "type": "Function",
          "description": ""
        },
        "_boundMQHandler": {
          "type": "function (MediaQueryList)",
          "description": "\n"
        },
        "_mq": {
          "type": "MediaQueryList",
          "description": "\n"
        },
        "_remove": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-meta": {
      "name": "iron-meta",
      "description": "\n`iron-meta` is a generic element you can use for sharing information across the DOM tree.\nIt uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such that any\ninstance of iron-meta has access to the shared\ninformation. You can use `iron-meta` to share whatever you want (or create an extension\n[like x-meta] for enhancements).\n\nThe `iron-meta` instances containing your actual data can be loaded in an import,\nor constructed in any way you see fit. The only requirement is that you create them\nbefore you try to access them.\n\nExamples:\n\nIf I create an instance like this:\n\n    &lt;iron-meta key=\"info\" value=\"foo/bar\"&gt;&lt;/iron-meta&gt;\n\nNote that value=\"foo/bar\" is the metadata I've defined. I could define more\nattributes or use child nodes to define additional metadata.\n\nNow I can access that element (and it's metadata) from any iron-meta instance\nvia the byKey method, e.g.\n\n    meta.byKey('info').getAttribute('value');\n\nPure imperative form would be like:\n\n    document.createElement('iron-meta').byKey('info').getAttribute('value');\n\nOr, in a Polymer element, you can include a meta in your template:\n\n    &lt;iron-meta id=\"meta\"&gt;&lt;/iron-meta&gt;\n    ...\n    this.$.meta.byKey('info').getAttribute('value');\n\n",
      "attributes": {
        "byKey": {
          "type": "Function",
          "description": "\nRetrieves meta data value by key.\n\n"
        },
        "factoryImpl": {
          "type": "Function",
          "description": "\nOnly runs if someone invokes the factory/constructor directly\ne.g. `new Polymer.IronMeta()`\n\n"
        },
        "key": {
          "type": "String",
          "description": "\nThe key used to store `value` under the `type` namespace.\n         "
        },
        "list": {
          "type": "Array",
          "description": "\nArray of all meta-data values for the given type.\n         "
        },
        "self": {
          "type": "Boolean",
          "description": "\nIf true, `value` is set to the iron-meta instance itself.\n         "
        },
        "type": {
          "type": "String",
          "description": "\nThe type of meta-data.  All meta-data of the same type is stored\ntogether.\n         "
        },
        "value": {
          "type": "Object",
          "description": "\nThe meta-data to store or retrieve.\n         "
        },
        "_keyChanged": {
          "type": "Function",
          "description": ""
        },
        "_register": {
          "type": "Function",
          "description": ""
        },
        "_registerKeyValue": {
          "type": "Function",
          "description": ""
        },
        "_resetRegistration": {
          "type": "Function",
          "description": ""
        },
        "_selfChanged": {
          "type": "Function",
          "description": ""
        },
        "_typeChanged": {
          "type": "Function",
          "description": ""
        },
        "_unregister": {
          "type": "Function",
          "description": ""
        },
        "_unregisterKey": {
          "type": "Function",
          "description": ""
        },
        "_valueChanged": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "iron-meta-query": {
      "name": "iron-meta-query",
      "description": "\n`iron-meta` is a generic element you can use for sharing information across the DOM tree.\nIt uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such that any\ninstance of iron-meta has access to the shared\ninformation. You can use `iron-meta` to share whatever you want (or create an extension\n[like x-meta] for enhancements).\n\nThe `iron-meta` instances containing your actual data can be loaded in an import,\nor constructed in any way you see fit. The only requirement is that you create them\nbefore you try to access them.\n\nExamples:\n\nIf I create an instance like this:\n\n    &lt;iron-meta key=\"info\" value=\"foo/bar\"&gt;&lt;/iron-meta&gt;\n\nNote that value=\"foo/bar\" is the metadata I've defined. I could define more\nattributes or use child nodes to define additional metadata.\n\nNow I can access that element (and it's metadata) from any iron-meta instance\nvia the byKey method, e.g.\n\n    meta.byKey('info').getAttribute('value');\n\nPure imperative form would be like:\n\n    document.createElement('iron-meta').byKey('info').getAttribute('value');\n\nOr, in a Polymer element, you can include a meta in your template:\n\n    &lt;iron-meta id=\"meta\"&gt;&lt;/iron-meta&gt;\n    ...\n    this.$.meta.byKey('info').getAttribute('value');\n\n",
      "attributes": {
        "byKey": {
          "type": "Function",
          "description": "\nRetrieves meta data value by key.\n"
        },
        "factoryImpl": {
          "type": "Function",
          "description": "\nActually a factory method, not a true constructor. Only runs if\nsomeone invokes it directly (via `new Polymer.IronMeta()`);\n\n"
        },
        "key": {
          "type": "String",
          "description": "\nSpecifies a key to use for retrieving `value` from the `type`\nnamespace.\n         "
        },
        "list": {
          "type": "Array",
          "description": "\nArray of all meta-data values for the given type.\n         "
        },
        "type": {
          "type": "String",
          "description": "\nThe type of meta-data.  All meta-data of the same type is stored\ntogether.\n         "
        },
        "value": {
          "type": "Object",
          "description": "\nThe meta-data to store or retrieve.\n         "
        },
        "_keyChanged": {
          "type": "Function",
          "description": ""
        },
        "_typeChanged": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-overlay-backdrop": {
      "name": "iron-overlay-backdrop",
      "description": "\n`iron-overlay-backdrop` is a backdrop used by `Polymer.IronOverlayBehavior`. It should be a\nsingleton.\n\n### Styling\n\nThe following custom properties and mixins are available for styling.\n\nCustom property | Description | Default\n-------------------------------------------|------------------------|---------\n`--iron-overlay-backdrop-background-color` | Backdrop background color                                     | #000\n`--iron-overlay-backdrop-opacity`          | Backdrop opacity                                              | 0.6\n`--iron-overlay-backdrop`                  | Mixin applied to `iron-overlay-backdrop`.                      | {}\n`--iron-overlay-backdrop-opened`           | Mixin applied to `iron-overlay-backdrop` when it is displayed | {}\n",
      "attributes": {
        "close": {
          "type": "Function",
          "description": "\nHides the backdrop if needed.\n     "
        },
        "complete": {
          "type": "Function",
          "description": "\nRemoves the backdrop from document body if needed.\n     "
        },
        "open": {
          "type": "Function",
          "description": "\nShows the backdrop if needed.\n     "
        },
        "opened": {
          "type": "Boolean",
          "description": "\nReturns true if the backdrop is opened.\n       "
        },
        "prepare": {
          "type": "Function",
          "description": "\nAppends the backdrop to document body and sets its `z-index` to be below the latest overlay.\n     "
        },
        "_manager": {
          "type": "Object",
          "description": ""
        },
        "_onTransitionend": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "iron-page-url": {
      "name": "iron-page-url",
      "description": "\n\nThe `iron-page-url` element manages binding to and from the current URL.\n\niron-page-url is the first, and lowest level element in the Polymer team's\nrouting system. This is a beta release of iron-page-url as we continue work\non higher level elements, and as such iron-page-url may undergo breaking\nchanges.\n\n#### Properties\n\nWhen the URL is: `/search?query=583#details` iron-page-url's properties will be:\n\n  - path: `'/search'`\n  - query: `'query=583'`\n  - hash: `'details'`\n\nThese bindings are bidirectional. Modifying them will in turn modify the URL.\n\niron-page-url is only active while it is attached to the document.\n\n#### Links\n\nWhile iron-page-url is active in the document it will intercept clicks on links\nwithin your site, updating the URL pushing the updated URL out through the\ndatabinding system. iron-page-url only intercepts clicks with the intent to\nopen in the same window, so middle mouse clicks and ctrl/cmd clicks work fine.\n\nYou can customize this behavior with the `urlSpaceRegex`.\n\n#### Dwell Time\n\niron-page-url protects against accidental history spamming by only adding\nentries to the user's history if the URL stays unchanged for `dwellTime`\nmilliseconds.\n\n",
      "attributes": {
        "dwellTime": {
          "type": "Number",
          "description": "\nIf the user was on a URL for less than `dwellTime` milliseconds, it\nwon't be added to the browser's history, but instead will be replaced\nby the next entry.\n\nThis is to prevent large numbers of entries from clogging up the user's\nbrowser history. Disable by setting to a negative number.\n       "
        },
        "hash": {
          "type": "String",
          "description": "\nThe hash component of the URL.\n       "
        },
        "path": {
          "type": "String",
          "description": "\nThe pathname component of the URL.\n       "
        },
        "query": {
          "type": "String",
          "description": "\nThe query string portion of the URL.\n       "
        },
        "urlSpaceRegex": {
          "type": "(string|RegExp)",
          "description": "\nA regexp that defines the set of URLs that should be considered part\nof this web app.\n\nClicking on a link that matches this regex won't result in a full page\nnavigation, but will instead just update the URL state in place.\n\nThis regexp is given everything after the origin in an absolute\nURL. So to match just URLs that start with /search/ do:\n    url-space-regex=\"^/search/\"\n\n"
        },
        "_getSameOriginLinkHref": {
          "type": "Function",
          "description": "\nReturns the absolute URL of the link (if any) that this click event\nis clicking on, if we can and should override the resulting full\npage navigation. Returns null otherwise.\n\nThis method is separated away from _globalOnClick for testability,\nas we can't test that a clicked link should have resulted in navigating\naway from the test page.\n\n"
        },
        "_getUrl": {
          "type": "Function",
          "description": ""
        },
        "_globalOnClick": {
          "type": "Function",
          "description": "\nA necessary evil so that links work as expected. Does its best to\nbail out early if possible.\n\n"
        },
        "_hashChanged": {
          "type": "Function",
          "description": ""
        },
        "_initialized": {
          "type": "Boolean",
          "description": ""
        },
        "_lastChangedAtAt": {
          "type": "Number",
          "description": ""
        },
        "_makeRegExp": {
          "type": "Function",
          "description": ""
        },
        "_now": {
          "type": "Function",
          "description": "\n"
        },
        "_updateUrl": {
          "type": "Function",
          "description": ""
        },
        "_urlChanged": {
          "type": "Function",
          "description": ""
        },
        "_urlSpaceRegExp": {
          "type": "RegExp",
          "description": "\nurlSpaceRegex, but coerced into a regexp.\n\n"
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "iron-pages": {
      "name": "iron-pages",
      "description": "\n`iron-pages` is used to select one of its children to show. One use is to cycle through a list of\nchildren \"pages\".\n\nExample:\n\n    &lt;iron-pages selected=\"0\"&gt;\n      &lt;div&gt;One&lt;/div&gt;\n      &lt;div&gt;Two&lt;/div&gt;\n      &lt;div&gt;Three&lt;/div&gt;\n    &lt;/iron-pages&gt;\n\n    &lt;script&gt;\n      document.addEventListener('click', function(e) {\n        var pages = document.querySelector('iron-pages');\n        pages.selectNext();\n      });\n    &lt;/script&gt;\n\n",
      "attributes": {
        "activateEvent": {
          "type": "String",
          "description": " handler immediately changes it back"
        },
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "attrForSelected": {
          "type": "String",
          "description": "\nIf you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)\n       "
        },
        "forceSynchronousItemUpdate": {
          "type": "Function",
          "description": "\nForce a synchronous update of the `items` property.\n\nNOTE: Consider listening for the `iron-items-changed` event to respond to\nupdates to the set of selectable items after updates to the DOM list and\nselection state have been made.\n\nWARNING: If you are using this method, you should probably consider an\nalternate approach. Synchronously querying for items is potentially\nslow for many use cases. The `items` property will update asynchronously\non its own to reflect selectable items in the DOM.\n     "
        },
        "indexOf": {
          "type": "Function",
          "description": "\nReturns the index of the given item.\n\n"
        },
        "items": {
          "type": "Array",
          "description": "\nThe list of items from which a selection can be made.\n       "
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "select": {
          "type": "Function",
          "description": "\nSelects the given value.\n\n"
        },
        "selectable": {
          "type": "string",
          "description": "\nThis is a CSS selector string.  If this is set, only items that match the CSS selector\nare selectable.\n       "
        },
        "selected": {
          "type": "(string|number)",
          "description": "\nGets or sets the selected element. The default is to use the index of the item.\n"
        },
        "selectedAttribute": {
          "type": "String",
          "description": "\nThe attribute to set on elements when selected.\n       "
        },
        "selectedClass": {
          "type": "String",
          "description": "\nThe class to set on elements when selected.\n       "
        },
        "selectedItem": {
          "type": "?Object",
          "description": "\nReturns the currently selected item.\n\n"
        },
        "selectNext": {
          "type": "Function",
          "description": "\nSelects the next item.\n\n"
        },
        "selectPrevious": {
          "type": "Function",
          "description": "\nSelects the previous item.\n\n"
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "_activateEventChanged": {
          "type": "Function",
          "description": ""
        },
        "_activateHandler": {
          "type": "Function",
          "description": ""
        },
        "_addListener": {
          "type": "Function",
          "description": ""
        },
        "_applySelection": {
          "type": "Function",
          "description": ""
        },
        "_excludedLocalNames": {
          "type": "Object",
          "description": "\nThe set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list.\n\n"
        },
        "_filterItem": {
          "type": "Function",
          "description": ""
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_indexToValue": {
          "type": "Function",
          "description": ""
        },
        "_itemActivate": {
          "type": "Function",
          "description": ""
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_observeItems": {
          "type": "Function",
          "description": " observe items change under the given node."
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "_removeListener": {
          "type": "Function",
          "description": ""
        },
        "_selectedPageChanged": {
          "type": "Function",
          "description": ""
        },
        "_selectionChange": {
          "type": "Function",
          "description": ""
        },
        "_selectSelected": {
          "type": "Function",
          "description": ""
        },
        "_shouldUpdateSelection": {
          "type": "",
          "description": ""
        },
        "_updateAttrForSelected": {
          "type": "Function",
          "description": ""
        },
        "_updateItems": {
          "type": "Function",
          "description": ""
        },
        "_updateSelected": {
          "type": "Function",
          "description": ""
        },
        "_valueForItem": {
          "type": "Function",
          "description": ""
        },
        "_valueToIndex": {
          "type": "Function",
          "description": ""
        },
        "_valueToItem": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "iron-scroll-threshold": {
      "name": "iron-scroll-threshold",
      "description": "\n`iron-scroll-threshold` is a utility element that listens for `scroll` events from a\nscrollable region and fires events to indicate when the scroller has reached a pre-defined\nlimit, specified in pixels from the upper and lower bounds of the scrollable region.\nThis element may wrap a scrollable region and will listen for `scroll` events bubbling\nthrough it from its children.  In this case, care should be taken that only one scrollable\nregion with the same orientation as this element is contained within. Alternatively,\nthe `scrollTarget` property can be set/bound to a non-child scrollable region, from which\nit will listen for events.\n\nOnce a threshold has been reached, a `lower-threshold` or `upper-threshold` event will\nbe fired, at which point the user may perform actions such as lazily-loading more data\nto be displayed. After any work is done, the user must then clear the threshold by\ncalling the `clearTriggers` method on this element, after which it will\nbegin listening again for the scroll position to reach the threshold again assuming\nthe content in the scrollable region has grown. If the user no longer wishes to receive\nevents (e.g. all data has been exhausted), the threshold property in question (e.g.\n`lowerThreshold`) may be set to a falsy value to disable events and clear the associated\ntriggered property.\n\n### Example\n\n```html\n&lt;iron-scroll-threshold on-lower-threshold=\"loadMoreData\"&gt;\n  &lt;div&gt;content&lt;/div&gt;\n&lt;/iron-scroll-threshold&gt;\n```\n\n```js\n  loadMoreData: function() {\n    // load async stuff. e.g. XHR\n    asyncStuff(function done() {\n      ironScrollTheshold.clearTriggers();\n    });\n  }\n```\n\n### Using dom-repeat\n\n```html\n&lt;iron-scroll-threshold on-lower-threshold=\"loadMoreData\"&gt;\n  &lt;dom-repeat items=\"[[items]]\"&gt;\n    &lt;template&gt;\n      &lt;div&gt;[[index]]&lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/dom-repeat&gt;\n&lt;/iron-scroll-threshold&gt;\n```\n\n### Using iron-list\n\n```html\n&lt;iron-scroll-threshold on-lower-threshold=\"loadMoreData\" id=\"threshold\"&gt;\n  &lt;iron-list scroll-target=\"threshold\" items=\"[[items]]\"&gt;\n    &lt;template&gt;\n      &lt;div&gt;[[index]]&lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/iron-list&gt;\n&lt;/iron-scroll-threshold&gt;\n```\n\n",
      "attributes": {
        "checkScrollThesholds": {
          "type": "Function",
          "description": "\nChecks the scroll thresholds.\nThis method is automatically called by iron-scroll-threshold.\n\n"
        },
        "clearTriggers": {
          "type": "Function",
          "description": "\nClear the upper and lower threshold states.\n\n"
        },
        "horizontal": {
          "type": "Boolean",
          "description": "\nTrue if the orientation of the scroller is horizontal.\n       "
        },
        "lowerThreshold": {
          "type": "Number",
          "description": "\nDistance from the bottom (or right, for horizontal) bound of the scroller\nwhere the \"lower trigger\" will fire.\n       "
        },
        "lowerTriggered": {
          "type": "Boolean",
          "description": "\nRead-only value that tracks the triggered state of the lower threshold.\n       "
        },
        "scroll": {
          "type": "Function",
          "description": "\nScrolls the content to a particular place.\n\n"
        },
        "scrollTarget": {
          "type": "HTMLElement",
          "description": "\nSpecifies the element that will handle the scroll event\non the behalf of the current element. This is typically a reference to an element,\nbut there are a few more posibilities:\n\n### Elements id\n\n```html\n&lt;div id=\"scrollable-element\" style=\"overflow: auto;\"&gt;\n &lt;x-element scroll-target=\"scrollable-element\"&gt;\n   &lt;!-- Content--&gt;\n &lt;/x-element&gt;\n&lt;/div&gt;\n```\nIn this case, the `scrollTarget` will point to the outer div element. \n\n### Document scrolling\n\nFor document scrolling, you can use the reserved word `document`:\n\n```html\n&lt;x-element scroll-target=\"document\"&gt;\n  &lt;!-- Content --&gt;\n&lt;/x-element&gt;\n```\n\n### Elements reference\n\n```js\nappHeader.scrollTarget = document.querySelector('#scrollable-element');\n```\n\n"
        },
        "upperThreshold": {
          "type": "Number",
          "description": "\nDistance from the top (or left, for horizontal) bound of the scroller\nwhere the \"upper trigger\" will fire.\n       "
        },
        "upperTriggered": {
          "type": "Boolean",
          "description": "\nRead-only value that tracks the triggered state of the upper threshold.\n       "
        },
        "_defaultScrollTarget": {
          "type": "",
          "description": ""
        },
        "_doc": {
          "type": "Element",
          "description": "\nShortcut for the document element\n\n"
        },
        "_initCheck": {
          "type": "Function",
          "description": ""
        },
        "_isValidScrollTarget": {
          "type": "Function",
          "description": "\nReturns true if the scroll target is a valid HTMLElement.\n\n"
        },
        "_scrollHandler": {
          "type": "Function",
          "description": ""
        },
        "_scrollLeft": {
          "type": "number",
          "description": "\nGets the number of pixels that the content of an element is scrolled to the left.\n\n"
        },
        "_scrollTargetChanged": {
          "type": "Function",
          "description": ""
        },
        "_scrollTargetHeight": {
          "type": "number",
          "description": "\nGets the height of the scroll target.\n\n"
        },
        "_scrollTargetWidth": {
          "type": "number",
          "description": "\nGets the width of the scroll target.\n\n"
        },
        "_scrollTop": {
          "type": "number",
          "description": "\nGets the number of pixels that the content of an element is scrolled upward.\n\n"
        },
        "_setOverflow": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-selector": {
      "name": "iron-selector",
      "description": "\n  `iron-selector` is an element which can be used to manage a list of elements\n  that can be selected.  Tapping on the item will make the item selected.  The `selected` indicates\n  which item is being selected.  The default is to use the index of the item.\n\n  Example:\n\n      &lt;iron-selector selected=\"0\"&gt;\n        &lt;div&gt;Item 1&lt;/div&gt;\n        &lt;div&gt;Item 2&lt;/div&gt;\n        &lt;div&gt;Item 3&lt;/div&gt;\n      &lt;/iron-selector&gt;\n\n  If you want to use the attribute value of an element for `selected` instead of the index,\n  set `attrForSelected` to the name of the attribute.  For example, if you want to select item by\n  `name`, set `attrForSelected` to `name`.\n\n  Example:\n\n      &lt;iron-selector attr-for-selected=\"name\" selected=\"foo\"&gt;\n        &lt;div name=\"foo\"&gt;Foo&lt;/div&gt;\n        &lt;div name=\"bar\"&gt;Bar&lt;/div&gt;\n        &lt;div name=\"zot\"&gt;Zot&lt;/div&gt;\n      &lt;/iron-selector&gt;\n\n  `iron-selector` is not styled. Use the `iron-selected` CSS class to style the selected element.\n\n  Example:\n\n      &lt;style&gt;\n        .iron-selected {\n          background: #eee;\n        }\n      &lt;/style&gt;\n\n      ...\n\n      &lt;iron-selector selected=\"0\"&gt;\n        &lt;div&gt;Item 1&lt;/div&gt;\n        &lt;div&gt;Item 2&lt;/div&gt;\n        &lt;div&gt;Item 3&lt;/div&gt;\n      &lt;/iron-selector&gt;\n\n  ",
      "attributes": {
        "activateEvent": {
          "type": "String",
          "description": "\nThe event that fires from items when they are selected. Selectable\nwill listen for this event from items and update the selection state.\nSet to empty string to listen to no events.\n       "
        },
        "attrForSelected": {
          "type": "String",
          "description": "\nIf you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)\n       "
        },
        "forceSynchronousItemUpdate": {
          "type": "Function",
          "description": "\nForce a synchronous update of the `items` property.\n\nNOTE: Consider listening for the `iron-items-changed` event to respond to\nupdates to the set of selectable items after updates to the DOM list and\nselection state have been made.\n\nWARNING: If you are using this method, you should probably consider an\nalternate approach. Synchronously querying for items is potentially\nslow for many use cases. The `items` property will update asynchronously\non its own to reflect selectable items in the DOM.\n     "
        },
        "indexOf": {
          "type": "Function",
          "description": "\nReturns the index of the given item.\n\n"
        },
        "items": {
          "type": "Array",
          "description": "\nThe list of items from which a selection can be made.\n       "
        },
        "multi": {
          "type": "Boolean",
          "description": "\nIf true, multiple selections are allowed.\n       "
        },
        "multiChanged": {
          "type": "Function",
          "description": ""
        },
        "select": {
          "type": "Function",
          "description": "\nSelects the given value. If the `multi` property is true, then the selected state of the\n`value` will be toggled; otherwise the `value` will be selected.\n\n"
        },
        "selectable": {
          "type": "string",
          "description": "\nThis is a CSS selector string.  If this is set, only items that match the CSS selector\nare selectable.\n       "
        },
        "selected": {
          "type": "(string|number)",
          "description": "\nGets or sets the selected element. The default is to use the index of the item.\n"
        },
        "selectedAttribute": {
          "type": "String",
          "description": "\nThe attribute to set on elements when selected.\n       "
        },
        "selectedClass": {
          "type": "String",
          "description": "\nThe class to set on elements when selected.\n       "
        },
        "selectedItem": {
          "type": "?Object",
          "description": "\nReturns the currently selected item.\n\n"
        },
        "selectedItems": {
          "type": "Array",
          "description": "\nReturns an array of currently selected items.\n       "
        },
        "selectedValues": {
          "type": "Array",
          "description": "\nGets or sets the selected elements. This is used instead of `selected` when `multi`\nis true.\n       "
        },
        "selectNext": {
          "type": "Function",
          "description": "\nSelects the next item.\n\n"
        },
        "selectPrevious": {
          "type": "Function",
          "description": "\nSelects the previous item.\n\n"
        },
        "_activateEventChanged": {
          "type": "Function",
          "description": ""
        },
        "_activateHandler": {
          "type": "Function",
          "description": ""
        },
        "_addListener": {
          "type": "Function",
          "description": ""
        },
        "_applySelection": {
          "type": "Function",
          "description": ""
        },
        "_excludedLocalNames": {
          "type": "Object",
          "description": "\nThe set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list.\n\n"
        },
        "_filterItem": {
          "type": "Function",
          "description": ""
        },
        "_indexToValue": {
          "type": "Function",
          "description": ""
        },
        "_itemActivate": {
          "type": "Function",
          "description": ""
        },
        "_observeItems": {
          "type": "Function",
          "description": " observe items change under the given node."
        },
        "_removeListener": {
          "type": "Function",
          "description": ""
        },
        "_selectionChange": {
          "type": "Function",
          "description": ""
        },
        "_selectMulti": {
          "type": "Function",
          "description": ""
        },
        "_selectSelected": {
          "type": "Function",
          "description": ""
        },
        "_shouldUpdateSelection": {
          "type": "",
          "description": ""
        },
        "_toggleSelected": {
          "type": "Function",
          "description": ""
        },
        "_updateAttrForSelected": {
          "type": "Function",
          "description": ""
        },
        "_updateItems": {
          "type": "Function",
          "description": ""
        },
        "_updateSelected": {
          "type": "Function",
          "description": ""
        },
        "_valueForItem": {
          "type": "Function",
          "description": ""
        },
        "_valuesToItems": {
          "type": "Function",
          "description": ""
        },
        "_valueToIndex": {
          "type": "Function",
          "description": ""
        },
        "_valueToItem": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-signals": {
      "name": "iron-signals",
      "description": "\n`iron-signals` provides basic publish-subscribe functionality.\n\nNote: avoid using `iron-signals` whenever you can use\na controller (parent element) to mediate communication\ninstead.\n\nTo send a signal, fire a custom event of type `iron-signal`, with\na detail object containing `name` and `data` fields.\n\n    this.fire('iron-signal', {name: 'hello', data: null});\n\nTo receive a signal, listen for `iron-signal-&lt;name&gt;` event on a\n`iron-signals` element.\n\n  &lt;iron-signals on-iron-signal-hello=\"{{helloSignal}}\"&gt;\n\nYou can fire a signal event from anywhere, and all\n`iron-signals` elements will receive the event, regardless\nof where they are in DOM.\n\n",
      "attributes": {
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "iron-swipeable-container": {
      "name": "iron-swipeable-container",
      "description": "\n`&lt;iron-swipeable-container&gt;` is a container that allows any of its nested\nchildren (native or custom elements) to be swiped away. By default it supports\na curved or horizontal transition, but the transition duration and properties\ncan be customized.\n\nExample:\n\n    &lt;iron-swipeable-container&gt;\n      &lt;div&gt;I can be swiped&lt;/div&gt;\n      &lt;paper-card heading=\"Me too!\"&gt;&lt;/paper-card&gt;\n    &lt;/iron-swipeable-container&gt;\n\nTo disable swiping on individual children, you must give them the `.disable-swipe`\nclass. Alternatively, to disable swiping on the whole container, you can use its\n`disable-swipe` attribute:\n\n    &lt;iron-swipeable-container&gt;\n      &lt;div class=\"disable-swipe\"&gt;I cannot be swiped be swiped&lt;/div&gt;\n      &lt;paper-card heading=\"But I can!\"&gt;&lt;/paper-card&gt;\n    &lt;/iron-swipeable-container&gt;\n\n    &lt;iron-swipeable-container disable-swipe&gt;\n      &lt;div&gt;I cannot be swiped&lt;/div&gt;\n      &lt;paper-card heading=\"Me neither :(\"&gt;&lt;/paper-card&gt;\n    &lt;/iron-swipeable-container&gt;\n\nIt is a good idea to disable text selection on any of the children that you\nwant to be swiped:\n\n    .swipe {\n      -moz-user-select: none;\n      -ms-user-select: none;\n      -webkit-user-select: none;\n      user-select: none;\n      cursor: default;\n    }\n\n",
      "attributes": {
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, then the container will not allow swiping.\n       "
        },
        "opacityRate": {
          "type": "Number",
          "description": "\nThe ratio of the total animation distance after which the opacity\ntransformation begins. For example, if the `widthRatio` is 1 and\nthe `opacityRate` is 0.5, then the element needs to travel half its\nwidth before its opacity starts decreasing.\n       "
        },
        "swipeStyle": {
          "type": "String",
          "description": "\nThe style in which to swipe the card. Currently supported\noptions are `curve | horizontal`. If left unspecified, the default\nis assumed to be `horizontal`.\n       "
        },
        "transition": {
          "type": "String",
          "description": "\nThe CSS transition applied while swiping.\n       "
        },
        "widthRatio": {
          "type": "Number",
          "description": "\nThe ratio of the width of the element that the translation animation\nshould happen over. For example, if the `widthRatio` is 3, the\nanimation will take place on a distance 3 times the width of the\nelement being swiped.\n       "
        },
        "_addListeners": {
          "type": "Function",
          "description": ""
        },
        "_animate": {
          "type": "Function",
          "description": ""
        },
        "_onTrack": {
          "type": "Function",
          "description": ""
        },
        "_onTransitionEnd": {
          "type": "Function",
          "description": ""
        },
        "_removeListeners": {
          "type": "Function",
          "description": ""
        },
        "_swipeEnd": {
          "type": "Function",
          "description": ""
        },
        "_trackEnd": {
          "type": "Function",
          "description": ""
        },
        "_trackMove": {
          "type": "Function",
          "description": ""
        },
        "_trackStart": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "marked-element": {
      "name": "marked-element",
      "description": "\nElement wrapper for the [marked](https://github.com/chjj/marked) library.\n\n`&lt;marked-element&gt;` accepts Markdown source, and renders it to a child\nelement with the class `markdown-html`. This child element can be styled\nas you would a normal DOM element. If you do not provide a child element\nwith the `markdown-html` class, the Markdown source will still be rendered,\nbut to a shadow DOM child that cannot be styled.\n\nThe Markdown source can be specified either via the `markdown` attribute:\n\n    &lt;marked-element markdown=\"`Markdown` is _awesome_!\"&gt;\n      &lt;div class=\"markdown-html\"&gt;&lt;/div&gt;\n    &lt;/marked-element&gt;\n\nOr, you can provide it via a `&lt;script type=\"text/markdown\"&gt;` element child:\n\n    &lt;marked-element&gt;\n      &lt;div class=\"markdown-html\"&gt;&lt;/div&gt;\n      &lt;script type=\"text/markdown\"&gt;\n        Check out my markdown!\n\n        We can even embed elements without fear of the HTML parser mucking up their\n        textual representation:\n\n        ```html\n        &lt;awesome-sauce&gt;\n          &lt;div&gt;Oops, I'm about to forget to close this div.\n        &lt;/awesome-sauce&gt;\n        ```\n      &lt;/script&gt;\n    &lt;/marked-element&gt;\n\nNote that the `&lt;script type=\"text/markdown\"&gt;` approach is _static_. Changes to\nthe script content will _not_ update the rendered markdown!\n\n### Styling\nIf you are using a child with the `markdown-html` class, you can style it\nas you would a regular DOM element:\n\n    .markdown-html p {\n      color: red;\n    }\n\n    .markdown-html td:first-child {\n      padding-left: 24px;\n    }\n\n",
      "attributes": {
        "markdown": {
          "type": "String",
          "description": "\nThe markdown source that should be rendered by this element.\n       "
        },
        "outputElement": {
          "type": "",
          "description": ""
        },
        "pedantic": {
          "type": "Boolean",
          "description": "\nConform to obscure parts of markdown.pl as much as possible. Don't fix any of the original markdown bugs or poor behavior.\n       "
        },
        "render": {
          "type": "Function",
          "description": "\nRenders `markdown` into this element's DOM.\n\nThis is automatically called whenever the `markdown` property is changed.\n\nThe only case where you should be calling this is if you are providing\nmarkdown via `&lt;script type=\"text/markdown\"&gt;` after this element has been\nconstructed (or updating that markdown).\n     "
        },
        "sanitize": {
          "type": "Boolean",
          "description": "\nSanitize the output. Ignore any HTML that has been input.\n       "
        },
        "smartypants": {
          "type": "Boolean",
          "description": "\nUse \"smart\" typographic punctuation for things like quotes and dashes.\n       "
        },
        "unindent": {
          "type": "Function",
          "description": "\nUnindents the markdown source that will be rendered.\n     "
        },
        "_highlight": {
          "type": "Function",
          "description": ""
        },
        "_unindent": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": "\nRenders `markdown` to HTML when the element is attached.\n\nThis serves a dual purpose:\n\n * Prevents unnecessary work (no need to render when not visible).\n\n * `attached` fires top-down, so we can give ancestors a chance to\n   register listeners for the `syntax-highlight` event _before_ we render\n   any markdown.\n\n     "
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "neon-animated-pages": {
      "name": "neon-animated-pages",
      "description": "\nMaterial design: [Meaningful transitions](https://www.google.com/design/spec/animation/meaningful-transitions.html)\n\n`neon-animated-pages` manages a set of pages and runs an animation when switching between them. Its\nchildren pages should implement `Polymer.NeonAnimatableBehavior` and define `entry` and `exit`\nanimations to be run when switching to or switching out of the page.\n\n",
      "attributes": {
        "activateEvent": {
          "type": "String",
          "description": ""
        },
        "animateInitialSelection": {
          "type": "Boolean",
          "description": " if true, the initial page selection will also be animated according to its animation config."
        },
        "animationConfig": {
          "type": "Object",
          "description": "\nAnimation configuration. See README for more info.\n       "
        },
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "attrForSelected": {
          "type": "String",
          "description": "\nIf you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)\n       "
        },
        "cancelAnimation": {
          "type": "Function",
          "description": "\nCancels the currently running animation.\n     "
        },
        "entryAnimation": {
          "type": "String",
          "description": "\nConvenience property for setting an 'entry' animation. Do not set `animationConfig.entry`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
        },
        "exitAnimation": {
          "type": "String",
          "description": "\nConvenience property for setting an 'exit' animation. Do not set `animationConfig.exit`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
        },
        "forceSynchronousItemUpdate": {
          "type": "Function",
          "description": "\nForce a synchronous update of the `items` property.\n\nNOTE: Consider listening for the `iron-items-changed` event to respond to\nupdates to the set of selectable items after updates to the DOM list and\nselection state have been made.\n\nWARNING: If you are using this method, you should probably consider an\nalternate approach. Synchronously querying for items is potentially\nslow for many use cases. The `items` property will update asynchronously\non its own to reflect selectable items in the DOM.\n     "
        },
        "getAnimationConfig": {
          "type": "Function",
          "description": "\nAn element implementing `Polymer.NeonAnimationRunnerBehavior` calls this method to configure\nan animation with an optional type. Elements implementing `Polymer.NeonAnimatableBehavior`\nshould define the property `animationConfig`, which is either a configuration object\nor a map of animation type to array of configuration objects.\n     "
        },
        "indexOf": {
          "type": "Function",
          "description": "\nReturns the index of the given item.\n\n"
        },
        "items": {
          "type": "Array",
          "description": "\nThe list of items from which a selection can be made.\n       "
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "playAnimation": {
          "type": "Function",
          "description": "\nPlays an animation with an optional `type`.\n"
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "select": {
          "type": "Function",
          "description": "\nSelects the given value.\n\n"
        },
        "selectable": {
          "type": "string",
          "description": "\nThis is a CSS selector string.  If this is set, only items that match the CSS selector\nare selectable.\n       "
        },
        "selected": {
          "type": "(string|number)",
          "description": "\nGets or sets the selected element. The default is to use the index of the item.\n"
        },
        "selectedAttribute": {
          "type": "String",
          "description": "\nThe attribute to set on elements when selected.\n       "
        },
        "selectedClass": {
          "type": "String",
          "description": "\nThe class to set on elements when selected.\n       "
        },
        "selectedItem": {
          "type": "?Object",
          "description": "\nReturns the currently selected item.\n\n"
        },
        "selectNext": {
          "type": "Function",
          "description": "\nSelects the next item.\n\n"
        },
        "selectPrevious": {
          "type": "Function",
          "description": "\nSelects the previous item.\n\n"
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "_activateEventChanged": {
          "type": "Function",
          "description": ""
        },
        "_activateHandler": {
          "type": "Function",
          "description": ""
        },
        "_addListener": {
          "type": "Function",
          "description": ""
        },
        "_animationMeta": {
          "type": "Object",
          "description": ""
        },
        "_applySelection": {
          "type": "Function",
          "description": ""
        },
        "_cloneConfig": {
          "type": "Function",
          "description": ""
        },
        "_completeAnimations": {
          "type": "Function",
          "description": ""
        },
        "_completeSelectedChanged": {
          "type": "Function",
          "description": "\n"
        },
        "_configureAnimationEffects": {
          "type": "Function",
          "description": ""
        },
        "_copyProperties": {
          "type": "Function",
          "description": ""
        },
        "_entryAnimationChanged": {
          "type": "Function",
          "description": ""
        },
        "_excludedLocalNames": {
          "type": "Object",
          "description": "\nThe set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list.\n\n"
        },
        "_exitAnimationChanged": {
          "type": "Function",
          "description": ""
        },
        "_filterItem": {
          "type": "Function",
          "description": ""
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_getAnimationConfigRecursive": {
          "type": "Function",
          "description": ""
        },
        "_indexToValue": {
          "type": "Function",
          "description": ""
        },
        "_itemActivate": {
          "type": "Function",
          "description": ""
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_notifyPageResize": {
          "type": "Function",
          "description": ""
        },
        "_observeItems": {
          "type": "Function",
          "description": " observe items change under the given node."
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_onIronSelect": {
          "type": "Function",
          "description": ""
        },
        "_onNeonAnimationFinish": {
          "type": "Function",
          "description": ""
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "_player": {
          "type": "?Object",
          "description": ""
        },
        "_removeListener": {
          "type": "Function",
          "description": ""
        },
        "_runAnimationEffects": {
          "type": "Function",
          "description": ""
        },
        "_selectionChange": {
          "type": "Function",
          "description": ""
        },
        "_selectSelected": {
          "type": "Function",
          "description": ""
        },
        "_shouldUpdateSelection": {
          "type": "",
          "description": ""
        },
        "_updateAttrForSelected": {
          "type": "Function",
          "description": ""
        },
        "_updateItems": {
          "type": "Function",
          "description": ""
        },
        "_updateSelected": {
          "type": "Function",
          "description": ""
        },
        "_valueForItem": {
          "type": "Function",
          "description": ""
        },
        "_valueToIndex": {
          "type": "Function",
          "description": ""
        },
        "_valueToItem": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "opaque-animation": {
      "name": "opaque-animation",
      "description": "\n`&lt;opaque-animation&gt;` makes an element `opacity:1` for the duration of the animation. Used to prevent\nwebkit/safari from drawing a frame before an animation for elements that animate from display:none.\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": ""
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "neon-animatable": {
      "name": "neon-animatable",
      "description": "\n`&lt;neon-animatable&gt;` is a simple container element implementing `Polymer.NeonAnimatableBehavior`. This is a convenience element for use with `&lt;neon-animated-pages&gt;`.\n\n```\n&lt;neon-animated-pages selected=\"0\"\n                     entry-animation=\"slide-from-right-animation\"\n                     exit-animation=\"slide-left-animation\"&gt;\n  &lt;neon-animatable&gt;1&lt;/neon-animatable&gt;\n  &lt;neon-animatable&gt;2&lt;/neon-animatable&gt;\n&lt;/neon-animated-pages&gt;\n```\n",
      "attributes": {
        "animationConfig": {
          "type": "Object",
          "description": "\nAnimation configuration. See README for more info.\n       "
        },
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "entryAnimation": {
          "type": "String",
          "description": "\nConvenience property for setting an 'entry' animation. Do not set `animationConfig.entry`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
        },
        "exitAnimation": {
          "type": "String",
          "description": "\nConvenience property for setting an 'exit' animation. Do not set `animationConfig.exit`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
        },
        "getAnimationConfig": {
          "type": "Function",
          "description": "\nAn element implementing `Polymer.NeonAnimationRunnerBehavior` calls this method to configure\nan animation with an optional type. Elements implementing `Polymer.NeonAnimatableBehavior`\nshould define the property `animationConfig`, which is either a configuration object\nor a map of animation type to array of configuration objects.\n     "
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "_cloneConfig": {
          "type": "Function",
          "description": ""
        },
        "_copyProperties": {
          "type": "Function",
          "description": ""
        },
        "_entryAnimationChanged": {
          "type": "Function",
          "description": ""
        },
        "_exitAnimationChanged": {
          "type": "Function",
          "description": ""
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_getAnimationConfigRecursive": {
          "type": "Function",
          "description": ""
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "cascaded-animation": {
      "name": "cascaded-animation",
      "description": "\n`&lt;cascaded-animation&gt;` applies an animation on an array of elements with a delay between each.\nthe delay defaults to 50ms.\n\nConfiguration:\n```\n{\n  name: 'cascaded-animation',\n  animation: &lt;animation-name&gt;,\n  nodes: &lt;array-of-nodes&gt;,\n  nodeDelay: &lt;node-delay-in-ms&gt;,\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": ""
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "_animationMeta": {
          "type": "!Polymer.IronMeta",
          "description": ""
        },
        "configure": {
          "type": "Function",
          "description": "\n"
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "fade-in-animation": {
      "name": "fade-in-animation",
      "description": "\n`&lt;fade-in-animation&gt;` animates the opacity of an element from 0 to 1.\n\nConfiguration:\n```\n{\n  name: 'fade-in-animation',\n  node: &lt;node&gt;\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "fade-out-animation": {
      "name": "fade-out-animation",
      "description": "\n`&lt;fade-out-animation&gt;` animates the opacity of an element from 1 to 0.\n\nConfiguration:\n```\n{\n  name: 'fade-out-animation',\n  node: &lt;node&gt;\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "hero-animation": {
      "name": "hero-animation",
      "description": "\n`&lt;hero-animation&gt;` is a shared element animation that scales and transform an element such that it\nappears to be shared between two pages. Use this in `&lt;neon-animated-pages&gt;`. The source page\nshould use this animation in an 'exit' animation and set the `fromPage` configuration property to\nitself, and the destination page should use this animation in an `entry` animation and set the\n`toPage` configuration property to itself. They should also define the hero elements in the\n`sharedElements` property (not a configuration property, see\n`Polymer.NeonSharedElementAnimatableBehavior`).\n\nConfiguration:\n```\n{\n  name: 'hero-animation',\n  id: &lt;shared-element-id&gt;,\n  timing: &lt;animation-timing&gt;,\n  toPage: &lt;node&gt;, /* define for the destination page */\n  fromPage: &lt;node&gt;, /* define for the source page */\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": ""
        },
        "findSharedElements": {
          "type": "Function",
          "description": "\nFinds shared elements based on `config`.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "sharedElements": {
          "type": "Object",
          "description": "\nCached copy of shared elements.\n       "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "ripple-animation": {
      "name": "ripple-animation",
      "description": "\n`&lt;ripple-animation&gt;` scales and transform an element such that it appears to ripple from either\na shared element, or from a screen position, to full screen.\n\nIf using as a shared element animation in `&lt;neon-animated-pages&gt;`, use this animation in an `exit`\nanimation in the source page and in an `entry` animation in the destination page. Also, define the\nhero elements in the `sharedElements` property (not a configuration property, see\n`Polymer.NeonSharedElementAnimatableBehavior`).\n\nIf using a screen position, define the `gesture` property.\n\nConfiguration:\n```\n{\n  name: 'ripple-animation`.\n  id: &lt;shared-element-id&gt;, /* set this or gesture */\n  gesture: {x: &lt;page-x&gt;, y: &lt;page-y&gt;}, /* set this or id */\n  timing: &lt;animation-timing&gt;,\n  toPage: &lt;node&gt;, /* define for the destination page */\n  fromPage: &lt;node&gt;, /* define for the source page */\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": ""
        },
        "findSharedElements": {
          "type": "Function",
          "description": "\nFinds shared elements based on `config`.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "sharedElements": {
          "type": "Object",
          "description": "\nCached copy of shared elements.\n       "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "reverse-ripple-animation": {
      "name": "reverse-ripple-animation",
      "description": "\n`&lt;reverse-ripple-animation&gt;` scales and transform an element such that it appears to ripple down from this element, to either\na shared element, or a screen position.\n\nIf using as a shared element animation in `&lt;neon-animated-pages&gt;`, use this animation in an `exit`\nanimation in the source page and in an `entry` animation in the destination page. Also, define the\nreverse-ripple elements in the `sharedElements` property (not a configuration property, see\n`Polymer.NeonSharedElementAnimatableBehavior`).\nIf using a screen position, define the `gesture` property.\nConfiguration:\n```\n{\n  name: 'reverse-ripple-animation`.\n  id: &lt;shared-element-id&gt;, /* set this or gesture */\n  gesture: {x: &lt;page-x&gt;, y: &lt;page-y&gt;}, /* set this or id */\n  timing: &lt;animation-timing&gt;,\n  toPage: &lt;node&gt;, /* define for the destination page */\n  fromPage: &lt;node&gt;, /* define for the source page */\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": ""
        },
        "findSharedElements": {
          "type": "Function",
          "description": "\nFinds shared elements based on `config`.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "sharedElements": {
          "type": "Object",
          "description": "\nCached copy of shared elements.\n       "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "scale-down-animation": {
      "name": "scale-down-animation",
      "description": "\n`&lt;scale-down-animation&gt;` animates the scale transform of an element from 1 to 0. By default it\nscales in both the x and y axes.\n\nConfiguration:\n```\n{\n  name: 'scale-down-animation',\n  node: &lt;node&gt;,\n  axis: 'x' | 'y' | '',\n  transformOrigin: &lt;transform-origin&gt;,\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "scale-up-animation": {
      "name": "scale-up-animation",
      "description": "\n`&lt;scale-up-animation&gt;` animates the scale transform of an element from 0 to 1. By default it\nscales in both the x and y axes.\n\nConfiguration:\n```\n{\n  name: 'scale-up-animation',\n  node: &lt;node&gt;,\n  axis: 'x' | 'y' | '',\n  transformOrigin: &lt;transform-origin&gt;,\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "slide-from-right-animation": {
      "name": "slide-from-right-animation",
      "description": "\n`&lt;slide-from-right-animation&gt;` animates the transform of an element from\n`translateX(100%)` to `none`.\nThe `transformOrigin` defaults to `0 50%`.\n\nConfiguration:\n```\n{\n  name: 'slide-from-right-animation',\n  node: &lt;node&gt;,\n  transformOrigin: &lt;transform-origin&gt;,\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "slide-from-left-animation": {
      "name": "slide-from-left-animation",
      "description": "\n`&lt;slide-from-left-animation&gt;` animates the transform of an element from\n`translateX(-100%)` to `none`.\nThe `transformOrigin` defaults to `0 50%`.\n\nConfiguration:\n```\n{\n  name: 'slide-from-left-animation',\n  node: &lt;node&gt;,\n  transformOrigin: &lt;transform-origin&gt;,\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "slide-from-top-animation": {
      "name": "slide-from-top-animation",
      "description": "\n`&lt;slide-from-top-animation&gt;` animates the transform of an element from `translateY(-100%)` to\n`none`. The `transformOrigin` defaults to `50% 0`.\n\nConfiguration:\n```\n{\n  name: 'slide-from-top-animation',\n  node: &lt;node&gt;,\n  transformOrigin: &lt;transform-origin&gt;,\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "slide-from-bottom-animation": {
      "name": "slide-from-bottom-animation",
      "description": "\n`&lt;slide-from-bottom-animation&gt;` animates the transform of an element from `none` to `translateY(100%)`.\nThe `transformOrigin` defaults to `50% 0`.\n\nConfiguration:\n```\n{\n  name: 'slide-from-bottom-animation',\n  node: &lt;node&gt;,\n  transformOrigin: &lt;transform-origin&gt;,\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "slide-left-animation": {
      "name": "slide-left-animation",
      "description": "\n`&lt;slide-left-animation&gt;` animates the transform of an element from `none` to `translateX(-100%)`.\nThe `transformOrigin` defaults to `0 50%`.\n\nConfiguration:\n```\n{\n  name: 'slide-left-animation',\n  node: &lt;node&gt;,\n  transformOrigin: &lt;transform-origin&gt;,\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "slide-up-animation": {
      "name": "slide-up-animation",
      "description": "\n`&lt;slide-up-animation&gt;` animates the transform of an element from `translateY(0)` to\n`translateY(-100%)`. The `transformOrigin` defaults to `50% 0`.\n\nConfiguration:\n```\n{\n  name: 'slide-up-animation',\n  node: &lt;node&gt;,\n  transformOrigin: &lt;transform-origin&gt;,\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "slide-right-animation": {
      "name": "slide-right-animation",
      "description": "\n`&lt;slide-right-animation&gt;` animates the transform of an element from `none` to `translateX(100%)`.\nThe `transformOrigin` defaults to `0 50%`.\n\nConfiguration:\n```\n{\n  name: 'slide-right-animation',\n  node: &lt;node&gt;,\n  transformOrigin: &lt;transform-origin&gt;,\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "slide-down-animation": {
      "name": "slide-down-animation",
      "description": "\n`&lt;slide-down-animation&gt;` animates the transform of an element from `none` `translateY(100%)`.\nThe `transformOrigin` defaults to `50% 0`.\n\nConfiguration:\n```\n{\n  name: 'slide-down-animation',\n  node: &lt;node&gt;,\n  transformOrigin: &lt;transform-origin&gt;,\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "transform-animation": {
      "name": "transform-animation",
      "description": "\n`&lt;transform-animation&gt;` animates a custom transform on an element. Use this to animate multiple\ntransform properties, or to apply a custom transform value.\n\nConfiguration:\n```\n{\n  name: 'transform-animation',\n  node: &lt;node&gt;,\n  transformOrigin: &lt;transform-origin&gt;,\n  transformFrom: &lt;transform-from-string&gt;,\n  transformTo: &lt;transform-to-string&gt;,\n  timing: &lt;animation-timing&gt;\n}\n```\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": "\n"
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-badge": {
      "name": "paper-badge",
      "description": "\n`&lt;paper-badge&gt;` is a circular text badge that is displayed on the top right\ncorner of an element, representing a status or a notification. It will badge\nthe anchor element specified in the `for` attribute, or, if that doesn't exist,\ncentered to the parent node containing it.\n\nBadges can also contain an icon by adding the `icon` attribute and setting\nit to the id of the desired icon. Please note that you should still set the\n`label` attribute in order to keep the element accessible. Also note that you will need to import\nthe `iron-iconset` that includes the icons you want to use. See [iron-icon](../iron-icon)\nfor more information on how to import and use icon sets.\n\nExample:\n\n    &lt;div style=\"display:inline-block\"&gt;\n      &lt;span&gt;Inbox&lt;/span&gt;\n      &lt;paper-badge label=\"3\"&gt;&lt;/paper-badge&gt;\n    &lt;/div&gt;\n\n    &lt;div&gt;\n      &lt;paper-button id=\"btn\"&gt;Status&lt;/paper-button&gt;\n      &lt;paper-badge icon=\"favorite\" for=\"btn\" label=\"favorite icon\"&gt;&lt;/paper-badge&gt;\n    &lt;/div&gt;\n\n    &lt;div&gt;\n      &lt;paper-icon-button id=\"account-box\" icon=\"account-box\" alt=\"account-box\"&gt;&lt;/paper-icon-button&gt;\n      &lt;paper-badge icon=\"social:mood\" for=\"account-box\" label=\"mood icon\"&gt;&lt;/paper-badge&gt;\n    &lt;/div&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-badge-background` | The background color of the badge | `--accent-color`\n`--paper-badge-opacity` | The opacity of the badge | `1.0`\n`--paper-badge-text-color` | The color of the badge text | `white`\n`--paper-badge-width` | The width of the badge circle | `20px`\n`--paper-badge-height` | The height of the badge circle | `20px`\n`--paper-badge-margin-left` | Optional spacing added to the left of the badge. | `0px`\n`--paper-badge-margin-bottom` | Optional spacing added to the bottom of the badge. | `0px`\n`--paper-badge` | Mixin applied to the badge | `{}`\n\n",
      "attributes": {
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "for": {
          "type": "String",
          "description": "\nThe id of the element that the badge is anchored to. This element\nmust be a sibling of the badge.\n         "
        },
        "icon": {
          "type": "String",
          "description": "\nAn iron-icon ID. When given, the badge content will use an\n`&lt;iron-icon&gt;` element displaying the given icon ID rather than the\nlabel text. However, the label text will still be used for\naccessibility purposes.\n         "
        },
        "label": {
          "type": "String",
          "description": "\nThe label displayed in the badge. The label is centered, and ideally\nshould have very few characters.\n         "
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "target": {
          "type": "",
          "description": "\nReturns the target element that this badge is anchored to. It is\neither the element given by the `for` attribute, or the immediate parent\nof the badge.\n       "
        },
        "updatePosition": {
          "type": "Function",
          "description": "\nRepositions the badge relative to its anchor element. This is called\nautomatically when the badge is attached or an `iron-resize` event is\nfired (for exmaple if the window has resized, or your target is a\ncustom element that implements IronResizableBehavior).\n\nYou should call this in all other cases when the achor's position\nmight have changed (for example, if it's visibility has changed, or\nyou've manually done a page re-layout).\n       "
        },
        "_computeIsIconBadge": {
          "type": "Function",
          "description": ""
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_forChanged": {
          "type": "Function",
          "description": ""
        },
        "_labelChanged": {
          "type": "Function",
          "description": ""
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "_updateTarget": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "paper-button": {
      "name": "paper-button",
      "description": "\nMaterial design: [Buttons](https://www.google.com/design/spec/components/buttons.html)\n\n`paper-button` is a button. When the user touches the button, a ripple effect emanates\nfrom the point of contact. It may be flat or raised. A raised button is styled with a\nshadow.\n\nExample:\n\n    &lt;paper-button&gt;Flat button&lt;/paper-button&gt;\n    &lt;paper-button raised&gt;Raised button&lt;/paper-button&gt;\n    &lt;paper-button noink&gt;No ripple effect&lt;/paper-button&gt;\n    &lt;paper-button toggles&gt;Toggle-able button&lt;/paper-button&gt;\n\nA button that has `toggles` true will remain `active` after being clicked (and\nwill have an `active` attribute set). For more information, see the `Polymer.IronButtonState`\nbehavior.\n\nYou may use custom DOM in the button body to create a variety of buttons. For example, to\ncreate a button with an icon and some text:\n\n    &lt;paper-button&gt;\n      &lt;iron-icon icon=\"favorite\"&gt;&lt;/iron-icon&gt;\n      custom button content\n    &lt;/paper-button&gt;\n\n### Styling\n\nStyle the button with CSS as you would a normal DOM element.\n\n    paper-button.fancy {\n      background: green;\n      color: yellow;\n    }\n\n    paper-button.fancy:hover {\n      background: lime;\n    }\n\n    paper-button[disabled],\n    paper-button[toggles][active] {\n      background: red;\n    }\n\nBy default, the ripple is the same color as the foreground at 25% opacity. You may\ncustomize the color using the `--paper-button-ink-color` custom property.\n\nThe following custom properties and mixins are also available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-button-ink-color` | Background color of the ripple | `Based on the button's color`\n`--paper-button` | Mixin applied to the button | `{}`\n`--paper-button-disabled` | Mixin applied to the disabled button. Note that you can also use the `paper-button[disabled]` selector | `{}`\n`--paper-button-flat-keyboard-focus` | Mixin applied to a flat button after it's been focused using the keyboard | `{}`\n`--paper-button-raised-keyboard-focus` | Mixin applied to a raised button after it's been focused using the keyboard | `{}`\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nIf true, the button is a toggle and is currently in the active state.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "ariaActiveAttribute": {
          "type": "String",
          "description": "\nThe aria attribute to be set if the button is a toggle and in the\nactive state.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "elevation": {
          "type": "Number",
          "description": "\nThe z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.\n\n"
        },
        "ensureRipple": {
          "type": "Function",
          "description": "\nEnsures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.\n"
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "getRipple": {
          "type": "Function",
          "description": "\nReturns the `&lt;paper-ripple&gt;` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.\n     "
        },
        "hasRipple": {
          "type": "Function",
          "description": "\nReturns true if this element currently contains a ripple effect.\n"
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "noink": {
          "type": "Boolean",
          "description": "\nIf true, the element will not produce a ripple effect when interacted\nwith via the pointer.\n       "
        },
        "pointerDown": {
          "type": "Boolean",
          "description": "\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       "
        },
        "pressed": {
          "type": "Boolean",
          "description": "\nIf true, the user is currently holding down the button.\n       "
        },
        "raised": {
          "type": "Boolean",
          "description": "\nIf true, the button should be styled with a shadow.\n       "
        },
        "receivedFocusFromKeyboard": {
          "type": "Boolean",
          "description": "\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "toggles": {
          "type": "Boolean",
          "description": "\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
        },
        "_activeChanged": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_ariaActiveAttributeChanged": {
          "type": "Function",
          "description": ""
        },
        "_asyncClick": {
          "type": "Function",
          "description": " event handler to unwind before triggering another event"
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_buttonStateChanged": {
          "type": "Function",
          "description": "\nEnsures a `&lt;paper-ripple&gt;` element is available when the element is\nfocused.\n     "
        },
        "_calculateElevation": {
          "type": "Function",
          "description": ""
        },
        "_changedButtonState": {
          "type": "Function",
          "description": " provide hook for follow-on behaviors to react to button-state"
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeKeyboardClass": {
          "type": "Function",
          "description": ""
        },
        "_controlStateChanged": {
          "type": "Function",
          "description": ""
        },
        "_createRipple": {
          "type": "Function",
          "description": "\nCreate the element's ripple effect via creating a `&lt;paper-ripple&gt;`.\nOverride this method to customize the ripple element.\n"
        },
        "_detectKeyboardFocus": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_downHandler": {
          "type": "Function",
          "description": "\nIn addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventRe": {
          "type": "object",
          "description": ""
        },
        "_noinkChanged": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_pressedChanged": {
          "type": "Function",
          "description": " any of these changes are considered a change to button state"
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_rippleContainer": {
          "type": "(Element|undefined)",
          "description": "\n"
        },
        "_spaceKeyDownHandler": {
          "type": "Function",
          "description": "\nIn addition to `IronButtonState` behavior, when space key goes down,\ncreate a ripple down effect.\n\n"
        },
        "_spaceKeyUpHandler": {
          "type": "Function",
          "description": "\nIn addition to `IronButtonState` behavior, when space key goes up,\ncreate a ripple up effect.\n\n"
        },
        "_tapHandler": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_upHandler": {
          "type": "Function",
          "description": ""
        },
        "_userActivate": {
          "type": "Function",
          "description": " 'change' events"
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-card": {
      "name": "paper-card",
      "description": "\nMaterial design: [Cards](https://www.google.com/design/spec/components/cards.html)\n\n`paper-card` is a container with a drop shadow.\n\nExample:\n\n    &lt;paper-card heading=\"Card Title\"&gt;\n      &lt;div class=\"card-content\"&gt;Some content&lt;/div&gt;\n      &lt;div class=\"card-actions\"&gt;\n        &lt;paper-button&gt;Some action&lt;/paper-button&gt;\n      &lt;/div&gt;\n    &lt;/paper-card&gt;\n\nExample - top card image:\n\n    &lt;paper-card heading=\"Card Title\" image=\"/path/to/image.png\"&gt;\n      ...\n    &lt;/paper-card&gt;\n\n### Accessibility\n\nBy default, the `aria-label` will be set to the value of the `heading` attribute.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-card-background-color` | The background color of the card | `--primary-background-color`\n`--paper-card-header-color` | The color of the header text | `#000`\n`--paper-card-header` | Mixin applied to the card header section | `{}`\n`--paper-card-header-text` | Mixin applied to the title in the card header section | `{}`\n`--paper-card-header-image` | Mixin applied to the image in the card header section | `{}`\n`--paper-card-header-image-text` | Mixin applied to the text overlapping the image in the card header section | `{}`\n`--paper-card-content` | Mixin applied to the card content section| `{}`\n`--paper-card-actions` | Mixin applied to the card action section | `{}`\n`--paper-card` | Mixin applied to the card | `{}`\n\n",
      "attributes": {
        "animated": {
          "type": "Boolean",
          "description": "\nRead-only property used to pass down the `animatedShadow` value to\nthe underlying paper-material style (since they have different names).\n         "
        },
        "animatedShadow": {
          "type": "Boolean",
          "description": "\nSet this to true to animate the card shadow when setting a new\n`z` value.\n         "
        },
        "elevation": {
          "type": "Number",
          "description": "\nThe z-depth of the card, from 0-5.\n         "
        },
        "fadeImage": {
          "type": "Boolean",
          "description": "\nWhen `preloadImage` is true, setting `fadeImage` to true will cause the\nimage to fade into place.\n         "
        },
        "heading": {
          "type": "String",
          "description": "\nThe title of the card.\n         "
        },
        "image": {
          "type": "String",
          "description": "\nThe url of the title image of the card.\n         "
        },
        "preloadImage": {
          "type": "Boolean",
          "description": "\nWhen `true`, any change to the image url property will cause the\n`placeholder` image to be shown until the image is fully rendered.\n         "
        },
        "_computeAnimated": {
          "type": "Function",
          "description": ""
        },
        "_computeHeadingClass": {
          "type": "Function",
          "description": ""
        },
        "_headingChanged": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-checkbox": {
      "name": "paper-checkbox",
      "description": "\nMaterial design: [Checkbox](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-checkbox)\n\n`paper-checkbox` is a button that can be either checked or unchecked.  User\ncan tap the checkbox to check or uncheck it.  Usually you use checkboxes\nto allow user to select multiple options from a set.  If you have a single\nON/OFF option, avoid using a single checkbox and use `paper-toggle-button`\ninstead.\n\nExample:\n\n    &lt;paper-checkbox&gt;label&lt;/paper-checkbox&gt;\n\n    &lt;paper-checkbox checked&gt; label&lt;/paper-checkbox&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-checkbox-unchecked-background-color` | Checkbox background color when the input is not checked | `transparent`\n`--paper-checkbox-unchecked-color` | Checkbox border color when the input is not checked | `--primary-text-color`\n`--paper-checkbox-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--primary-text-color`\n`--paper-checkbox-checked-color` | Checkbox color when the input is checked | `--primary-color`\n`--paper-checkbox-checked-ink-color` | Selected/focus ripple color when the input is checked | `--primary-color`\n`--paper-checkbox-checkmark-color` | Checkmark color | `white`\n`--paper-checkbox-label-color` | Label color | `--primary-text-color`\n`--paper-checkbox-label-spacing` | Spacing between the label and the checkbox | `8px`\n`--paper-checkbox-error-color` | Checkbox color when invalid | `--error-color`\n`--paper-checkbox-size` | Size of the checkbox | `18px`\n\nThis element applies the mixin `--paper-font-common-base` but does not import `paper-styles/typography.html`.\nIn order to apply the `Roboto` font to this element, make sure you've imported `paper-styles/typography.html`.\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nIf true, the button is a toggle and is currently in the active state.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "ariaActiveAttribute": {
          "type": "String",
          "description": "\nFired when the checked state changes.\n\n"
        },
        "checked": {
          "type": "Boolean",
          "description": "\nGets or sets the state, `true` is checked and `false` is unchecked.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "ensureRipple": {
          "type": "Function",
          "description": "\nEnsures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.\n"
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "getRipple": {
          "type": "Function",
          "description": "\nReturns the `&lt;paper-ripple&gt;` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.\n     "
        },
        "hasRipple": {
          "type": "Function",
          "description": "\nReturns true if this element currently contains a ripple effect.\n"
        },
        "hasValidator": {
          "type": "Function",
          "description": "\n"
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nTrue if the last call to `validate` is invalid.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "noink": {
          "type": "Boolean",
          "description": "\nIf true, the element will not produce a ripple effect when interacted\nwith via the pointer.\n       "
        },
        "pointerDown": {
          "type": "Boolean",
          "description": "\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       "
        },
        "pressed": {
          "type": "Boolean",
          "description": "\nIf true, the user is currently holding down the button.\n       "
        },
        "receivedFocusFromKeyboard": {
          "type": "Boolean",
          "description": "\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "toggles": {
          "type": "Boolean",
          "description": "\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
        },
        "validate": {
          "type": "Function",
          "description": "\nReturns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.\n\n"
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use.\n       "
        },
        "validatorType": {
          "type": "String",
          "description": "\nNamespace for this validator.\n       "
        },
        "value": {
          "type": "String",
          "description": " Overriden from Polymer.IronFormElementBehavior "
        },
        "_activeChanged": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_ariaActiveAttributeChanged": {
          "type": "Function",
          "description": ""
        },
        "_asyncClick": {
          "type": "Function",
          "description": " event handler to unwind before triggering another event"
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_buttonStateChanged": {
          "type": "Function",
          "description": "\nSynchronizes the element's `active` and `checked` state.\n     "
        },
        "_changedButtonState": {
          "type": "Function",
          "description": " provide hook for follow-on behaviors to react to button-state"
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_checkedChanged": {
          "type": "Function",
          "description": "\nSynchronizes the element's checked state with its ripple effect.\n     "
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeCheckboxClass": {
          "type": "Function",
          "description": ""
        },
        "_computeCheckmarkClass": {
          "type": "Function",
          "description": ""
        },
        "_controlStateChanged": {
          "type": "Function",
          "description": ""
        },
        "_createRipple": {
          "type": "Function",
          "description": " create ripple inside the checkboxContainer"
        },
        "_detectKeyboardFocus": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_downHandler": {
          "type": "Function",
          "description": "\nIn addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_focusedChanged": {
          "type": "Function",
          "description": ""
        },
        "_getValidity": {
          "type": "Function",
          "description": "\nReturns false if the element is required and not checked, and true otherwise.\n"
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_invalidChanged": {
          "type": "Function",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventRe": {
          "type": "object",
          "description": ""
        },
        "_noinkChanged": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_pressedChanged": {
          "type": "Function",
          "description": " any of these changes are considered a change to button state"
        },
        "_requiredChanged": {
          "type": "Function",
          "description": "\nUpdate the aria-required label when `required` is changed.\n     "
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_rippleContainer": {
          "type": "(Element|undefined)",
          "description": "\n"
        },
        "_spaceKeyDownHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_spaceKeyUpHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_tapHandler": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_upHandler": {
          "type": "Function",
          "description": ""
        },
        "_userActivate": {
          "type": "Function",
          "description": " 'change' events"
        },
        "_validator": {
          "type": "",
          "description": ""
        },
        "_validatorMeta": {
          "type": "Object",
          "description": ""
        },
        "_valueChanged": {
          "type": "Function",
          "description": "\nReset value to 'on' if it is set to `undefined`.\n     "
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-dialog": {
      "name": "paper-dialog",
      "description": "\nMaterial design: [Dialogs](https://www.google.com/design/spec/components/dialogs.html)\n\n`&lt;paper-dialog&gt;` is a dialog with Material Design styling and optional animations when it is\nopened or closed. It provides styles for a header, content area, and an action area for buttons.\nYou can use the `&lt;paper-dialog-scrollable&gt;` element (in its own repository) if you need a scrolling\ncontent area. See `Polymer.PaperDialogBehavior` for specifics.\n\nFor example, the following code implements a dialog with a header, scrolling content area and\nbuttons.\n\n    &lt;paper-dialog&gt;\n      &lt;h2&gt;Header&lt;/h2&gt;\n      &lt;paper-dialog-scrollable&gt;\n        Lorem ipsum...\n      &lt;/paper-dialog-scrollable&gt;\n      &lt;div class=\"buttons\"&gt;\n        &lt;paper-button dialog-dismiss&gt;Cancel&lt;/paper-button&gt;\n        &lt;paper-button dialog-confirm&gt;Accept&lt;/paper-button&gt;\n      &lt;/div&gt;\n    &lt;/paper-dialog&gt;\n\n### Styling\n\nSee the docs for `Polymer.PaperDialogBehavior` for the custom properties available for styling\nthis element.\n\n### Animations\n\nSet the `entry-animation` and/or `exit-animation` attributes to add an animation when the dialog\nis opened or closed. See the documentation in\n[PolymerElements/neon-animation](https://github.com/PolymerElements/neon-animation) for more info.\n\nFor example:\n\n    &lt;link rel=\"import\" href=\"components/neon-animation/animations/scale-up-animation.html\"&gt;\n    &lt;link rel=\"import\" href=\"components/neon-animation/animations/fade-out-animation.html\"&gt;\n\n    &lt;paper-dialog entry-animation=\"scale-up-animation\"\n                  exit-animation=\"fade-out-animation\"&gt;\n      &lt;h2&gt;Header&lt;/h2&gt;\n      &lt;div&gt;Dialog body&lt;/div&gt;\n    &lt;/paper-dialog&gt;\n\n### Accessibility\n\nSee the docs for `Polymer.PaperDialogBehavior` for accessibility features implemented by this\nelement.\n\n",
      "attributes": {
        "animationConfig": {
          "type": "Object",
          "description": "\nAnimation configuration. See README for more info.\n       "
        },
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "autoFitOnAttach": {
          "type": "Boolean",
          "description": "\nSet to true to auto-fit on attach.\n       "
        },
        "backdropElement": {
          "type": "Element",
          "description": "\nThe backdrop element.\n"
        },
        "cancel": {
          "type": "Function",
          "description": "\nCancels the overlay.\n"
        },
        "cancelAnimation": {
          "type": "Function",
          "description": "\nCancels the currently running animation.\n     "
        },
        "canceled": {
          "type": "Boolean",
          "description": "\nTrue if the overlay was canceled when it was last closed.\n       "
        },
        "center": {
          "type": "Function",
          "description": "\nCenters horizontally and vertically if not already positioned. This also sets\n`position:fixed`.\n     "
        },
        "close": {
          "type": "Function",
          "description": "\nClose the overlay.\n     "
        },
        "closingReason": {
          "type": "Object",
          "description": "\nReturns the reason this dialog was last closed.\n       "
        },
        "constrain": {
          "type": "Function",
          "description": "\nConstrains the size of the element to the window or `fitInfo` by setting `max-height`\nand/or `max-width`.\n     "
        },
        "entryAnimation": {
          "type": "String",
          "description": "\nConvenience property for setting an 'entry' animation. Do not set `animationConfig.entry`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
        },
        "exitAnimation": {
          "type": "String",
          "description": "\nConvenience property for setting an 'exit' animation. Do not set `animationConfig.exit`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
        },
        "fit": {
          "type": "Function",
          "description": "\nFits and optionally centers the element into the window, or `fitInfo` if specified.\n     "
        },
        "fitInto": {
          "type": "Object",
          "description": "\nThe element to fit `this` into.\n       "
        },
        "getAnimationConfig": {
          "type": "Function",
          "description": "\nAn element implementing `Polymer.NeonAnimationRunnerBehavior` calls this method to configure\nan animation with an optional type. Elements implementing `Polymer.NeonAnimatableBehavior`\nshould define the property `animationConfig`, which is either a configuration object\nor a map of animation type to array of configuration objects.\n     "
        },
        "modal": {
          "type": "Boolean",
          "description": "\nIf `modal` is true, this implies `no-cancel-on-outside-click`, `no-cancel-on-esc-key` and `with-backdrop`.\n       "
        },
        "noAutoFocus": {
          "type": "Boolean",
          "description": "\nSet to true to disable auto-focusing the overlay or child nodes with\nthe `autofocus` attribute` when the overlay is opened.\n       "
        },
        "noCancelOnEscKey": {
          "type": "Boolean",
          "description": "\nSet to true to disable canceling the overlay with the ESC key.\n       "
        },
        "noCancelOnOutsideClick": {
          "type": "Boolean",
          "description": "\nSet to true to disable canceling the overlay by clicking outside it.\n       "
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "open": {
          "type": "Function",
          "description": "\nOpen the overlay.\n     "
        },
        "opened": {
          "type": "Boolean",
          "description": "\nTrue if the overlay is currently displayed.\n       "
        },
        "playAnimation": {
          "type": "Function",
          "description": "\nPlays an animation with an optional `type`.\n"
        },
        "refit": {
          "type": "Function",
          "description": "\nEquivalent to calling `resetFit()` and `fit()`. Useful to call this after the element,\nthe window, or the `fitInfo` element has been resized.\n     "
        },
        "resetFit": {
          "type": "Function",
          "description": "\nResets the target element's position and size constraints, and clear\nthe memoized data.\n     "
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "restoreFocusOnClose": {
          "type": "Boolean",
          "description": "\nSet to true to enable restoring of focus when overlay is closed.\n       "
        },
        "sizingTarget": {
          "type": "!Element",
          "description": "\nThe element that will receive a `max-height`/`width`. By default it is the same as `this`,\nbut it can be set to a child element. This is useful, for example, for implementing a\nscrolling region inside the element.\n"
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "toggle": {
          "type": "Function",
          "description": "\nToggle the opened state of the overlay.\n     "
        },
        "withBackdrop": {
          "type": "Boolean",
          "description": "\nSet to true to display a backdrop behind the overlay.\n       "
        },
        "_animationMeta": {
          "type": "Object",
          "description": ""
        },
        "_applyFocus": {
          "type": "Function",
          "description": "\nApplies focus according to the opened state.\n"
        },
        "_canceledChanged": {
          "type": "Function",
          "description": ""
        },
        "_cloneConfig": {
          "type": "Function",
          "description": ""
        },
        "_completeAnimations": {
          "type": "Function",
          "description": ""
        },
        "_configureAnimationEffects": {
          "type": "Function",
          "description": ""
        },
        "_copyProperties": {
          "type": "Function",
          "description": ""
        },
        "_discoverInfo": {
          "type": "Function",
          "description": "\nMemoize information needed to position and size the target element.\n     "
        },
        "_ensureSetup": {
          "type": "Function",
          "description": ""
        },
        "_entryAnimationChanged": {
          "type": "Function",
          "description": ""
        },
        "_exitAnimationChanged": {
          "type": "Function",
          "description": ""
        },
        "_finishPositioning": {
          "type": "Function",
          "description": ""
        },
        "_finishRenderClosed": {
          "type": "Function",
          "description": "\nTasks to be performed at the end of close action. Will fire `iron-overlay-closed`.\n"
        },
        "_finishRenderOpened": {
          "type": "Function",
          "description": "\nTasks to be performed at the end of open action. Will fire `iron-overlay-opened`.\n"
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_fitHeight": {
          "type": "",
          "description": ""
        },
        "_fitInfo": {
          "type": "?Object",
          "description": ""
        },
        "_fitLeft": {
          "type": "",
          "description": ""
        },
        "_fitTop": {
          "type": "",
          "description": ""
        },
        "_fitWidth": {
          "type": "",
          "description": ""
        },
        "_focusableNodes": {
          "type": "Array.<Node>",
          "description": "\nArray of nodes that can receive focus (overlay included), ordered by `tabindex`.\nThis is used to retrieve which is the first and last focusable nodes in order\nto wrap the focus for overlays `with-backdrop`.\n\nIf you know what is your content (specifically the first and last focusable children),\nyou can override this method to return only `[firstFocusable, lastFocusable];`\n"
        },
        "_focusedChild": {
          "type": "?Node",
          "description": "\nThe node being focused.\n"
        },
        "_focusNode": {
          "type": "Node",
          "description": "\nReturns the node to give focus to.\n"
        },
        "_getAnimationConfigRecursive": {
          "type": "Function",
          "description": ""
        },
        "_manager": {
          "type": "Polymer.IronOverlayManagerClass",
          "description": "\nShortcut to access to the overlay manager.\n"
        },
        "_modalChanged": {
          "type": "Function",
          "description": ""
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_onCaptureClick": {
          "type": "Function",
          "description": "\nCancels (closes) the overlay. Call when click happens outside the overlay.\n"
        },
        "_onCaptureEsc": {
          "type": "Function",
          "description": "\nHandles the ESC key event and cancels (closes) the overlay.\n"
        },
        "_onCaptureFocus": {
          "type": "Function",
          "description": "\nKeeps track of the focused child. If withBackdrop, traps focus within overlay.\n"
        },
        "_onCaptureTab": {
          "type": "Function",
          "description": "\nHandles TAB key events to track focus changes.\nWill wrap focus for overlays withBackdrop.\n"
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onDialogClick": {
          "type": "Function",
          "description": "\nWill dismiss the dialog if user clicked on an element with dialog-dismiss\nor dialog-confirm attribute.\n     "
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_onIronResize": {
          "type": "Function",
          "description": "\nRefits if the overlay is opened and not animating.\n"
        },
        "_onNeonAnimationFinish": {
          "type": "Function",
          "description": ""
        },
        "_onNodesChange": {
          "type": "Function",
          "description": "\nWill call notifyResize if overlay is opened.\nCan be overridden in order to avoid multiple observers on the same node.\n"
        },
        "_openedChanged": {
          "type": "Function",
          "description": ""
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "_player": {
          "type": "?Object",
          "description": ""
        },
        "_preparePositioning": {
          "type": "Function",
          "description": ""
        },
        "_prepareRenderOpened": {
          "type": "Function",
          "description": "\ntasks which must occur before opening; e.g. making the element visible.\n"
        },
        "_renderClosed": {
          "type": "Function",
          "description": ""
        },
        "_renderOpened": {
          "type": "Function",
          "description": ""
        },
        "_runAnimationEffects": {
          "type": "Function",
          "description": ""
        },
        "_sizeDimension": {
          "type": "Function",
          "description": ""
        },
        "_updateClosingReasonConfirmed": {
          "type": "Function",
          "description": ""
        },
        "_withBackdropChanged": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-dialog-scrollable": {
      "name": "paper-dialog-scrollable",
      "description": "\nMaterial design: [Dialogs](https://www.google.com/design/spec/components/dialogs.html)\n\n`paper-dialog-scrollable` implements a scrolling area used in a Material Design dialog. It shows\na divider at the top and/or bottom indicating more content, depending on scroll position. Use this\ntogether with elements implementing `Polymer.PaperDialogBehavior`.\n\n    &lt;paper-dialog-impl&gt;\n      &lt;h2&gt;Header&lt;/h2&gt;\n      &lt;paper-dialog-scrollable&gt;\n        Lorem ipsum...\n      &lt;/paper-dialog-scrollable&gt;\n      &lt;div class=\"buttons\"&gt;\n        &lt;paper-button&gt;OK&lt;/paper-button&gt;\n      &lt;/div&gt;\n    &lt;/paper-dialog-impl&gt;\n\nIt shows a top divider after scrolling if it is not the first child in its parent container,\nindicating there is more content above. It shows a bottom divider if it is scrollable and it is not\nthe last child in its parent container, indicating there is more content below. The bottom divider\nis hidden if it is scrolled to the bottom.\n\nIf `paper-dialog-scrollable` is not a direct child of the element implementing `Polymer.PaperDialogBehavior`,\nremember to set the `dialogElement`:\n\n    &lt;paper-dialog-impl id=\"myDialog\"&gt;\n      &lt;h2&gt;Header&lt;/h2&gt;\n      &lt;div class=\"my-content-wrapper\"&gt;\n        &lt;h4&gt;Sub-header&lt;/h4&gt;\n        &lt;paper-dialog-scrollable&gt;\n          Lorem ipsum...\n        &lt;/paper-dialog-scrollable&gt;\n      &lt;/div&gt;\n      &lt;div class=\"buttons\"&gt;\n        &lt;paper-button&gt;OK&lt;/paper-button&gt;\n      &lt;/div&gt;\n    &lt;/paper-dialog-impl&gt;\n\n    &lt;script&gt;\n      var scrollable = Polymer.dom(myDialog).querySelector('paper-dialog-scrollable');\n      scrollable.dialogElement = myDialog;\n    &lt;/script&gt;\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-dialog-scrollable` | Mixin for the scrollable content | {}\n\n",
      "attributes": {
        "dialogElement": {
          "type": "?Node",
          "description": "\nThe dialog element that implements `Polymer.PaperDialogBehavior` containing this element.\n"
        },
        "scrollTarget": {
          "type": "",
          "description": "\nReturns the scrolling element.\n     "
        },
        "_ensureTarget": {
          "type": "Function",
          "description": ""
        },
        "_scroll": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-drawer-panel": {
      "name": "paper-drawer-panel",
      "description": "\nMaterial design: [Navigation drawer](https://www.google.com/design/spec/patterns/navigation-drawer.html)\n\n`paper-drawer-panel` contains a drawer panel and a main panel.  The drawer\nand the main panel are side-by-side with drawer on the left.  When the browser\nwindow size is smaller than the `responsiveWidth`, `paper-drawer-panel`\nchanges to narrow layout.  In narrow layout, the drawer will be stacked on top\nof the main panel.  The drawer will slide in/out to hide/reveal the main\npanel.\n\nUse the attribute `drawer` to indicate that the element is the drawer panel and\n`main` to indicate that the element is the main panel.\n\nExample:\n\n    &lt;paper-drawer-panel&gt;\n      &lt;div drawer&gt; Drawer panel... &lt;/div&gt;\n      &lt;div main&gt; Main panel... &lt;/div&gt;\n    &lt;/paper-drawer-panel&gt;\n\nThe drawer and the main panels are not scrollable.  You can set CSS overflow\nproperty on the elements to make them scrollable or use `paper-header-panel`.\n\nExample:\n\n    &lt;paper-drawer-panel&gt;\n      &lt;paper-header-panel drawer&gt;\n        &lt;paper-toolbar&gt;&lt;/paper-toolbar&gt;\n        &lt;div&gt; Drawer content... &lt;/div&gt;\n      &lt;/paper-header-panel&gt;\n      &lt;paper-header-panel main&gt;\n        &lt;paper-toolbar&gt;&lt;/paper-toolbar&gt;\n        &lt;div&gt; Main content... &lt;/div&gt;\n      &lt;/paper-header-panel&gt;\n    &lt;/paper-drawer-panel&gt;\n\nAn element that should toggle the drawer will automatically do so if it's\ngiven the `paper-drawer-toggle` attribute.  Also this element will automatically\nbe hidden in wide layout.\n\nExample:\n\n    &lt;paper-drawer-panel&gt;\n      &lt;paper-header-panel drawer&gt;\n        &lt;paper-toolbar&gt;\n          &lt;div&gt;Application&lt;/div&gt;\n        &lt;/paper-toolbar&gt;\n        &lt;div&gt; Drawer content... &lt;/div&gt;\n      &lt;/paper-header-panel&gt;\n      &lt;paper-header-panel main&gt;\n        &lt;paper-toolbar&gt;\n          &lt;paper-icon-button icon=\"menu\" paper-drawer-toggle&gt;&lt;/paper-icon-button&gt;\n          &lt;div&gt;Title&lt;/div&gt;\n        &lt;/paper-toolbar&gt;\n        &lt;div&gt; Main content... &lt;/div&gt;\n      &lt;/paper-header-panel&gt;\n    &lt;/paper-drawer-panel&gt;\n\nTo position the drawer to the right, add `right-drawer` attribute.\n\n    &lt;paper-drawer-panel right-drawer&gt;\n      &lt;div drawer&gt; Drawer panel... &lt;/div&gt;\n      &lt;div main&gt; Main panel... &lt;/div&gt;\n    &lt;/paper-drawer-panel&gt;\n\n### Styling\n\nTo change the main container:\n\n    paper-drawer-panel {\n      --paper-drawer-panel-main-container: {\n        background-color: gray;\n      };\n    }\n\nTo change the drawer container when it's in the left side:\n\n    paper-drawer-panel {\n      --paper-drawer-panel-left-drawer-container: {\n        background-color: white;\n      };\n    }\n\nTo change the drawer container when it's in the right side:\n\n    paper-drawer-panel {\n      --paper-drawer-panel-right-drawer-container: {\n        background-color: white;\n      };\n    }\n\nTo customize the scrim:\n\n    paper-drawer-panel {\n      --paper-drawer-panel-scrim: {\n        background-color: red;\n      };\n    }\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-drawer-panel-scrim-opacity` | Scrim opacity | 1\n`--paper-drawer-panel-drawer-container` | Mixin applied to drawer container | {}\n`--paper-drawer-panel-left-drawer-container` | Mixin applied to container when it's in the left side | {}\n`--paper-drawer-panel-main-container` | Mixin applied to main container | {}\n`--paper-drawer-panel-right-drawer-container` | Mixin applied to container when it's in the right side | {}\n`--paper-drawer-panel-scrim` | Mixin applied to scrim | {}\n\n",
      "attributes": {
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "closeDrawer": {
          "type": "Function",
          "description": "\nCloses the drawer.\n\n"
        },
        "defaultSelected": {
          "type": "String",
          "description": "\nThe panel to be selected when `paper-drawer-panel` changes to narrow\nlayout.\n           "
        },
        "disableEdgeSwipe": {
          "type": "Boolean",
          "description": "\nIf true, swipe from the edge is disabled.\n           "
        },
        "disableSwipe": {
          "type": "Boolean",
          "description": "\nIf true, swipe to open/close the drawer is disabled.\n           "
        },
        "dragging": {
          "type": "Boolean",
          "description": "\nWhether the user is dragging the drawer interactively.\n           "
        },
        "drawerFocusSelector": {
          "type": "String",
          "description": "\nThe CSS selector for the element that should receive focus when the drawer is open.\nBy default, when the drawer opens, it focuses the first tabbable element. That is,\nthe first element that can receive focus.\n\nTo disable this behavior, you can set `drawerFocusSelector` to `null` or an empty string.\n\n           "
        },
        "drawerToggleAttribute": {
          "type": "String",
          "description": "\nThe attribute on elements that should toggle the drawer on tap, also elements will\nautomatically be hidden in wide layout.\n           "
        },
        "drawerWidth": {
          "type": "String",
          "description": "\nWidth of the drawer panel.\n           "
        },
        "edgeSwipeSensitivity": {
          "type": "Number",
          "description": "\nHow many pixels on the side of the screen are sensitive to edge\nswipes and peek.\n           "
        },
        "forceNarrow": {
          "type": "Boolean",
          "description": "\nIf true, ignore `responsiveWidth` setting and force the narrow layout.\n           "
        },
        "hasTransform": {
          "type": "Boolean",
          "description": "\nWhether the browser has support for the transform CSS property.\n           "
        },
        "hasWillChange": {
          "type": "Boolean",
          "description": "\nWhether the browser has support for the will-change CSS property.\n           "
        },
        "narrow": {
          "type": "Boolean",
          "description": "\nReturns true if the panel is in narrow layout.  This is useful if you\nneed to show/hide elements based on the layout.\n           "
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "openDrawer": {
          "type": "Function",
          "description": "\nOpens the drawer.\n\n"
        },
        "peeking": {
          "type": "Boolean",
          "description": "\nWhether the drawer is peeking out from the edge.\n           "
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "responsiveWidth": {
          "type": "String",
          "description": "\nMax-width when the panel changes to narrow layout.\n           "
        },
        "rightDrawer": {
          "type": "Boolean",
          "description": "\nIf true, position the drawer to the right.\n           "
        },
        "selected": {
          "type": "(string|null)",
          "description": "\nThe panel that is being selected. `drawer` for the drawer panel and\n`main` for the main panel.\n\n"
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "togglePanel": {
          "type": "Function",
          "description": "\nToggles the panel open and closed.\n\n"
        },
        "_computeDrawerStyle": {
          "type": "Function",
          "description": ""
        },
        "_computeIronSelectorClass": {
          "type": "Function",
          "description": ""
        },
        "_computeMainStyle": {
          "type": "Function",
          "description": ""
        },
        "_computeMediaQuery": {
          "type": "Function",
          "description": ""
        },
        "_computeSwipeOverlayHidden": {
          "type": "Function",
          "description": ""
        },
        "_didFocus": {
          "type": "Function",
          "description": ""
        },
        "_downHandler": {
          "type": "Function",
          "description": ""
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_forceNarrowChanged": {
          "type": "Function",
          "description": ""
        },
        "_getAutoFocusedNode": {
          "type": "Function",
          "description": ""
        },
        "_getDrawerContent": {
          "type": "Function",
          "description": ""
        },
        "_isDrawerClosed": {
          "type": "Function",
          "description": ""
        },
        "_isEdgeTouch": {
          "type": "Function",
          "description": ""
        },
        "_isMainSelected": {
          "type": "Function",
          "description": ""
        },
        "_moveDrawer": {
          "type": "Function",
          "description": ""
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_onQueryMatchesChanged": {
          "type": "Function",
          "description": ""
        },
        "_onTap": {
          "type": "Function",
          "description": ""
        },
        "_onTrack": {
          "type": "Function",
          "description": ""
        },
        "_onTransitionEnd": {
          "type": "Function",
          "description": ""
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "_responsiveChange": {
          "type": "Function",
          "description": ""
        },
        "_startEdgePeek": {
          "type": "Function",
          "description": ""
        },
        "_stopEdgePeek": {
          "type": "Function",
          "description": ""
        },
        "_swipeAllowed": {
          "type": "Function",
          "description": ""
        },
        "_toggleFocusListener": {
          "type": "Function",
          "description": ""
        },
        "_trackEnd": {
          "type": "Function",
          "description": ""
        },
        "_trackStart": {
          "type": "Function",
          "description": ""
        },
        "_trackX": {
          "type": "Function",
          "description": ""
        },
        "_transformForTranslateX": {
          "type": "Function",
          "description": ""
        },
        "_transition": {
          "type": "Boolean",
          "description": "\nWhether the transition is enabled.\n           "
        },
        "_translateXForDeltaX": {
          "type": "Function",
          "description": ""
        },
        "_upHandler": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-dropdown-menu": {
      "name": "paper-dropdown-menu",
      "description": "\nMaterial design: [Dropdown menus](https://www.google.com/design/spec/components/buttons.html#buttons-dropdown-buttons)\n\n`paper-dropdown-menu` is similar to a native browser select element.\n`paper-dropdown-menu` works with selectable content. The currently selected\nitem is displayed in the control. If no item is selected, the `label` is\ndisplayed instead.\n\nThe child element with the class `dropdown-content` will be used as the dropdown\nmenu. It could be a `paper-menu` or element that triggers `iron-select` when\nselecting its children.\n\nExample:\n\n    &lt;paper-dropdown-menu label=\"Your favourite pastry\"&gt;\n      &lt;paper-menu class=\"dropdown-content\"&gt;\n        &lt;paper-item&gt;Croissant&lt;/paper-item&gt;\n        &lt;paper-item&gt;Donut&lt;/paper-item&gt;\n        &lt;paper-item&gt;Financier&lt;/paper-item&gt;\n        &lt;paper-item&gt;Madeleine&lt;/paper-item&gt;\n      &lt;/paper-menu&gt;\n    &lt;/paper-dropdown-menu&gt;\n\nThis example renders a dropdown menu with 4 options.\n\nSimilarly to using `iron-select`, `iron-deselect` events will cause the\ncurrent selection of the `paper-dropdown-menu` to be cleared.\n\n### Styling\n\nThe following custom properties and mixins are also available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-dropdown-menu` | A mixin that is applied to the element host | `{}`\n`--paper-dropdown-menu-disabled` | A mixin that is applied to the element host when disabled | `{}`\n`--paper-dropdown-menu-ripple` | A mixin that is applied to the internal ripple | `{}`\n`--paper-dropdown-menu-button` | A mixin that is applied to the internal menu button | `{}`\n`--paper-dropdown-menu-input` | A mixin that is applied to the internal paper input | `{}`\n`--paper-dropdown-menu-icon` | A mixin that is applied to the internal icon | `{}`\n\nYou can also use any of the `paper-input-container` and `paper-menu-button`\nstyle mixins and custom properties to style the internal input and menu button\nrespectively.\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nIf true, the button is a toggle and is currently in the active state.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "alwaysFloatLabel": {
          "type": "Boolean",
          "description": "\nSet to true to always float the label. Bind this to the\n`&lt;paper-input-container&gt;`'s `alwaysFloatLabel` property.\n           "
        },
        "ariaActiveAttribute": {
          "type": "String",
          "description": "\nThe aria attribute to be set if the button is a toggle and in the\nactive state.\n       "
        },
        "close": {
          "type": "Function",
          "description": "\nHide the dropdown content.\n         "
        },
        "contentElement": {
          "type": "",
          "description": "\nThe content element that is contained by the dropdown menu, if any.\n         "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "errorMessage": {
          "type": "String",
          "description": "\nThe error message to display when invalid.\n           "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "hasValidator": {
          "type": "Function",
          "description": "\n"
        },
        "horizontalAlign": {
          "type": "String",
          "description": "\nThe orientation against which to align the menu dropdown\nhorizontally relative to the dropdown trigger.\n           "
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nTrue if the last call to `validate` is invalid.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "label": {
          "type": "String",
          "description": "\nThe label for the dropdown.\n           "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "noAnimations": {
          "type": "Boolean",
          "description": "\nSet to true to disable animations when opening and closing the\ndropdown.\n           "
        },
        "noLabelFloat": {
          "type": "Boolean",
          "description": "\nSet to true to disable the floating label. Bind this to the\n`&lt;paper-input-container&gt;`'s `noLabelFloat` property.\n           "
        },
        "open": {
          "type": "Function",
          "description": "\nShow the dropdown content.\n         "
        },
        "opened": {
          "type": "Boolean",
          "description": "\nTrue if the dropdown is open. Otherwise, false.\n           "
        },
        "placeholder": {
          "type": "String",
          "description": "\nThe placeholder for the dropdown.\n           "
        },
        "pointerDown": {
          "type": "Boolean",
          "description": "\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       "
        },
        "pressed": {
          "type": "Boolean",
          "description": "\nIf true, the user is currently holding down the button.\n       "
        },
        "receivedFocusFromKeyboard": {
          "type": "Boolean",
          "description": "\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
        },
        "selectedItem": {
          "type": "?Object",
          "description": "\nThe last selected item. An item is selected if the dropdown menu has\na child with class `dropdown-content`, and that child triggers an\n`iron-select` event with the selected `item` in the `detail`.\n\n"
        },
        "selectedItemLabel": {
          "type": "String",
          "description": "\nThe derived \"label\" of the currently selected item. This value\nis the `label` property on the selected item if set, or else the\ntrimmed text content of the selected item.\n           "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "toggles": {
          "type": "Boolean",
          "description": "\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
        },
        "validate": {
          "type": "Function",
          "description": "\nReturns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.\n\n"
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use.\n       "
        },
        "validatorType": {
          "type": "String",
          "description": "\nNamespace for this validator.\n       "
        },
        "value": {
          "type": "String",
          "description": "\nThe value for this element that will be used when submitting in\na form. It is read only, and will always have the same value\nas `selectedItemLabel`.\n           "
        },
        "verticalAlign": {
          "type": "String",
          "description": "\nThe orientation against which to align the menu dropdown\nvertically relative to the dropdown trigger.\n           "
        },
        "_activeChanged": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_ariaActiveAttributeChanged": {
          "type": "Function",
          "description": ""
        },
        "_asyncClick": {
          "type": "Function",
          "description": " event handler to unwind before triggering another event"
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_changedButtonState": {
          "type": "Function",
          "description": " provide hook for follow-on behaviors to react to button-state"
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeMenuVerticalOffset": {
          "type": "Function",
          "description": "\nCompute the vertical offset of the menu based on the value of\n`noLabelFloat`.\n\n"
        },
        "_controlStateChanged": {
          "type": "Function",
          "description": ""
        },
        "_detectKeyboardFocus": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_downHandler": {
          "type": "Function",
          "description": ""
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_getValidity": {
          "type": "Function",
          "description": "\nReturns false if the element is required and does not have a selection,\nand true otherwise.\n"
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_invalidChanged": {
          "type": "Function",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventRe": {
          "type": "object",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onIronDeselect": {
          "type": "Function",
          "description": "\nA handler that is called when `iron-deselect` is fired.\n\n"
        },
        "_onIronSelect": {
          "type": "Function",
          "description": "\nA handler that is called when `iron-select` is fired.\n\n"
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onTap": {
          "type": "Function",
          "description": "\nA handler that is called when the dropdown is tapped.\n\n"
        },
        "_openedChanged": {
          "type": "Function",
          "description": ""
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_pressedChanged": {
          "type": "Function",
          "description": " any of these changes are considered a change to button state"
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_selectedItemChanged": {
          "type": "Function",
          "description": "\nCompute the label for the dropdown given a selected item.\n\n"
        },
        "_spaceKeyDownHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_spaceKeyUpHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_tapHandler": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_upHandler": {
          "type": "Function",
          "description": ""
        },
        "_userActivate": {
          "type": "Function",
          "description": " 'change' events"
        },
        "_validator": {
          "type": "",
          "description": ""
        },
        "_validatorMeta": {
          "type": "Object",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-fab": {
      "name": "paper-fab",
      "description": "\nMaterial design: [Floating Action Button](https://www.google.com/design/spec/components/buttons-floating-action-button.html)\n\n`paper-fab` is a floating action button. It contains an image placed in the center and\ncomes in two sizes: regular size and a smaller size by applying the attribute `mini`. When\nthe user touches the button, a ripple effect emanates from the center of the button.\n\nYou may import `iron-icons` to use with this element, or provide a URL to a custom icon.\nSee `iron-iconset` for more information about how to use a custom icon set.\n\nExample:\n\n    &lt;link href=\"path/to/iron-icons/iron-icons.html\" rel=\"import\"&gt;\n\n    &lt;paper-fab icon=\"add\"&gt;&lt;/paper-fab&gt;\n    &lt;paper-fab mini icon=\"favorite\"&gt;&lt;/paper-fab&gt;\n    &lt;paper-fab src=\"star.png\"&gt;&lt;/paper-fab&gt;\n\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-fab-background` | The background color of the button | `--accent-color`\n`--paper-fab-keyboard-focus-background` | The background color of the button when focused | `--paper-pink-900`\n`--paper-fab-disabled-background` | The background color of the button when it's disabled | `--paper-grey-300`\n`--paper-fab-disabled-text` | The text color of the button when it's disabled | `--paper-grey-500`\n`--paper-fab` | Mixin applied to the button | `{}`\n`--paper-fab-mini` | Mixin applied to a mini button | `{}`\n`--paper-fab-disabled` | Mixin applied to a disabled button | `{}`\n`--paper-fab-iron-icon` | Mixin applied to the iron-icon within the button | `{}`\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nIf true, the button is a toggle and is currently in the active state.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "ariaActiveAttribute": {
          "type": "String",
          "description": "\nThe aria attribute to be set if the button is a toggle and in the\nactive state.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "elevation": {
          "type": "Number",
          "description": "\nThe z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.\n\n"
        },
        "ensureRipple": {
          "type": "Function",
          "description": "\nEnsures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.\n"
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "getRipple": {
          "type": "Function",
          "description": "\nReturns the `&lt;paper-ripple&gt;` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.\n     "
        },
        "hasRipple": {
          "type": "Function",
          "description": "\nReturns true if this element currently contains a ripple effect.\n"
        },
        "icon": {
          "type": "String",
          "description": "\nSpecifies the icon name or index in the set of icons available in\nthe icon's icon set. If the icon property is specified,\nthe src property should not be.\n         "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "label": {
          "type": "String",
          "description": "\nThe label displayed in the badge. The label is centered, and ideally\nshould have very few characters.\n         "
        },
        "mini": {
          "type": "Boolean",
          "description": "\nSet this to true to style this is a \"mini\" FAB.\n         "
        },
        "noink": {
          "type": "Boolean",
          "description": "\nIf true, the element will not produce a ripple effect when interacted\nwith via the pointer.\n       "
        },
        "pointerDown": {
          "type": "Boolean",
          "description": "\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       "
        },
        "pressed": {
          "type": "Boolean",
          "description": "\nIf true, the user is currently holding down the button.\n       "
        },
        "receivedFocusFromKeyboard": {
          "type": "Boolean",
          "description": "\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "src": {
          "type": "String",
          "description": "\nThe URL of an image for the icon. If the src property is specified,\nthe icon property should not be.\n         "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "toggles": {
          "type": "Boolean",
          "description": "\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
        },
        "_activeChanged": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_ariaActiveAttributeChanged": {
          "type": "Function",
          "description": ""
        },
        "_asyncClick": {
          "type": "Function",
          "description": " event handler to unwind before triggering another event"
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_buttonStateChanged": {
          "type": "Function",
          "description": "\nEnsures a `&lt;paper-ripple&gt;` element is available when the element is\nfocused.\n     "
        },
        "_calculateElevation": {
          "type": "Function",
          "description": ""
        },
        "_changedButtonState": {
          "type": "Function",
          "description": " provide hook for follow-on behaviors to react to button-state"
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeIsIconFab": {
          "type": "Function",
          "description": ""
        },
        "_computeKeyboardClass": {
          "type": "Function",
          "description": ""
        },
        "_controlStateChanged": {
          "type": "Function",
          "description": ""
        },
        "_createRipple": {
          "type": "Function",
          "description": "\nCreate the element's ripple effect via creating a `&lt;paper-ripple&gt;`.\nOverride this method to customize the ripple element.\n"
        },
        "_detectKeyboardFocus": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_downHandler": {
          "type": "Function",
          "description": "\nIn addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_labelChanged": {
          "type": "Function",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventRe": {
          "type": "object",
          "description": ""
        },
        "_noinkChanged": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_pressedChanged": {
          "type": "Function",
          "description": " any of these changes are considered a change to button state"
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_rippleContainer": {
          "type": "(Element|undefined)",
          "description": "\n"
        },
        "_spaceKeyDownHandler": {
          "type": "Function",
          "description": "\nIn addition to `IronButtonState` behavior, when space key goes down,\ncreate a ripple down effect.\n\n"
        },
        "_spaceKeyUpHandler": {
          "type": "Function",
          "description": "\nIn addition to `IronButtonState` behavior, when space key goes up,\ncreate a ripple up effect.\n\n"
        },
        "_tapHandler": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_upHandler": {
          "type": "Function",
          "description": ""
        },
        "_userActivate": {
          "type": "Function",
          "description": " 'change' events"
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-header-panel": {
      "name": "paper-header-panel",
      "description": "\n`paper-header-panel` contains a header section and a content panel section.\n\n__Important:__ The `paper-header-panel` will not display if its parent does not have a height.\n\nUsing layout classes, you can make the `paper-header-panel` fill the screen\n\n    &lt;body class=\"fullbleed layout vertical\"&gt;\n      &lt;paper-header-panel class=\"flex\"&gt;\n        &lt;paper-toolbar&gt;\n          &lt;div&gt;Hello World!&lt;/div&gt;\n        &lt;/paper-toolbar&gt;\n      &lt;/paper-header-panel&gt;\n    &lt;/body&gt;\n\nSpecial support is provided for scrolling modes when one uses a paper-toolbar or equivalent for the\nheader section.\n\nExample:\n\n    &lt;paper-header-panel&gt;\n      &lt;paper-toolbar&gt;Header&lt;/paper-toolbar&gt;\n      &lt;div&gt;Content goes here...&lt;/div&gt;\n    &lt;/paper-header-panel&gt;\n\nIf you want to use other than `paper-toolbar` for the header, add `paper-header` class to that\nelement.\n\nExample:\n\n    &lt;paper-header-panel&gt;\n      &lt;div class=\"paper-header\"&gt;Header&lt;/div&gt;\n      &lt;div&gt;Content goes here...&lt;/div&gt;\n    &lt;/paper-header-panel&gt;\n\nTo have the content fit to the main area, use the `fit` class.\n\n    &lt;paper-header-panel&gt;\n      &lt;div class=\"paper-header\"&gt;standard&lt;/div&gt;\n      &lt;div class=\"fit\"&gt;content fits 100% below the header&lt;/div&gt;\n    &lt;/paper-header-panel&gt;\n\n### Modes\n\nControls header and scrolling behavior. Options are `standard`, `seamed`, `waterfall`, `waterfall-tall`, `scroll` and\n`cover`. Default is `standard`.\n\nMode | Description\n----------------|-------------\n`standard` | The header is a step above the panel. The header will consume the panel at the point of entry, preventing it from passing through to the opposite side.\n`seamed` | The header is presented as seamed with the panel.\n`waterfall` | Similar to standard mode, but header is initially presented as seamed with panel, but then separates to form the step.\n`waterfall-tall` | The header is initially taller (`tall` class is added to the header). As the user scrolls, the header separates (forming an edge) while condensing (`tall` class is removed from the header).\n`scroll` | The header keeps its seam with the panel, and is pushed off screen.\n`cover` | The panel covers the whole `paper-header-panel` including the header. This allows user to style the panel in such a way that the panel is partially covering the header.\n\nExample:\n\n    &lt;paper-header-panel mode=\"waterfall\"&gt;\n      &lt;div class=\"paper-header\"&gt;standard&lt;/div&gt;\n      &lt;div class=\"content fit\"&gt;content fits 100% below the header&lt;/div&gt;\n    &lt;/paper-header-panel&gt;\n\n\n### Styling\n\nTo change the shadow that shows up underneath the header:\n\n    paper-header-panel {\n      --paper-header-panel-shadow: {\n          height: 6px;\n          bottom: -6px;\n          box-shadow: inset 0px 5px 6px -3px rgba(0, 0, 0, 0.4);\n      };\n    }\n\nTo change the panel container in different modes:\n\n    paper-header-panel {\n      --paper-header-panel-standard-container: {\n        border: 1px solid gray;\n      };\n\n      --paper-header-panel-seamed-container: {\n        border: 1px solid gray;\n      };\n\n      --paper-header-panel-waterfall-container: {\n        border: 1px solid gray;\n      };\n\n      --paper-header-panel-waterfall-tall-container: {\n        border: 1px solid gray;\n      };\n\n      --paper-header-panel-scroll-container: {\n        border: 1px solid gray;\n      };\n\n      --paper-header-panel-cover-container: {\n        border: 1px solid gray;\n      };\n    }\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-header-panel` | Mixin applied to the element | `{}`\n`--paper-header-panel-body` | Mixin applied to the element's body (i.e. everything below the toolbar) | `{}`\n`--paper-header-panel-scroll-container` | Mixin applied to the container when in scroll mode | `{}`\n`--paper-header-panel-cover-container` | Mixin applied to the container when in cover mode | `{}`\n`--paper-header-panel-standard-container` | Mixin applied to the container when in standard mode | `{}`\n`--paper-header-panel-seamed-container` | Mixin applied to the container when in seamed mode | `{}`\n`--paper-header-panel-waterfall-container` | Mixin applied to the container when in waterfall mode | `{}`\n`--paper-header-panel-waterfall-tall-container` | Mixin applied to the container when in tall waterfall mode | `{}`\n`--paper-header-panel-shadow` | Mixin applied to the waterfall shadow | `{}`\n\n",
      "attributes": {
        "atTop": {
          "type": "Boolean",
          "description": "\nIf true, the scroller is at the top\n           "
        },
        "header": {
          "type": "",
          "description": "\nReturns the header element\n\n"
        },
        "mode": {
          "type": "String",
          "description": "\nControls header and scrolling behavior. Options are\n`standard`, `seamed`, `waterfall`, `waterfall-tall`, `scroll` and\n`cover`. Default is `standard`.\n\n`standard`: The header is a step above the panel. The header will consume the\npanel at the point of entry, preventing it from passing through to the\nopposite side.\n\n`seamed`: The header is presented as seamed with the panel.\n\n`waterfall`: Similar to standard mode, but header is initially presented as\nseamed with panel, but then separates to form the step.\n\n`waterfall-tall`: The header is initially taller (`tall` class is added to\nthe header).  As the user scrolls, the header separates (forming an edge)\nwhile condensing (`tall` class is removed from the header).\n\n`scroll`: The header keeps its seam with the panel, and is pushed off screen.\n\n`cover`: The panel covers the whole `paper-header-panel` including the\nheader. This allows user to style the panel in such a way that the panel is\npartially covering the header.\n\n    &lt;paper-header-panel mode=\"cover\"&gt;\n      &lt;paper-toolbar class=\"tall\"&gt;\n        &lt;paper-icon-button icon=\"menu\"&gt;&lt;/paper-icon-button&gt;\n      &lt;/paper-toolbar&gt;\n      &lt;div class=\"content\"&gt;&lt;/div&gt;\n    &lt;/paper-header-panel&gt;\n           "
        },
        "scroller": {
          "type": "",
          "description": "\nReturns the scrollable element.\n\n"
        },
        "shadow": {
          "type": "Boolean",
          "description": "\nIf true, the drop-shadow is always shown no matter what mode is set to.\n           "
        },
        "tallClass": {
          "type": "String",
          "description": "\nThe class used in waterfall-tall mode.  Change this if the header\naccepts a different class for toggling height, e.g. \"medium-tall\"\n           "
        },
        "visibleShadow": {
          "type": "",
          "description": "\nReturns true if the scroller has a visible shadow.\n\n"
        },
        "_addListener": {
          "type": "Function",
          "description": ""
        },
        "_computeDropShadowHidden": {
          "type": "Function",
          "description": ""
        },
        "_computeMainContainerClass": {
          "type": "Function",
          "description": ""
        },
        "_getScrollerForMode": {
          "type": "Function",
          "description": ""
        },
        "_keepScrollingState": {
          "type": "Function",
          "description": ""
        },
        "_modeChanged": {
          "type": "Function",
          "description": ""
        },
        "_removeListener": {
          "type": "Function",
          "description": ""
        },
        "_scroll": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-icon-button": {
      "name": "paper-icon-button",
      "description": "\nMaterial design: [Icon toggles](https://www.google.com/design/spec/components/buttons.html#buttons-toggle-buttons)\n\n`paper-icon-button` is a button with an image placed at the center. When the user touches\nthe button, a ripple effect emanates from the center of the button.\n\n`paper-icon-button` includes a default icon set.  Use `icon` to specify which icon\nfrom the icon set to use.\n\n    &lt;paper-icon-button icon=\"menu\"&gt;&lt;/paper-icon-button&gt;\n\nSee [`iron-iconset`](iron-iconset) for more information about\nhow to use a custom icon set.\n\nExample:\n\n    &lt;link href=\"path/to/iron-icons/iron-icons.html\" rel=\"import\"&gt;\n\n    &lt;paper-icon-button icon=\"favorite\"&gt;&lt;/paper-icon-button&gt;\n    &lt;paper-icon-button src=\"star.png\"&gt;&lt;/paper-icon-button&gt;\n\nTo use `paper-icon-button` as a link, wrap it in an anchor tag. Since `paper-icon-button`\nwill already receive focus, you may want to prevent the anchor tag from receiving focus\nas well by setting its tabindex to -1.\n\n    &lt;a href=\"https://www.polymer-project.org\" tabindex=\"-1\"&gt;\n      &lt;paper-icon-button icon=\"polymer\"&gt;&lt;/paper-icon-button&gt;\n    &lt;/a&gt;\n\n### Styling\n\nStyle the button with CSS as you would a normal DOM element. If you are using the icons\nprovided by `iron-icons`, they will inherit the foreground color of the button.\n\n    /* make a red \"favorite\" button */\n    &lt;paper-icon-button icon=\"favorite\" style=\"color: red;\"&gt;&lt;/paper-icon-button&gt;\n\nBy default, the ripple is the same color as the foreground at 25% opacity. You may\ncustomize the color using the `--paper-icon-button-ink-color` custom property.\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-icon-button-disabled-text` | The color of the disabled button | `--disabled-text-color`\n`--paper-icon-button-ink-color` | Selected/focus ripple color | `--primary-text-color`\n`--paper-icon-button` | Mixin for a button | `{}`\n`--paper-icon-button-disabled` | Mixin for a disabled button | `{}`\n`--paper-icon-button-hover` | Mixin for button on hover | `{}`\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nIf true, the button is a toggle and is currently in the active state.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "alt": {
          "type": "String",
          "description": "\nSpecifies the alternate text for the button, for accessibility.\n         "
        },
        "ariaActiveAttribute": {
          "type": "String",
          "description": "\nThe aria attribute to be set if the button is a toggle and in the\nactive state.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "ensureRipple": {
          "type": "Function",
          "description": "\nEnsures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.\n"
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "getRipple": {
          "type": "Function",
          "description": "\nReturns the `&lt;paper-ripple&gt;` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.\n     "
        },
        "hasRipple": {
          "type": "Function",
          "description": "\nReturns true if this element currently contains a ripple effect.\n"
        },
        "icon": {
          "type": "String",
          "description": "\nSpecifies the icon name or index in the set of icons available in\nthe icon's icon set. If the icon property is specified,\nthe src property should not be.\n         "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "noink": {
          "type": "Boolean",
          "description": "\nIf true, the element will not produce a ripple effect when interacted\nwith via the pointer.\n       "
        },
        "pointerDown": {
          "type": "Boolean",
          "description": "\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       "
        },
        "pressed": {
          "type": "Boolean",
          "description": "\nIf true, the user is currently holding down the button.\n       "
        },
        "receivedFocusFromKeyboard": {
          "type": "Boolean",
          "description": "\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "src": {
          "type": "String",
          "description": "\nThe URL of an image for the icon. If the src property is specified,\nthe icon property should not be.\n         "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "toggles": {
          "type": "Boolean",
          "description": "\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
        },
        "_activeChanged": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_altChanged": {
          "type": "Function",
          "description": ""
        },
        "_ariaActiveAttributeChanged": {
          "type": "Function",
          "description": ""
        },
        "_asyncClick": {
          "type": "Function",
          "description": " event handler to unwind before triggering another event"
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_buttonStateChanged": {
          "type": "Function",
          "description": "\nEnsures a `&lt;paper-ripple&gt;` element is available when the element is\nfocused.\n     "
        },
        "_changedButtonState": {
          "type": "Function",
          "description": " provide hook for follow-on behaviors to react to button-state"
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_controlStateChanged": {
          "type": "Function",
          "description": ""
        },
        "_createRipple": {
          "type": "Function",
          "description": ""
        },
        "_detectKeyboardFocus": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_downHandler": {
          "type": "Function",
          "description": "\nIn addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_focusedChanged": {
          "type": "Function",
          "description": ""
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventRe": {
          "type": "object",
          "description": ""
        },
        "_noinkChanged": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_pressedChanged": {
          "type": "Function",
          "description": " any of these changes are considered a change to button state"
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_rippleContainer": {
          "type": "(Element|undefined)",
          "description": "\n"
        },
        "_spaceKeyDownHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_spaceKeyUpHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_tapHandler": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_upHandler": {
          "type": "Function",
          "description": ""
        },
        "_userActivate": {
          "type": "Function",
          "description": " 'change' events"
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-input": {
      "name": "paper-input",
      "description": "\nMaterial design: [Text fields](https://www.google.com/design/spec/components/text-fields.html)\n\n`&lt;paper-input&gt;` is a single-line text field with Material Design styling.\n\n    &lt;paper-input label=\"Input label\"&gt;&lt;/paper-input&gt;\n\nIt may include an optional error message or character counter.\n\n    &lt;paper-input error-message=\"Invalid input!\" label=\"Input label\"&gt;&lt;/paper-input&gt;\n    &lt;paper-input char-counter label=\"Input label\"&gt;&lt;/paper-input&gt;\n\nIt can also include custom prefix or suffix elements, which are displayed\nbefore or after the text input itself. In order for an element to be\nconsidered as a prefix, it must have the `prefix` attribute (and similarly\nfor `suffix`).\n\n    &lt;paper-input label=\"total\"&gt;\n      &lt;div prefix&gt;$&lt;/div&gt;\n      &lt;paper-icon-button suffix icon=\"clear\"&gt;&lt;/paper-icon-button&gt;\n    &lt;/paper-input&gt;\n\nA `paper-input` can use the native `type=search` or `type=file` features.\nHowever, since we can't control the native styling of the input (search icon,\nfile button, date placeholder, etc.), in these cases the label will be\nautomatically floated. The `placeholder` attribute can still be used for\nadditional informational text.\n\n    &lt;paper-input label=\"search!\" type=\"search\"\n        placeholder=\"search for cats\" autosave=\"test\" results=\"5\"&gt;\n    &lt;/paper-input&gt;\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Focus\n\nTo focus a paper-input, you can call the native `focus()` method as long as the\npaper input has a tab index.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\n\n",
      "attributes": {
        "accept": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `accept` property,\nused with type=file.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "allowedPattern": {
          "type": "String",
          "description": "\nSet this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `allowedPattern`\nproperty.\n       "
        },
        "alwaysFloatLabel": {
          "type": "Boolean",
          "description": "\nSet to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `alwaysFloatLabel` property.\n       "
        },
        "autocapitalize": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocapitalize` property.\n       "
        },
        "autocomplete": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocomplete` property.\n       "
        },
        "autocorrect": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocorrect` property.\n       "
        },
        "autofocus": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autofocus` property.\n       "
        },
        "autosave": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autosave` property,\nused with type=search.\n       "
        },
        "autoValidate": {
          "type": "Boolean",
          "description": "\nSet to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `autoValidate` property.\n       "
        },
        "charCounter": {
          "type": "Boolean",
          "description": "\nSet to true to show a character counter.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nSet to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `&lt;paper-input-container&gt;`'s and the input's `disabled` property.\n       "
        },
        "errorMessage": {
          "type": "String",
          "description": "\nThe error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;paper-input-error&gt;`'s content, if using.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "inputElement": {
          "type": "",
          "description": "\nReturns a reference to the input element.\n     "
        },
        "inputmode": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `inputmode` property.\n       "
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nReturns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`&lt;paper-input-container&gt;`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "label": {
          "type": "String",
          "description": "\nThe label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`&lt;label&gt;`'s content and `hidden` property, e.g.\n`&lt;label hidden$=\"[[!label]]\"&gt;[[label]]&lt;/label&gt;` in your `template`\n       "
        },
        "list": {
          "type": "String",
          "description": "\nThe datalist of the input (if any). This should match the id of an existing `&lt;datalist&gt;`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `list` property.\n       "
        },
        "max": {
          "type": "String",
          "description": "\nThe maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-1-1\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `max` property.\n       "
        },
        "maxlength": {
          "type": "Number",
          "description": "\nThe maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `maxlength` property.\n       "
        },
        "min": {
          "type": "String",
          "description": "\nThe minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `min` property.\n       "
        },
        "minlength": {
          "type": "Number",
          "description": "\nThe minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `minlength` property.\n       "
        },
        "multiple": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`&lt;input is=\"iron-input\"&gt;`'s `multiple` property,\nused with type=file.\n       "
        },
        "name": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `name` property.\n       "
        },
        "noLabelFloat": {
          "type": "Boolean",
          "description": "\nSet to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `noLabelFloat` property.\n       "
        },
        "pattern": {
          "type": "String",
          "description": "\nA pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `pattern` property.\n       "
        },
        "placeholder": {
          "type": "String",
          "description": "\nA placeholder string in addition to the label. If this is set, the label will always float.\n       "
        },
        "preventInvalidInput": {
          "type": "Boolean",
          "description": "\nSet to true to prevent the user from entering invalid input. If you're\nusing PaperInputBehavior to  implement your own paper-input-like element,\nbind this to `&lt;input is=\"iron-input\"&gt;`'s `preventInvalidInput` property.\n       "
        },
        "readonly": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `readonly` property.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `required` property.\n       "
        },
        "results": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `results` property,\nused with type=search.\n       "
        },
        "size": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `size` property.\n       "
        },
        "step": {
          "type": "String",
          "description": "\nLimits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `step` property.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "type": {
          "type": "String",
          "description": "\nThe type of the input. The supported types are `text`, `number` and `password`.\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;input is=\"iron-input\"&gt;`'s `type` property.\n       "
        },
        "updateValueAndPreserveCaret": {
          "type": "Function",
          "description": "\nRestores the cursor to its original position after updating the value.\n"
        },
        "validate": {
          "type": "Function",
          "description": "\nValidates the input element and sets an error style if needed.\n\n"
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `validator` property.\n       "
        },
        "value": {
          "type": "String",
          "description": "\nThe value for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `bindValue`\nproperty, or the value property of your input that is `notify:true`.\n       "
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_appendStringWithSpace": {
          "type": "Function",
          "description": ""
        },
        "_ariaDescribedBy": {
          "type": "String",
          "description": ""
        },
        "_ariaLabelledBy": {
          "type": "String",
          "description": ""
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeAlwaysFloatLabel": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_focusableElement": {
          "type": "",
          "description": "\nReturns a reference to the focusable element.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": "\nForward focus to inputElement. Overriden from IronControlState.\n     "
        },
        "_handleAutoValidate": {
          "type": "Function",
          "description": "\nIf `autoValidate` is true, then validates the element.\n     "
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onAddonAttached": {
          "type": "Function",
          "description": ""
        },
        "_onChange": {
          "type": "Function",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onShiftTabDown": {
          "type": "Function",
          "description": "\nHandler that is called when a shift+tab keypress is detected by the menu.\n\n"
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAriaLabelledBy": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-input-char-counter": {
      "name": "paper-input-char-counter",
      "description": "\n`&lt;paper-input-char-counter&gt;` is a character counter for use with `&lt;paper-input-container&gt;`. It\nshows the number of characters entered in the input and the max length if it is specified.\n\n    &lt;paper-input-container&gt;\n      &lt;input is=\"iron-input\" maxlength=\"20\"&gt;\n      &lt;paper-input-char-counter&gt;&lt;/paper-input-char-counter&gt;\n    &lt;/paper-input-container&gt;\n\n### Styling\n\nThe following mixin is available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-char-counter` | Mixin applied to the element | `{}`\n",
      "attributes": {
        "update": {
          "type": "Function",
          "description": "\nThis overrides the update function in PaperInputAddonBehavior.\n"
        },
        "_charCounterStr": {
          "type": "String",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "paper-input-container": {
      "name": "paper-input-container",
      "description": "\n`&lt;paper-input-container&gt;` is a container for a `&lt;label&gt;`, an `&lt;input is=\"iron-input\"&gt;` or\n`&lt;iron-autogrow-textarea&gt;` and optional add-on elements such as an error message or character\ncounter, used to implement Material Design text fields.\n\nFor example:\n\n    &lt;paper-input-container&gt;\n      &lt;label&gt;Your name&lt;/label&gt;\n      &lt;input is=\"iron-input\"&gt;\n    &lt;/paper-input-container&gt;\n\nDo not wrap &lt;paper-input-contanter&gt; around elements that already include it, such as &lt;paper-input&gt;.\nDoing so may cause events to bounce infintely between the container and its contained element.\n\n### Listening for input changes\n\nBy default, it listens for changes on the `bind-value` attribute on its children nodes and perform\ntasks such as auto-validating and label styling when the `bind-value` changes. You can configure\nthe attribute it listens to with the `attr-for-value` attribute.\n\n### Using a custom input element\n\nYou can use a custom input element in a `&lt;paper-input-container&gt;`, for example to implement a\ncompound input field like a social security number input. The custom input element should have the\n`paper-input-input` class, have a `notify:true` value property and optionally implements\n`Polymer.IronValidatableBehavior` if it is validatable.\n\n    &lt;paper-input-container attr-for-value=\"ssn-value\"&gt;\n      &lt;label&gt;Social security number&lt;/label&gt;\n      &lt;ssn-input class=\"paper-input-input\"&gt;&lt;/ssn-input&gt;\n    &lt;/paper-input-container&gt;\n\n\nIf you're using a `&lt;paper-input-container&gt;` imperatively, it's important to make sure\nthat you attach its children (the `iron-input` and the optional `label`) before you\nattach the `&lt;paper-input-container&gt;` itself, so that it can be set up correctly.\n\n### Validation\n\nIf the `auto-validate` attribute is set, the input container will validate the input and update\nthe container styling when the input value changes.\n\n### Add-ons\n\nAdd-ons are child elements of a `&lt;paper-input-container&gt;` with the `add-on` attribute and\nimplements the `Polymer.PaperInputAddonBehavior` behavior. They are notified when the input value\nor validity changes, and may implement functionality such as error messages or character counters.\nThey appear at the bottom of the input.\n\n### Prefixes and suffixes\nThese are child elements of a `&lt;paper-input-container&gt;` with the `prefix`\nor `suffix` attribute, and are displayed inline with the input, before or after.\n\n    &lt;paper-input-container&gt;\n      &lt;div prefix&gt;$&lt;/div&gt;\n      &lt;label&gt;Total&lt;/label&gt;\n      &lt;input is=\"iron-input\"&gt;\n      &lt;paper-icon-button suffix icon=\"clear\"&gt;&lt;/paper-icon-button&gt;\n    &lt;/paper-input-container&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-color` | Label and underline color when the input is not focused | `--secondary-text-color`\n`--paper-input-container-focus-color` | Label and underline color when the input is focused | `--primary-color`\n`--paper-input-container-invalid-color` | Label and underline color when the input is is invalid | `--error-color`\n`--paper-input-container-input-color` | Input foreground color | `--primary-text-color`\n`--paper-input-container` | Mixin applied to the container | `{}`\n`--paper-input-container-disabled` | Mixin applied to the container when it's disabled | `{}`\n`--paper-input-container-label` | Mixin applied to the label | `{}`\n`--paper-input-container-label-focus` | Mixin applied to the label when the input is focused | `{}`\n`--paper-input-container-label-floating` | Mixin applied to the label when floating | `{}`\n`--paper-input-container-input` | Mixin applied to the input | `{}`\n`--paper-input-container-underline` | Mixin applied to the underline | `{}`\n`--paper-input-container-underline-focus` | Mixin applied to the underline when the input is focused | `{}`\n`--paper-input-container-underline-disabled` | Mixin applied to the underline when the input is disabled | `{}`\n`--paper-input-prefix` | Mixin applied to the input prefix | `{}`\n`--paper-input-suffix` | Mixin applied to the input suffix | `{}`\n\nThis element is `display:block` by default, but you can set the `inline` attribute to make it\n`display:inline-block`.\n",
      "attributes": {
        "alwaysFloatLabel": {
          "type": "Boolean",
          "description": "\nSet to true to always float the floating label.\n       "
        },
        "attrForValue": {
          "type": "String",
          "description": "\nThe attribute to listen for value changes on.\n       "
        },
        "autoValidate": {
          "type": "Boolean",
          "description": "\nSet to true to auto-validate the input value when it changes.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nTrue if the input has focus.\n       "
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nTrue if the input is invalid. This property is set automatically when the input value\nchanges if auto-validating, or when the `iron-input-validate` event is heard from a child.\n       "
        },
        "noLabelFloat": {
          "type": "Boolean",
          "description": "\nSet to true to disable the floating label. The label disappears when the input value is\nnot null.\n       "
        },
        "updateAddons": {
          "type": "Function",
          "description": "\nCall this to update the state of add-ons.\n"
        },
        "_addons": {
          "type": "Array",
          "description": ""
        },
        "_boundOnBlur": {
          "type": "Function",
          "description": ""
        },
        "_boundOnFocus": {
          "type": "Function",
          "description": ""
        },
        "_boundOnInput": {
          "type": "Function",
          "description": ""
        },
        "_boundValueChanged": {
          "type": "Function",
          "description": ""
        },
        "_computeAddOnContentClass": {
          "type": "Function",
          "description": ""
        },
        "_computeInputContentClass": {
          "type": "Function",
          "description": ""
        },
        "_computeUnderlineClass": {
          "type": "Function",
          "description": ""
        },
        "_handleValue": {
          "type": "Function",
          "description": ""
        },
        "_handleValueAndAutoValidate": {
          "type": "Function",
          "description": ""
        },
        "_inputElement": {
          "type": "",
          "description": ""
        },
        "_inputElementValue": {
          "type": "",
          "description": ""
        },
        "_inputHasContent": {
          "type": "Boolean",
          "description": " in polyfill."
        },
        "_inputSelector": {
          "type": "String",
          "description": ""
        },
        "_invalidChanged": {
          "type": "Function",
          "description": ""
        },
        "_onAddonAttached": {
          "type": "Function",
          "description": ""
        },
        "_onBlur": {
          "type": "Function",
          "description": ""
        },
        "_onFocus": {
          "type": "Function",
          "description": ""
        },
        "_onInput": {
          "type": "Function",
          "description": ""
        },
        "_onIronInputValidate": {
          "type": "Function",
          "description": ""
        },
        "_onValueChanged": {
          "type": "Function",
          "description": ""
        },
        "_propertyForValue": {
          "type": "",
          "description": ""
        },
        "_valueChangedEvent": {
          "type": "",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-input-error": {
      "name": "paper-input-error",
      "description": "\n`&lt;paper-input-error&gt;` is an error message for use with `&lt;paper-input-container&gt;`. The error is\ndisplayed when the `&lt;paper-input-container&gt;` is `invalid`.\n\n    &lt;paper-input-container&gt;\n      &lt;input is=\"iron-input\" pattern=\"[0-9]*\"&gt;\n      &lt;paper-input-error&gt;Only numbers are allowed!&lt;/paper-input-error&gt;\n    &lt;/paper-input-container&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-invalid-color` | The foreground color of the error | `--error-color`\n`--paper-input-error`                   | Mixin applied to the error        | `{}`\n",
      "attributes": {
        "invalid": {
          "type": "Boolean",
          "description": "\nTrue if the error is showing.\n       "
        },
        "update": {
          "type": "Function",
          "description": "\nThis overrides the update function in PaperInputAddonBehavior.\n"
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "paper-textarea": {
      "name": "paper-textarea",
      "description": "\n`&lt;paper-textarea&gt;` is a multi-line text field with Material Design styling.\n\n    &lt;paper-textarea label=\"Textarea label\"&gt;&lt;/paper-textarea&gt;\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n",
      "attributes": {
        "accept": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `accept` property,\nused with type=file.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "allowedPattern": {
          "type": "String",
          "description": "\nSet this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `allowedPattern`\nproperty.\n       "
        },
        "alwaysFloatLabel": {
          "type": "Boolean",
          "description": "\nSet to true to always float the label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `alwaysFloatLabel` property.\n       "
        },
        "autocapitalize": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocapitalize` property.\n       "
        },
        "autocomplete": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocomplete` property.\n       "
        },
        "autocorrect": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autocorrect` property.\n       "
        },
        "autofocus": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autofocus` property.\n       "
        },
        "autosave": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `autosave` property,\nused with type=search.\n       "
        },
        "autoValidate": {
          "type": "Boolean",
          "description": "\nSet to true to auto-validate the input value. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `autoValidate` property.\n       "
        },
        "charCounter": {
          "type": "Boolean",
          "description": "\nSet to true to show a character counter.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nSet to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `&lt;paper-input-container&gt;`'s and the input's `disabled` property.\n       "
        },
        "errorMessage": {
          "type": "String",
          "description": "\nThe error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;paper-input-error&gt;`'s content, if using.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "inputElement": {
          "type": "",
          "description": "\nReturns a reference to the input element.\n     "
        },
        "inputmode": {
          "type": "String",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `inputmode` property.\n       "
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nReturns true if the value is invalid. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to both the\n`&lt;paper-input-container&gt;`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed automatically,\nwhich can clobber attempts to manage it manually.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "label": {
          "type": "String",
          "description": "\nThe label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`&lt;label&gt;`'s content and `hidden` property, e.g.\n`&lt;label hidden$=\"[[!label]]\"&gt;[[label]]&lt;/label&gt;` in your `template`\n       "
        },
        "list": {
          "type": "String",
          "description": "\nThe datalist of the input (if any). This should match the id of an existing `&lt;datalist&gt;`.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `list` property.\n       "
        },
        "max": {
          "type": "String",
          "description": "\nThe maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-1-1\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `max` property.\n       "
        },
        "maxlength": {
          "type": "Number",
          "description": "\nThe maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `maxlength` property.\n       "
        },
        "maxRows": {
          "type": "Number",
          "description": "\nThe maximum number of rows this element can grow to until it\nscrolls. 0 means no maximum.\n\n"
        },
        "min": {
          "type": "String",
          "description": "\nThe minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `min` property.\n       "
        },
        "minlength": {
          "type": "Number",
          "description": "\nThe minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `minlength` property.\n       "
        },
        "multiple": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`&lt;input is=\"iron-input\"&gt;`'s `multiple` property,\nused with type=file.\n       "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "noLabelFloat": {
          "type": "Boolean",
          "description": "\nSet to true to disable the floating label. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;paper-input-container&gt;`'s `noLabelFloat` property.\n       "
        },
        "pattern": {
          "type": "String",
          "description": "\nA pattern to validate the `input` with. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `pattern` property.\n       "
        },
        "placeholder": {
          "type": "String",
          "description": "\nA placeholder string in addition to the label. If this is set, the label will always float.\n       "
        },
        "preventInvalidInput": {
          "type": "Boolean",
          "description": "\nSet to true to prevent the user from entering invalid input. If you're\nusing PaperInputBehavior to  implement your own paper-input-like element,\nbind this to `&lt;input is=\"iron-input\"&gt;`'s `preventInvalidInput` property.\n       "
        },
        "readonly": {
          "type": "Boolean",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `readonly` property.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
        },
        "results": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `results` property,\nused with type=search.\n       "
        },
        "rows": {
          "type": "Number",
          "description": "\nThe initial number of rows.\n\n"
        },
        "size": {
          "type": "Number",
          "description": "\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `size` property.\n       "
        },
        "step": {
          "type": "String",
          "description": "\nLimits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `&lt;input is=\"iron-input\"&gt;`'s `step` property.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "type": {
          "type": "String",
          "description": "\nThe type of the input. The supported types are `text`, `number` and `password`.\nIf you're using PaperInputBehavior to implement your own paper-input-like element,\nbind this to the `&lt;input is=\"iron-input\"&gt;`'s `type` property.\n       "
        },
        "updateValueAndPreserveCaret": {
          "type": "Function",
          "description": "\nRestores the cursor to its original position after updating the value.\n"
        },
        "validate": {
          "type": "Function",
          "description": "\nValidates the input element and sets an error style if needed.\n\n"
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `&lt;input is=\"iron-input\"&gt;`'s `validator` property.\n       "
        },
        "value": {
          "type": "String",
          "description": "\nThe value for this element.\n       "
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_appendStringWithSpace": {
          "type": "Function",
          "description": ""
        },
        "_ariaDescribedBy": {
          "type": "String",
          "description": ""
        },
        "_ariaDescribedByChanged": {
          "type": "Function",
          "description": ""
        },
        "_ariaLabelledBy": {
          "type": "String",
          "description": ""
        },
        "_ariaLabelledByChanged": {
          "type": "Function",
          "description": ""
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeAlwaysFloatLabel": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_focusableElement": {
          "type": "",
          "description": ""
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": "\nForward focus to inputElement. Overriden from IronControlState.\n     "
        },
        "_handleAutoValidate": {
          "type": "Function",
          "description": "\nIf `autoValidate` is true, then validates the element.\n     "
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onAddonAttached": {
          "type": "Function",
          "description": ""
        },
        "_onChange": {
          "type": "Function",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onShiftTabDown": {
          "type": "Function",
          "description": "\nHandler that is called when a shift+tab keypress is detected by the menu.\n\n"
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAriaLabelledBy": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-item": {
      "name": "paper-item",
      "description": "\nMaterial design: [Lists](https://www.google.com/design/spec/components/lists.html)\n\n`&lt;paper-item&gt;` is an interactive list item. By default, it is a horizontal flexbox.\n\n    &lt;paper-item&gt;Item&lt;/paper-item&gt;\n\nUse this element with `&lt;paper-item-body&gt;` to make Material Design styled two-line and three-line\nitems.\n\n    &lt;paper-item&gt;\n      &lt;paper-item-body two-line&gt;\n        &lt;div&gt;Show your status&lt;/div&gt;\n        &lt;div secondary&gt;Your status is visible to everyone&lt;/div&gt;\n      &lt;/paper-item-body&gt;\n      &lt;iron-icon icon=\"warning\"&gt;&lt;/iron-icon&gt;\n    &lt;/paper-item&gt;\n\nTo use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will\nalready receive focus, you may want to prevent the anchor tag from receiving\nfocus as well by setting its tabindex to -1.\n\n    &lt;a href=\"https://www.polymer-project.org/\" tabindex=\"-1\"&gt;\n      &lt;paper-item raised&gt;Polymer Project&lt;/paper-item&gt;\n    &lt;/a&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property               | Description                                  | Default\n------------------------------|----------------------------------------------|----------\n`--paper-item-min-height`     | Minimum height of the item                   | `48px`\n`--paper-item`                | Mixin applied to the item                    | `{}`\n`--paper-item-selected-weight`| The font weight of a selected item           | `bold`\n`--paper-item-selected`       | Mixin applied to selected paper-items        | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items           | `--disabled-text-color`\n`--paper-item-disabled`       | Mixin applied to disabled paper-items        | `{}`\n`--paper-item-focused`        | Mixin applied to focused paper-items         | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n### Accessibility\n\nThis element has `role=\"listitem\"` by default. Depending on usage, it may be more appropriate to set\n`role=\"menuitem\"`, `role=\"menuitemcheckbox\"` or `role=\"menuitemradio\"`.\n\n    &lt;paper-item role=\"menuitemcheckbox\"&gt;\n      &lt;paper-item-body&gt;\n        Show your status\n      &lt;/paper-item-body&gt;\n      &lt;paper-checkbox&gt;&lt;/paper-checkbox&gt;\n    &lt;/paper-item&gt;\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nIf true, the button is a toggle and is currently in the active state.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "ariaActiveAttribute": {
          "type": "String",
          "description": "\nThe aria attribute to be set if the button is a toggle and in the\nactive state.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "pointerDown": {
          "type": "Boolean",
          "description": "\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       "
        },
        "pressed": {
          "type": "Boolean",
          "description": "\nIf true, the user is currently holding down the button.\n       "
        },
        "receivedFocusFromKeyboard": {
          "type": "Boolean",
          "description": "\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "toggles": {
          "type": "Boolean",
          "description": "\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
        },
        "_activeChanged": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_ariaActiveAttributeChanged": {
          "type": "Function",
          "description": ""
        },
        "_asyncClick": {
          "type": "Function",
          "description": " event handler to unwind before triggering another event"
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_changedButtonState": {
          "type": "Function",
          "description": " provide hook for follow-on behaviors to react to button-state"
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_controlStateChanged": {
          "type": "Function",
          "description": ""
        },
        "_detectKeyboardFocus": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_downHandler": {
          "type": "Function",
          "description": ""
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventRe": {
          "type": "object",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_pressedChanged": {
          "type": "Function",
          "description": " any of these changes are considered a change to button state"
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_spaceKeyDownHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_spaceKeyUpHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_tapHandler": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_upHandler": {
          "type": "Function",
          "description": ""
        },
        "_userActivate": {
          "type": "Function",
          "description": " 'change' events"
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-icon-item": {
      "name": "paper-icon-item",
      "description": "\n`&lt;paper-icon-item&gt;` is a convenience element to make an item with icon. It is an interactive list\nitem with a fixed-width icon area, according to Material Design. This is useful if the icons are of\nvarying widths, but you want the item bodies to line up. Use this like a `&lt;paper-item&gt;`. The child\nnode with the attribute `item-icon` is placed in the icon area.\n\n    &lt;paper-icon-item&gt;\n      &lt;iron-icon icon=\"favorite\" item-icon&gt;&lt;/iron-icon&gt;\n      Favorite\n    &lt;/paper-icon-item&gt;\n    &lt;paper-icon-item&gt;\n      &lt;div class=\"avatar\" item-icon&gt;&lt;/div&gt;\n      Avatar\n    &lt;/paper-icon-item&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property               | Description                                    | Default\n------------------------------|------------------------------------------------|----------\n`--paper-item-icon-width`     | Width of the icon area                         | `56px`\n`--paper-item-icon`           | Mixin applied to the icon area                 | `{}`\n`--paper-icon-item`           | Mixin applied to the item                      | `{}`\n`--paper-item-selected-weight`| The font weight of a selected item             | `bold`\n`--paper-item-selected`       | Mixin applied to selected paper-items                | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items             | `--disabled-text-color`\n`--paper-item-disabled`       | Mixin applied to disabled paper-items        | `{}`\n`--paper-item-focused`        | Mixin applied to focused paper-items         | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nIf true, the button is a toggle and is currently in the active state.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "ariaActiveAttribute": {
          "type": "String",
          "description": "\nThe aria attribute to be set if the button is a toggle and in the\nactive state.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "pointerDown": {
          "type": "Boolean",
          "description": "\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       "
        },
        "pressed": {
          "type": "Boolean",
          "description": "\nIf true, the user is currently holding down the button.\n       "
        },
        "receivedFocusFromKeyboard": {
          "type": "Boolean",
          "description": "\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "toggles": {
          "type": "Boolean",
          "description": "\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
        },
        "_activeChanged": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_ariaActiveAttributeChanged": {
          "type": "Function",
          "description": ""
        },
        "_asyncClick": {
          "type": "Function",
          "description": " event handler to unwind before triggering another event"
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_changedButtonState": {
          "type": "Function",
          "description": " provide hook for follow-on behaviors to react to button-state"
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_controlStateChanged": {
          "type": "Function",
          "description": ""
        },
        "_detectKeyboardFocus": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_downHandler": {
          "type": "Function",
          "description": ""
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventRe": {
          "type": "object",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_pressedChanged": {
          "type": "Function",
          "description": " any of these changes are considered a change to button state"
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_spaceKeyDownHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_spaceKeyUpHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_tapHandler": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_upHandler": {
          "type": "Function",
          "description": ""
        },
        "_userActivate": {
          "type": "Function",
          "description": " 'change' events"
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-item-body": {
      "name": "paper-item-body",
      "description": "\nUse `&lt;paper-item-body&gt;` in a `&lt;paper-item&gt;` or `&lt;paper-icon-item&gt;` to make two- or\nthree- line items. It is a flex item that is a vertical flexbox.\n\n    &lt;paper-item&gt;\n      &lt;paper-item-body two-line&gt;\n        &lt;div&gt;Show your status&lt;/div&gt;\n        &lt;div secondary&gt;Your status is visible to everyone&lt;/div&gt;\n      &lt;/paper-item-body&gt;\n    &lt;/paper-item&gt;\n\nThe child elements with the `secondary` attribute is given secondary text styling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height`   | Minimum height of a two-line item          | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item        | `88px`\n`--paper-item-body-secondary-color`       | Foreground color for the `secondary` area  | `--secondary-text-color`\n`--paper-item-body-secondary`             | Mixin applied to the `secondary` area      | `{}`\n\n",
      "attributes": {}
    },
    "paper-listbox": {
      "name": "paper-listbox",
      "description": "\nMaterial design: [Menus](https://www.google.com/design/spec/components/menus.html)\n\n`&lt;paper-listbox&gt;` implements an accessible listbox control with Material Design styling. The focused item\nis highlighted, and the selected item has bolded text.\n\n    &lt;paper-listbox&gt;\n      &lt;paper-item&gt;Item 1&lt;/paper-item&gt;\n      &lt;paper-item&gt;Item 2&lt;/paper-item&gt;\n    &lt;/paper-listbox&gt;\n\nAn initial selection can be specified with the `selected` attribute.\n\n    &lt;paper-listbox selected=\"0\"&gt;\n      &lt;paper-item&gt;Item 1&lt;/paper-item&gt;\n      &lt;paper-item&gt;Item 2&lt;/paper-item&gt;\n    &lt;/paper-listbox&gt;\n\nMake a multi-select listbox with the `multi` attribute. Items in a multi-select listbox can be deselected,\nand multiple item can be selected.\n\n    &lt;paper-listbox multi&gt;\n      &lt;paper-item&gt;Item 1&lt;/paper-item&gt;\n      &lt;paper-item&gt;Item 2&lt;/paper-item&gt;\n    &lt;/paper-listbox&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-listbox-background-color`   | Menu background color                                            | `--primary-background-color`\n`--paper-listbox-color`              | Menu foreground color                                            | `--primary-text-color`\n`--paper-listbox`                    | Mixin applied to the listbox                                        | `{}`\n\n### Accessibility\n\n`&lt;paper-listbox&gt;` has `role=\"listbox\"` by default. A multi-select listbox will also have\n`aria-multiselectable` set. It implements key bindings to navigate through the listbox with the up and\ndown arrow keys, esc to exit the listbox, and enter to activate a listbox item. Typing the first letter\nof a listbox item will also focus it.\n\n",
      "attributes": {
        "activateEvent": {
          "type": "String",
          "description": "\nThe event that fires from items when they are selected. Selectable\nwill listen for this event from items and update the selection state.\nSet to empty string to listen to no events.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "attrForItemTitle": {
          "type": "String",
          "description": "\nThe attribute to use on menu items to look up the item title. Typing the first\nletter of an item when the menu is open focuses that item. If unset, `textContent`\nwill be used.\n       "
        },
        "attrForSelected": {
          "type": "String",
          "description": "\nIf you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)\n       "
        },
        "focusedItem": {
          "type": "?Object",
          "description": "\nReturns the currently focused item.\n"
        },
        "forceSynchronousItemUpdate": {
          "type": "Function",
          "description": "\nForce a synchronous update of the `items` property.\n\nNOTE: Consider listening for the `iron-items-changed` event to respond to\nupdates to the set of selectable items after updates to the DOM list and\nselection state have been made.\n\nWARNING: If you are using this method, you should probably consider an\nalternate approach. Synchronously querying for items is potentially\nslow for many use cases. The `items` property will update asynchronously\non its own to reflect selectable items in the DOM.\n     "
        },
        "indexOf": {
          "type": "Function",
          "description": "\nReturns the index of the given item.\n\n"
        },
        "items": {
          "type": "Array",
          "description": "\nThe list of items from which a selection can be made.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "multi": {
          "type": "Boolean",
          "description": "\nIf true, multiple selections are allowed.\n       "
        },
        "multiChanged": {
          "type": "Function",
          "description": ""
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "select": {
          "type": "Function",
          "description": "\nSelects the given value. If the `multi` property is true, then the selected state of the\n`value` will be toggled; otherwise the `value` will be selected.\n\n"
        },
        "selectable": {
          "type": "string",
          "description": "\nThis is a CSS selector string.  If this is set, only items that match the CSS selector\nare selectable.\n       "
        },
        "selected": {
          "type": "(string|number)",
          "description": "\nGets or sets the selected element. The default is to use the index of the item.\n"
        },
        "selectedAttribute": {
          "type": "String",
          "description": "\nThe attribute to set on elements when selected.\n       "
        },
        "selectedClass": {
          "type": "String",
          "description": "\nThe class to set on elements when selected.\n       "
        },
        "selectedItem": {
          "type": "?Object",
          "description": "\nReturns the currently selected item.\n\n"
        },
        "selectedItems": {
          "type": "Array",
          "description": "\nReturns an array of currently selected items.\n       "
        },
        "selectedValues": {
          "type": "Array",
          "description": "\nGets or sets the selected elements. This is used instead of `selected` when `multi`\nis true.\n       "
        },
        "selectNext": {
          "type": "Function",
          "description": "\nSelects the next item.\n\n"
        },
        "selectPrevious": {
          "type": "Function",
          "description": "\nSelects the previous item.\n\n"
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "_activateEventChanged": {
          "type": "Function",
          "description": ""
        },
        "_activateHandler": {
          "type": "Function",
          "description": " override _activateHandler"
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_addListener": {
          "type": "Function",
          "description": ""
        },
        "_applySelection": {
          "type": "Function",
          "description": "\nMutates items in the menu based on provided selection details, so that\nall items correctly reflect selection state.\n\n"
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_excludedLocalNames": {
          "type": "Object",
          "description": "\nThe set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list.\n\n"
        },
        "_filterItem": {
          "type": "Function",
          "description": ""
        },
        "_focusedItemChanged": {
          "type": "Function",
          "description": "\nDiscretely updates tabindex values among menu items as the focused item\nchanges.\n\n"
        },
        "_focusNext": {
          "type": "Function",
          "description": "\nFocuses the next item (relative to the currently focused item) in the\nmenu.\n     "
        },
        "_focusPrevious": {
          "type": "Function",
          "description": "\nFocuses the previous item (relative to the currently focused item) in the\nmenu.\n     "
        },
        "_focusWithKeyboardEvent": {
          "type": "Function",
          "description": "\nGiven a KeyboardEvent, this method will focus the appropriate item in the\nmenu (if there is a relevant item, and it is possible to focus it).\n\n"
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_indexToValue": {
          "type": "Function",
          "description": ""
        },
        "_itemActivate": {
          "type": "Function",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_observeItems": {
          "type": "Function",
          "description": " observe items change under the given node."
        },
        "_onDownKey": {
          "type": "Function",
          "description": "\nHandler that is called when the down key is pressed.\n\n"
        },
        "_onEscKey": {
          "type": "Function",
          "description": "\nHandler that is called when the esc key is pressed.\n\n"
        },
        "_onFocus": {
          "type": "Function",
          "description": "\nHandler that is called when the menu receives focus.\n\n"
        },
        "_onIronItemsChanged": {
          "type": "Function",
          "description": "\nA handler that responds to mutation changes related to the list of items\nin the menu.\n\n"
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onKeydown": {
          "type": "Function",
          "description": "\nHandler that is called when a keydown event is detected.\n\n"
        },
        "_onShiftTabDown": {
          "type": "Function",
          "description": "\nHandler that is called when a shift+tab keypress is detected by the menu.\n\n"
        },
        "_onUpKey": {
          "type": "Function",
          "description": "\nHandler that is called when the up key is pressed.\n\n"
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_removeListener": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_resetTabindices": {
          "type": "Function",
          "description": "\nResets all tabindex attributes to the appropriate value based on the\ncurrent selection state. The appropriate value is `0` (focusable) for\nthe default selected item, and `-1` (not keyboard focusable) for all\nother items.\n     "
        },
        "_selectionChange": {
          "type": "Function",
          "description": ""
        },
        "_selectMulti": {
          "type": "Function",
          "description": ""
        },
        "_selectSelected": {
          "type": "Function",
          "description": ""
        },
        "_shouldUpdateSelection": {
          "type": "",
          "description": ""
        },
        "_toggleSelected": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAttrForSelected": {
          "type": "Function",
          "description": ""
        },
        "_updateItems": {
          "type": "Function",
          "description": ""
        },
        "_updateMultiselectable": {
          "type": "Function",
          "description": "\nSets appropriate ARIA based on whether or not the menu is meant to be\nmulti-selectable.\n\n"
        },
        "_updateSelected": {
          "type": "Function",
          "description": ""
        },
        "_valueForItem": {
          "type": "Function",
          "description": ""
        },
        "_valuesToItems": {
          "type": "Function",
          "description": ""
        },
        "_valueToIndex": {
          "type": "Function",
          "description": ""
        },
        "_valueToItem": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-material": {
      "name": "paper-material",
      "description": "\nMaterial design: [Cards](https://www.google.com/design/spec/components/cards.html)\n\n`paper-material` is a container that renders two shadows on top of each other to\ncreate the effect of a lifted piece of paper.\n\nExample:\n\n    &lt;paper-material elevation=\"1\"&gt;\n      ... content ...\n    &lt;/paper-material&gt;\n\n",
      "attributes": {
        "animated": {
          "type": "Boolean",
          "description": "\nSet this to true to animate the shadow when setting a new\n`elevation` value.\n\n"
        },
        "elevation": {
          "type": "Number",
          "description": "\nThe z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.\n\n"
        }
      }
    },
    "paper-menu": {
      "name": "paper-menu",
      "description": "\nMaterial design: [Menus](https://www.google.com/design/spec/components/menus.html)\n\n`&lt;paper-menu&gt;` implements an accessible menu control with Material Design styling. The focused item\nis highlighted, and the selected item has bolded text.\n\n    &lt;paper-menu&gt;\n      &lt;paper-item&gt;Item 1&lt;/paper-item&gt;\n      &lt;paper-item&gt;Item 2&lt;/paper-item&gt;\n    &lt;/paper-menu&gt;\n\nAn initial selection can be specified with the `selected` attribute.\n\n    &lt;paper-menu selected=\"0\"&gt;\n      &lt;paper-item&gt;Item 1&lt;/paper-item&gt;\n      &lt;paper-item&gt;Item 2&lt;/paper-item&gt;\n    &lt;/paper-menu&gt;\n\nMake a multi-select menu with the `multi` attribute. Items in a multi-select menu can be deselected,\nand multiple items can be selected.\n\n    &lt;paper-menu multi&gt;\n      &lt;paper-item&gt;Item 1&lt;/paper-item&gt;\n      &lt;paper-item&gt;Item 2&lt;/paper-item&gt;\n    &lt;/paper-menu&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-menu-background-color`   | Menu background color                                            | `--primary-background-color`\n`--paper-menu-color`              | Menu foreground color                                            | `--primary-text-color`\n`--paper-menu-disabled-color`     | Foreground color for a disabled item                             | `--disabled-text-color`\n`--paper-menu`                    | Mixin applied to the menu                                        | `{}`\n`--paper-menu-selected-item`      | Mixin applied to the selected item                               | `{}`\n`--paper-menu-focused-item`       | Mixin applied to the focused item                                | `{}`\n`--paper-menu-focused-item-after` | Mixin applied to the ::after pseudo-element for the focused item | `{}`\n\n### Accessibility\n\n`&lt;paper-menu&gt;` has `role=\"menu\"` by default. A multi-select menu will also have\n`aria-multiselectable` set. It implements key bindings to navigate through the menu with the up and\ndown arrow keys, esc to exit the menu, and enter to activate a menu item. Typing the first letter\nof a menu item will also focus it.\n\n",
      "attributes": {
        "activateEvent": {
          "type": "String",
          "description": "\nThe event that fires from items when they are selected. Selectable\nwill listen for this event from items and update the selection state.\nSet to empty string to listen to no events.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "attrForItemTitle": {
          "type": "String",
          "description": "\nThe attribute to use on menu items to look up the item title. Typing the first\nletter of an item when the menu is open focuses that item. If unset, `textContent`\nwill be used.\n       "
        },
        "attrForSelected": {
          "type": "String",
          "description": "\nIf you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)\n       "
        },
        "focusedItem": {
          "type": "?Object",
          "description": "\nReturns the currently focused item.\n"
        },
        "forceSynchronousItemUpdate": {
          "type": "Function",
          "description": "\nForce a synchronous update of the `items` property.\n\nNOTE: Consider listening for the `iron-items-changed` event to respond to\nupdates to the set of selectable items after updates to the DOM list and\nselection state have been made.\n\nWARNING: If you are using this method, you should probably consider an\nalternate approach. Synchronously querying for items is potentially\nslow for many use cases. The `items` property will update asynchronously\non its own to reflect selectable items in the DOM.\n     "
        },
        "indexOf": {
          "type": "Function",
          "description": "\nReturns the index of the given item.\n\n"
        },
        "items": {
          "type": "Array",
          "description": "\nThe list of items from which a selection can be made.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "multi": {
          "type": "Boolean",
          "description": "\nIf true, multiple selections are allowed.\n       "
        },
        "multiChanged": {
          "type": "Function",
          "description": ""
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "select": {
          "type": "Function",
          "description": "\nSelects the given value. If the `multi` property is true, then the selected state of the\n`value` will be toggled; otherwise the `value` will be selected.\n\n"
        },
        "selectable": {
          "type": "string",
          "description": "\nThis is a CSS selector string.  If this is set, only items that match the CSS selector\nare selectable.\n       "
        },
        "selected": {
          "type": "(string|number)",
          "description": "\nGets or sets the selected element. The default is to use the index of the item.\n"
        },
        "selectedAttribute": {
          "type": "String",
          "description": "\nThe attribute to set on elements when selected.\n       "
        },
        "selectedClass": {
          "type": "String",
          "description": "\nThe class to set on elements when selected.\n       "
        },
        "selectedItem": {
          "type": "?Object",
          "description": "\nReturns the currently selected item.\n\n"
        },
        "selectedItems": {
          "type": "Array",
          "description": "\nReturns an array of currently selected items.\n       "
        },
        "selectedValues": {
          "type": "Array",
          "description": "\nGets or sets the selected elements. This is used instead of `selected` when `multi`\nis true.\n       "
        },
        "selectNext": {
          "type": "Function",
          "description": "\nSelects the next item.\n\n"
        },
        "selectPrevious": {
          "type": "Function",
          "description": "\nSelects the previous item.\n\n"
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "_activateEventChanged": {
          "type": "Function",
          "description": ""
        },
        "_activateHandler": {
          "type": "Function",
          "description": " override _activateHandler"
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_addListener": {
          "type": "Function",
          "description": ""
        },
        "_applySelection": {
          "type": "Function",
          "description": "\nMutates items in the menu based on provided selection details, so that\nall items correctly reflect selection state.\n\n"
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_excludedLocalNames": {
          "type": "Object",
          "description": "\nThe set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list.\n\n"
        },
        "_filterItem": {
          "type": "Function",
          "description": ""
        },
        "_focusedItemChanged": {
          "type": "Function",
          "description": "\nDiscretely updates tabindex values among menu items as the focused item\nchanges.\n\n"
        },
        "_focusNext": {
          "type": "Function",
          "description": "\nFocuses the next item (relative to the currently focused item) in the\nmenu.\n     "
        },
        "_focusPrevious": {
          "type": "Function",
          "description": "\nFocuses the previous item (relative to the currently focused item) in the\nmenu.\n     "
        },
        "_focusWithKeyboardEvent": {
          "type": "Function",
          "description": "\nGiven a KeyboardEvent, this method will focus the appropriate item in the\nmenu (if there is a relevant item, and it is possible to focus it).\n\n"
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_indexToValue": {
          "type": "Function",
          "description": ""
        },
        "_itemActivate": {
          "type": "Function",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_observeItems": {
          "type": "Function",
          "description": " observe items change under the given node."
        },
        "_onDownKey": {
          "type": "Function",
          "description": "\nHandler that is called when the down key is pressed.\n\n"
        },
        "_onEscKey": {
          "type": "Function",
          "description": "\nHandler that is called when the esc key is pressed.\n\n"
        },
        "_onFocus": {
          "type": "Function",
          "description": "\nHandler that is called when the menu receives focus.\n\n"
        },
        "_onIronItemsChanged": {
          "type": "Function",
          "description": "\nA handler that responds to mutation changes related to the list of items\nin the menu.\n\n"
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onKeydown": {
          "type": "Function",
          "description": "\nHandler that is called when a keydown event is detected.\n\n"
        },
        "_onShiftTabDown": {
          "type": "Function",
          "description": "\nHandler that is called when a shift+tab keypress is detected by the menu.\n\n"
        },
        "_onUpKey": {
          "type": "Function",
          "description": "\nHandler that is called when the up key is pressed.\n\n"
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_removeListener": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_resetTabindices": {
          "type": "Function",
          "description": "\nResets all tabindex attributes to the appropriate value based on the\ncurrent selection state. The appropriate value is `0` (focusable) for\nthe default selected item, and `-1` (not keyboard focusable) for all\nother items.\n     "
        },
        "_selectionChange": {
          "type": "Function",
          "description": ""
        },
        "_selectMulti": {
          "type": "Function",
          "description": ""
        },
        "_selectSelected": {
          "type": "Function",
          "description": ""
        },
        "_shouldUpdateSelection": {
          "type": "",
          "description": ""
        },
        "_toggleSelected": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAttrForSelected": {
          "type": "Function",
          "description": ""
        },
        "_updateItems": {
          "type": "Function",
          "description": ""
        },
        "_updateMultiselectable": {
          "type": "Function",
          "description": "\nSets appropriate ARIA based on whether or not the menu is meant to be\nmulti-selectable.\n\n"
        },
        "_updateSelected": {
          "type": "Function",
          "description": ""
        },
        "_valueForItem": {
          "type": "Function",
          "description": ""
        },
        "_valuesToItems": {
          "type": "Function",
          "description": ""
        },
        "_valueToIndex": {
          "type": "Function",
          "description": ""
        },
        "_valueToItem": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-submenu": {
      "name": "paper-submenu",
      "description": "\n`&lt;paper-submenu&gt;` is a nested menu inside of a parent `&lt;paper-menu&gt;`. It\nconsists of a trigger that expands or collapses another `&lt;paper-menu&gt;`:\n\n    &lt;paper-menu&gt;\n      &lt;paper-submenu&gt;\n        &lt;paper-item class=\"menu-trigger\"&gt;Topics&lt;/paper-item&gt;\n        &lt;paper-menu class=\"menu-content\"&gt;\n          &lt;paper-item&gt;Topic 1&lt;/paper-item&gt;\n          &lt;paper-item&gt;Topic 2&lt;/paper-item&gt;\n          &lt;paper-item&gt;Topic 3&lt;/paper-item&gt;\n        &lt;/paper-menu&gt;\n      &lt;/paper-submenu&gt;\n      &lt;paper-submenu&gt;\n        &lt;paper-item class=\"menu-trigger\"&gt;Faves&lt;/paper-item&gt;\n        &lt;paper-menu class=\"menu-content\"&gt;\n          &lt;paper-item&gt;Fave 1&lt;/paper-item&gt;\n          &lt;paper-item&gt;Fave 2&lt;/paper-item&gt;\n        &lt;/paper-menu&gt;\n      &lt;/paper-submenu&gt;\n      &lt;paper-submenu disabled&gt;\n        &lt;paper-item class=\"menu-trigger\"&gt;Unavailable&lt;/paper-item&gt;\n        &lt;paper-menu class=\"menu-content\"&gt;\n          &lt;paper-item&gt;Disabled 1&lt;/paper-item&gt;\n          &lt;paper-item&gt;Disabled 2&lt;/paper-item&gt;\n        &lt;/paper-menu&gt;\n      &lt;/paper-submenu&gt;\n    &lt;/paper-menu&gt;\n\nJust like in `&lt;paper-menu&gt;`, the focused item is highlighted, and the selected\nitem has bolded text. Please see the `&lt;paper-menu&gt;` docs for which attributes\n(such as `multi` and `selected`), and styling options are available for the\n`menu-content` menu.\n\n",
      "attributes": {
        "close": {
          "type": "Function",
          "description": "\nCollapse the submenu content.\n       "
        },
        "dettached": {
          "type": "Function",
          "description": ""
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "open": {
          "type": "Function",
          "description": "\nExpand the submenu content.\n       "
        },
        "opened": {
          "type": "Boolean",
          "description": "\nSet opened to true to show the collapse element and to false to hide it.\n\n"
        },
        "toggle": {
          "type": "Function",
          "description": "\nToggle the submenu.\n       "
        },
        "__content": {
          "type": "",
          "description": ""
        },
        "__parent": {
          "type": "",
          "description": ""
        },
        "__trigger": {
          "type": "",
          "description": ""
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": "\nIf the dropdown is open when disabled becomes true, close the\ndropdown.\n\n"
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onFocus": {
          "type": "Function",
          "description": "\nHandler that is called when the menu receives focus.\n\n"
        },
        "_onParentIronActivate": {
          "type": "Function",
          "description": "\nA handler that is called when `iron-activate` is fired.\n\n"
        },
        "_onTap": {
          "type": "Function",
          "description": "\nA handler that is called when the trigger is tapped.\n       "
        },
        "_openedChanged": {
          "type": "Function",
          "description": "\nToggles the submenu content when the trigger is tapped.\n       "
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-menu-button": {
      "name": "paper-menu-button",
      "description": "\nMaterial design: [Dropdown buttons](https://www.google.com/design/spec/components/buttons.html#buttons-dropdown-buttons)\n\n`paper-menu-button` allows one to compose a designated \"trigger\" element with\nanother element that represents \"content\", to create a dropdown menu that\ndisplays the \"content\" when the \"trigger\" is clicked.\n\nThe child element with the class `dropdown-trigger` will be used as the\n\"trigger\" element. The child element with the class `dropdown-content` will be\nused as the \"content\" element.\n\nThe `paper-menu-button` is sensitive to its content's `iron-select` events. If\nthe \"content\" element triggers an `iron-select` event, the `paper-menu-button`\nwill close automatically.\n\nExample:\n\n    &lt;paper-menu-button&gt;\n      &lt;paper-icon-button icon=\"menu\" class=\"dropdown-trigger\"&gt;&lt;/paper-icon-button&gt;\n      &lt;paper-menu class=\"dropdown-content\"&gt;\n        &lt;paper-item&gt;Share&lt;/paper-item&gt;\n        &lt;paper-item&gt;Settings&lt;/paper-item&gt;\n        &lt;paper-item&gt;Help&lt;/paper-item&gt;\n      &lt;/paper-menu&gt;\n    &lt;/paper-menu-button&gt;\n\n### Styling\n\nThe following custom properties and mixins are also available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-menu-button-dropdown-background` | Background color of the paper-menu-button dropdown | `#fff`\n`--paper-menu-button` | Mixin applied to the paper-menu-button | `{}`\n`--paper-menu-button-disabled` | Mixin applied to the paper-menu-button when disabled | `{}`\n`--paper-menu-button-dropdown` | Mixin applied to the paper-menu-button dropdown | `{}`\n`--paper-menu-button-content` | Mixin applied to the paper-menu-button content | `{}`\n\n",
      "attributes": {
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "close": {
          "type": "Function",
          "description": "\nHide the dropdown content.\n       "
        },
        "closeAnimationConfig": {
          "type": "Object",
          "description": "\nAn animation config. If provided, this will be used to animate the\nclosing of the dropdown.\n         "
        },
        "contentElement": {
          "type": "",
          "description": "\nThe content element that is contained by the menu button, if any.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "horizontalAlign": {
          "type": "String",
          "description": "\nThe orientation against which to align the menu dropdown\nhorizontally relative to the dropdown trigger.\n         "
        },
        "horizontalOffset": {
          "type": "Number",
          "description": "\nA pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`. Use a negative value to offset to the\nleft, or a positive value to offset to the right.\n         "
        },
        "ignoreSelect": {
          "type": "Boolean",
          "description": "\nSet to true to disable automatically closing the dropdown after\na selection has been made.\n         "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "noAnimations": {
          "type": "Boolean",
          "description": "\nSet to true to disable animations when opening and closing the\ndropdown.\n         "
        },
        "open": {
          "type": "Function",
          "description": "\nMake the dropdown content appear as an overlay positioned relative\nto the dropdown trigger.\n       "
        },
        "openAnimationConfig": {
          "type": "Object",
          "description": "\nAn animation config. If provided, this will be used to animate the\nopening of the dropdown.\n         "
        },
        "opened": {
          "type": "Boolean",
          "description": "\nTrue if the content is currently displayed.\n         "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "verticalAlign": {
          "type": "String",
          "description": "\nThe orientation against which to align the menu dropdown\nvertically relative to the dropdown trigger.\n         "
        },
        "verticalOffset": {
          "type": "Number",
          "description": "\nA pixel value that will be added to the position calculated for the\ngiven `verticalAlign`. Use a negative value to offset towards the\ntop, or a positive value to offset towards the bottom.\n         "
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": "\nIf the dropdown is open when disabled becomes true, close the\ndropdown.\n\n"
        },
        "_dropdownContent": {
          "type": "Object",
          "description": "\nThis is the element intended to be bound as the focus target\nfor the `iron-dropdown` contained by `paper-menu-button`.\n         "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onIronSelect": {
          "type": "Function",
          "description": "\nWhen an `iron-select` event is received, the dropdown should\nautomatically close on the assumption that a value has been chosen.\n\n"
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_openedChanged": {
          "type": "Function",
          "description": "\nWhen the dropdown opens, the `paper-menu-button` fires `paper-open`.\nWhen the dropdown closes, the `paper-menu-button` fires `paper-close`.\n\n"
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-menu-grow-height-animation": {
      "name": "paper-menu-grow-height-animation",
      "description": "\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-menu-grow-width-animation": {
      "name": "paper-menu-grow-width-animation",
      "description": "\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-menu-shrink-width-animation": {
      "name": "paper-menu-shrink-width-animation",
      "description": "\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-menu-shrink-height-animation": {
      "name": "paper-menu-shrink-height-animation",
      "description": "\n",
      "attributes": {
        "animationTiming": {
          "type": "Object",
          "description": "\nDefines the animation timing.\n       "
        },
        "complete": {
          "type": "Function",
          "description": "\nCalled when the animation finishes.\n     "
        },
        "setPrefixedProperty": {
          "type": "Function",
          "description": "\nSets `transform` and `transformOrigin` properties along with the prefixed versions.\n     "
        },
        "timingFromConfig": {
          "type": "Function",
          "description": "\nReturns the animation timing by mixing in properties from `config` to the defaults defined\nby the animation.\n     "
        },
        "configure": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-progress": {
      "name": "paper-progress",
      "description": "\nMaterial design: [Progress & activity](https://www.google.com/design/spec/components/progress-activity.html)\n\nThe progress bars are for situations where the percentage completed can be\ndetermined. They give users a quick sense of how much longer an operation\nwill take.\n\nExample:\n\n    &lt;paper-progress value=\"10\"&gt;&lt;/paper-progress&gt;\n\nThere is also a secondary progress which is useful for displaying intermediate\nprogress, such as the buffer level during a streaming playback progress bar.\n\nExample:\n\n    &lt;paper-progress value=\"10\" secondary-progress=\"30\"&gt;&lt;/paper-progress&gt;\n\n### Styling progress bar:\n\nTo change the active progress bar color:\n\n    paper-progress {\n       --paper-progress-active-color: #e91e63;\n    }\n\nTo change the secondary progress bar color:\n\n    paper-progress {\n      --paper-progress-secondary-color: #f8bbd0;\n    }\n\nTo change the progress bar background color:\n\n    paper-progress {\n      --paper-progress-container-color: #64ffda;\n    }\n\nAdd the class `transiting` to a paper-progress to animate the progress bar when\nthe value changed. You can also customize the transition:\n\n    paper-progress {\n      --paper-progress-transition-duration: 0.08s;\n      --paper-progress-transition-timing-function: ease;\n      --paper-progress-transition-transition-delay: 0s;\n    }\n\nThe following mixins are available for styling:\n\nCustom property                               | Description                                 | Default\n----------------------------------------------|---------------------------------------------|--------------\n`--paper-progress-container-color`            | Mixin applied to container                  | `--google-grey-300`\n`--paper-progress-transition-duration`        | Duration of the transition                  | `0.008s`\n`--paper-progress-transition-timing-function` | The timing function for the transition      | `ease`\n`--paper-progress-transition-delay`           | delay for the transition                    | `0s`\n`--paper-progress-active-color`               | The color of the active bar                 | `--google-green-500`\n`--paper-progress-secondary-color`            | The color of the secondary bar              | `--google-green-100`\n`--paper-progress-disabled-active-color`      | The color of the active bar if disabled     | `--google-grey-500`\n`--paper-progress-disabled-secondary-color`   | The color of the secondary bar if disabled  | `--google-grey-300`\n`--paper-progress-height`                     | The height of the progress bar              | `4px`\n\n",
      "attributes": {
        "disabled": {
          "type": "Boolean",
          "description": "\nTrue if the progress is disabled.\n       "
        },
        "indeterminate": {
          "type": "Boolean",
          "description": "\nUse an indeterminate progress indicator.\n       "
        },
        "max": {
          "type": "Number",
          "description": "\nThe number that indicates the maximum value of the range.\n     "
        },
        "min": {
          "type": "Number",
          "description": "\nThe number that indicates the minimum value of the range.\n     "
        },
        "ratio": {
          "type": "Number",
          "description": "\nReturns the ratio of the value.\n     "
        },
        "secondaryProgress": {
          "type": "Number",
          "description": "\nThe number that represents the current secondary progress.\n       "
        },
        "secondaryRatio": {
          "type": "Number",
          "description": "\nThe secondary ratio\n       "
        },
        "step": {
          "type": "Number",
          "description": "\nSpecifies the value granularity of the range's value.\n     "
        },
        "value": {
          "type": "Number",
          "description": "\nThe number that represents the current value.\n     "
        },
        "_calcRatio": {
          "type": "Function",
          "description": ""
        },
        "_calcStep": {
          "type": "Function",
          "description": ""
        },
        "_clampValue": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_hideSecondaryProgress": {
          "type": "Function",
          "description": ""
        },
        "_mainRatioChanged": {
          "type": "Function",
          "description": ""
        },
        "_progressChanged": {
          "type": "Function",
          "description": ""
        },
        "_toggleIndeterminate": {
          "type": "Function",
          "description": ""
        },
        "_transformProgress": {
          "type": "Function",
          "description": ""
        },
        "_update": {
          "type": "Function",
          "description": ""
        },
        "_validateValue": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "paper-radio-button": {
      "name": "paper-radio-button",
      "description": "\nMaterial design: [Radio button](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-radio-button)\n\n`paper-radio-button` is a button that can be either checked or unchecked.\nUser can tap the radio button to check or uncheck it.\n\nUse a `&lt;paper-radio-group&gt;` to group a set of radio buttons.  When radio buttons\nare inside a radio group, exactly one radio button in the group can be checked\nat any time.\n\nExample:\n\n    &lt;paper-radio-button&gt;&lt;/paper-radio-button&gt;\n    &lt;paper-radio-button&gt;Item label&lt;/paper-radio-button&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-radio-button-unchecked-background-color` | Radio button background color when the input is not checked | `transparent`\n`--paper-radio-button-unchecked-color` | Radio button color when the input is not checked | `--primary-text-color`\n`--paper-radio-button-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--primary-text-color`\n`--paper-radio-button-checked-color` | Radio button color when the input is checked | `--primary-color`\n`--paper-radio-button-checked-ink-color` | Selected/focus ripple color when the input is checked | `--primary-color`\n`--paper-radio-button-label-color` | Label color | `--primary-text-color`\n`--paper-radio-button-label-spacing` | Spacing between the label and the button | `10px`\n\nThis element applies the mixin `--paper-font-common-base` but does not import `paper-styles/typography.html`.\nIn order to apply the `Roboto` font to this element, make sure you've imported `paper-styles/typography.html`.\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nIf true, the button is a toggle and is currently in the active state.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "ariaActiveAttribute": {
          "type": "String",
          "description": "\nFired when the checked state changes.\n\n"
        },
        "checked": {
          "type": "Boolean",
          "description": "\nGets or sets the state, `true` is checked and `false` is unchecked.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "ensureRipple": {
          "type": "Function",
          "description": "\nEnsures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.\n"
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "getRipple": {
          "type": "Function",
          "description": "\nReturns the `&lt;paper-ripple&gt;` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.\n     "
        },
        "hasRipple": {
          "type": "Function",
          "description": "\nReturns true if this element currently contains a ripple effect.\n"
        },
        "hasValidator": {
          "type": "Function",
          "description": "\n"
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nTrue if the last call to `validate` is invalid.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "noink": {
          "type": "Boolean",
          "description": "\nIf true, the element will not produce a ripple effect when interacted\nwith via the pointer.\n       "
        },
        "pointerDown": {
          "type": "Boolean",
          "description": "\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       "
        },
        "pressed": {
          "type": "Boolean",
          "description": "\nIf true, the user is currently holding down the button.\n       "
        },
        "receivedFocusFromKeyboard": {
          "type": "Boolean",
          "description": "\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "toggles": {
          "type": "Boolean",
          "description": "\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
        },
        "validate": {
          "type": "Function",
          "description": "\nReturns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.\n\n"
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use.\n       "
        },
        "validatorType": {
          "type": "String",
          "description": "\nNamespace for this validator.\n       "
        },
        "value": {
          "type": "String",
          "description": " Overriden from Polymer.IronFormElementBehavior "
        },
        "_activeChanged": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_ariaActiveAttributeChanged": {
          "type": "Function",
          "description": ""
        },
        "_asyncClick": {
          "type": "Function",
          "description": " event handler to unwind before triggering another event"
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_buttonStateChanged": {
          "type": "Function",
          "description": "\nSynchronizes the element's `active` and `checked` state.\n     "
        },
        "_changedButtonState": {
          "type": "Function",
          "description": " provide hook for follow-on behaviors to react to button-state"
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_checkedChanged": {
          "type": "Function",
          "description": "\nSynchronizes the element's checked state with its ripple effect.\n     "
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_controlStateChanged": {
          "type": "Function",
          "description": ""
        },
        "_createRipple": {
          "type": "Function",
          "description": ""
        },
        "_detectKeyboardFocus": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_downHandler": {
          "type": "Function",
          "description": "\nIn addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_focusedChanged": {
          "type": "Function",
          "description": ""
        },
        "_getValidity": {
          "type": "Function",
          "description": "\nReturns false if the element is required and not checked, and true otherwise.\n"
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_invalidChanged": {
          "type": "Function",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventRe": {
          "type": "object",
          "description": ""
        },
        "_noinkChanged": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_pressedChanged": {
          "type": "Function",
          "description": " any of these changes are considered a change to button state"
        },
        "_requiredChanged": {
          "type": "Function",
          "description": "\nUpdate the aria-required label when `required` is changed.\n     "
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_rippleContainer": {
          "type": "(Element|undefined)",
          "description": "\n"
        },
        "_spaceKeyDownHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_spaceKeyUpHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_tapHandler": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_upHandler": {
          "type": "Function",
          "description": ""
        },
        "_userActivate": {
          "type": "Function",
          "description": " 'change' events"
        },
        "_validator": {
          "type": "",
          "description": ""
        },
        "_validatorMeta": {
          "type": "Object",
          "description": ""
        },
        "_valueChanged": {
          "type": "Function",
          "description": "\nReset value to 'on' if it is set to `undefined`.\n     "
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-radio-group": {
      "name": "paper-radio-group",
      "description": "\nMaterial design: [Radio button](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-radio-button)\n\n`paper-radio-group` allows user to select at most one radio button from a set.\nChecking one radio button that belongs to a radio group unchecks any\npreviously checked radio button within the same group. Use\n`selected` to get or set the selected radio button.\n\nThe &lt;paper-radio-buttons&gt; inside the group must have the `name` attribute\nset.\n\nExample:\n\n    &lt;paper-radio-group selected=\"small\"&gt;\n      &lt;paper-radio-button name=\"small\"&gt;Small&lt;/paper-radio-button&gt;\n      &lt;paper-radio-button name=\"medium\"&gt;Medium&lt;/paper-radio-button&gt;\n      &lt;paper-radio-button name=\"large\"&gt;Large&lt;/paper-radio-button&gt;\n    &lt;/paper-radio-group&gt;\n\nRadio-button-groups can be made optional, and allow zero buttons to be selected:\n\n    &lt;paper-radio-group selected=\"small\" allow-empty-selection&gt;\n      &lt;paper-radio-button name=\"small\"&gt;Small&lt;/paper-radio-button&gt;\n      &lt;paper-radio-button name=\"medium\"&gt;Medium&lt;/paper-radio-button&gt;\n      &lt;paper-radio-button name=\"large\"&gt;Large&lt;/paper-radio-button&gt;\n    &lt;/paper-radio-group&gt;\n\nSee &lt;a href=\"paper-radio-button\"&gt;paper-radio-button&lt;/a&gt; for more\ninformation about `paper-radio-button`.\n\n",
      "attributes": {
        "activateEvent": {
          "type": "String",
          "description": "\nThe event that fires from items when they are selected. Selectable\nwill listen for this event from items and update the selection state.\nSet to empty string to listen to no events.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "allowEmptySelection": {
          "type": "Boolean",
          "description": "\nIf true, radio-buttons can be deselected\n       "
        },
        "attrForSelected": {
          "type": "String",
          "description": "\nOverriden from Polymer.IronSelectableBehavior\n       "
        },
        "forceSynchronousItemUpdate": {
          "type": "Function",
          "description": "\nForce a synchronous update of the `items` property.\n\nNOTE: Consider listening for the `iron-items-changed` event to respond to\nupdates to the set of selectable items after updates to the DOM list and\nselection state have been made.\n\nWARNING: If you are using this method, you should probably consider an\nalternate approach. Synchronously querying for items is potentially\nslow for many use cases. The `items` property will update asynchronously\non its own to reflect selectable items in the DOM.\n     "
        },
        "indexOf": {
          "type": "Function",
          "description": "\nReturns the index of the given item.\n\n"
        },
        "items": {
          "type": "Array",
          "description": "\nThe list of items from which a selection can be made.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "select": {
          "type": "Function",
          "description": "\nSelects the given value.\n     "
        },
        "selectable": {
          "type": "String",
          "description": "\nOverriden from Polymer.IronSelectableBehavior\n       "
        },
        "selected": {
          "type": "(string|number)",
          "description": "\nGets or sets the selected element. The default is to use the index of the item.\n"
        },
        "selectedAttribute": {
          "type": "String",
          "description": "\nOverriden from Polymer.IronSelectableBehavior\n       "
        },
        "selectedClass": {
          "type": "String",
          "description": "\nThe class to set on elements when selected.\n       "
        },
        "selectedItem": {
          "type": "?Object",
          "description": "\nReturns the currently selected item.\n\n"
        },
        "selectNext": {
          "type": "Function",
          "description": "\nSelects the next item. If the next item is disabled, then it is\nskipped, and the next item after it is selected.\n     "
        },
        "selectPrevious": {
          "type": "Function",
          "description": "\nSelects the previous item. If the previous item is disabled, then it is\nskipped, and its previous item is selected\n     "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "_activateEventChanged": {
          "type": "Function",
          "description": ""
        },
        "_activateHandler": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_addListener": {
          "type": "Function",
          "description": ""
        },
        "_applySelection": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_excludedLocalNames": {
          "type": "Object",
          "description": "\nThe set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list.\n\n"
        },
        "_filterItem": {
          "type": "Function",
          "description": ""
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_indexToValue": {
          "type": "Function",
          "description": ""
        },
        "_itemActivate": {
          "type": "Function",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_observeItems": {
          "type": "Function",
          "description": " observe items change under the given node."
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_removeListener": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_selectionChange": {
          "type": "Function",
          "description": ""
        },
        "_selectSelected": {
          "type": "Function",
          "description": ""
        },
        "_shouldUpdateSelection": {
          "type": "",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAttrForSelected": {
          "type": "Function",
          "description": ""
        },
        "_updateItems": {
          "type": "Function",
          "description": ""
        },
        "_updateSelected": {
          "type": "Function",
          "description": ""
        },
        "_valueForItem": {
          "type": "Function",
          "description": ""
        },
        "_valueToIndex": {
          "type": "Function",
          "description": ""
        },
        "_valueToItem": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-ripple": {
      "name": "paper-ripple",
      "description": "\nMaterial design: [Surface reaction](https://www.google.com/design/spec/animation/responsive-interaction.html#responsive-interaction-surface-reaction)\n\n`paper-ripple` provides a visual effect that other paper elements can\nuse to simulate a rippling effect emanating from the point of contact.  The\neffect can be visualized as a concentric circle with motion.\n\nExample:\n\n    &lt;div style=\"position:relative\"&gt;\n      &lt;paper-ripple&gt;&lt;/paper-ripple&gt;\n    &lt;/div&gt;\n\nNote, it's important that the parent container of the ripple be relative position, otherwise\nthe ripple will emanate outside of the desired container.\n\n`paper-ripple` listens to \"mousedown\" and \"mouseup\" events so it would display ripple\neffect when touches on it.  You can also defeat the default behavior and\nmanually route the down and up actions to the ripple element.  Note that it is\nimportant if you call `downAction()` you will have to make sure to call\n`upAction()` so that `paper-ripple` would end the animation loop.\n\nExample:\n\n    &lt;paper-ripple id=\"ripple\" style=\"pointer-events: none;\"&gt;&lt;/paper-ripple&gt;\n    ...\n    downAction: function(e) {\n      this.$.ripple.downAction({x: e.x, y: e.y});\n    },\n    upAction: function(e) {\n      this.$.ripple.upAction();\n    }\n\nStyling ripple effect:\n\n  Use CSS color property to style the ripple:\n\n    paper-ripple {\n      color: #4285f4;\n    }\n\n  Note that CSS color property is inherited so it is not required to set it on\n  the `paper-ripple` element directly.\n\nBy default, the ripple is centered on the point of contact.  Apply the `recenters`\nattribute to have the ripple grow toward the center of its container.\n\n    &lt;paper-ripple recenters&gt;&lt;/paper-ripple&gt;\n\nYou can also  center the ripple inside its container from the start.\n\n    &lt;paper-ripple center&gt;&lt;/paper-ripple&gt;\n\nApply `circle` class to make the rippling effect within a circle.\n\n    &lt;paper-ripple class=\"circle\"&gt;&lt;/paper-ripple&gt;\n\n",
      "attributes": {
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "addRipple": {
          "type": "Function",
          "description": ""
        },
        "animate": {
          "type": "Function",
          "description": ""
        },
        "animating": {
          "type": "Boolean",
          "description": "\nTrue when there are visible ripples animating within the\nelement.\n         "
        },
        "center": {
          "type": "Boolean",
          "description": "\nIf true, ripples will center inside its container\n\n"
        },
        "downAction": {
          "type": "Function",
          "description": "\nProvokes a ripple down effect via a UI event,\n*not* respecting the `noink` property.\n"
        },
        "holdDown": {
          "type": "Boolean",
          "description": "\nIf true, the ripple will remain in the \"down\" state until `holdDown`\nis set to false again.\n         "
        },
        "initialOpacity": {
          "type": "Number",
          "description": "\nThe initial opacity set on the wave.\n\n"
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "noink": {
          "type": "Boolean",
          "description": "\nIf true, the ripple will not generate a ripple effect\nvia pointer interaction.\nCalling ripple's imperative api like `simulatedRipple` will\nstill generate the ripple effect.\n         "
        },
        "onAnimationComplete": {
          "type": "Function",
          "description": ""
        },
        "opacityDecayVelocity": {
          "type": "Number",
          "description": "\nHow fast (opacity per second) the wave fades out.\n\n"
        },
        "recenters": {
          "type": "Boolean",
          "description": "\nIf true, ripples will exhibit a gravitational pull towards\nthe center of their container as they fade away.\n\n"
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "removeRipple": {
          "type": "Function",
          "description": ""
        },
        "ripples": {
          "type": "Array",
          "description": "\nA list of the visual ripples.\n\n"
        },
        "shouldKeepAnimating": {
          "type": "",
          "description": ""
        },
        "simulatedRipple": {
          "type": "Function",
          "description": ""
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "target": {
          "type": "",
          "description": ""
        },
        "uiDownAction": {
          "type": "Function",
          "description": "\nProvokes a ripple down effect via a UI event,\nrespecting the `noink` property.\n"
        },
        "uiUpAction": {
          "type": "Function",
          "description": "\nProvokes a ripple up effect via a UI event,\nrespecting the `noink` property.\n"
        },
        "upAction": {
          "type": "Function",
          "description": "\nProvokes a ripple up effect via a UI event,\n*not* respecting the `noink` property.\n"
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_animating": {
          "type": "Boolean",
          "description": ""
        },
        "_boundAnimate": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_holdDownChanged": {
          "type": "Function",
          "description": " effect."
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_onEnterKeydown": {
          "type": "Function",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onSpaceKeydown": {
          "type": "Function",
          "description": ""
        },
        "_onSpaceKeyup": {
          "type": "Function",
          "description": ""
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-scroll-header-panel": {
      "name": "paper-scroll-header-panel",
      "description": "\nMaterial design: [Scrolling techniques](https://www.google.com/design/spec/patterns/scrolling-techniques.html)\n\n`paper-scroll-header-panel` contains a header section and a content section.  The\nheader is initially on the top part of the view but it scrolls away with the\nrest of the scrollable content.  Upon scrolling slightly up at any point, the\nheader scrolls back into view.  This saves screen space and allows users to\naccess important controls by easily moving them back to the view.\n\n__Important:__ The `paper-scroll-header-panel` will not display if its parent does not have a height.\n\nUsing [layout classes](https://www.polymer-project.org/1.0/docs/migration.html#layout-attributes) or custom properties, you can easily make the `paper-scroll-header-panel` fill the screen\n\n```html\n&lt;body class=\"fullbleed layout vertical\"&gt;\n  &lt;paper-scroll-header-panel class=\"flex\"&gt;\n    &lt;paper-toolbar&gt;\n      &lt;div&gt;Hello World!&lt;/div&gt;\n    &lt;/paper-toolbar&gt;\n  &lt;/paper-scroll-header-panel&gt;\n&lt;/body&gt;\n```\n\nor, if you would prefer to do it in CSS, just give `html`, `body`, and `paper-scroll-header-panel` a height of 100%:\n\n```css\nhtml, body {\n  height: 100%;\n  margin: 0;\n}\npaper-scroll-header-panel {\n  height: 100%;\n}\n```\n\n`paper-scroll-header-panel` works well with `paper-toolbar` but can use any element\nthat represents a header by adding a `paper-header` class to it.\n\n```html\n&lt;paper-scroll-header-panel&gt;\n  &lt;div class=\"paper-header\"&gt;Header&lt;/div&gt;\n  &lt;div&gt;Content goes here...&lt;/div&gt;\n&lt;/paper-scroll-header-panel&gt;\n```\n\n### Styling\n=======\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n--paper-scroll-header-panel-full-header | To change background for toolbar when it is at its full size | {}\n--paper-scroll-header-panel-condensed-header | To change the background for toolbar when it is condensed | {}\n--paper-scroll-header-container | To override or add container styles | {}\n\n",
      "attributes": {
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "condense": {
          "type": "Function",
          "description": "\nCondense the header.\n\n"
        },
        "condensedHeaderHeight": {
          "type": "Number",
          "description": "\nThe height of the header when it is condensed.\n\nBy default, `condensedHeaderHeight` is 1/3 of `headerHeight` unless\nthis is specified.\n       "
        },
        "condenses": {
          "type": "Boolean",
          "description": "\nIf true, the header's height will condense to `condensedHeaderHeight`\nas the user scrolls down from the top of the content area.\n       "
        },
        "content": {
          "type": "",
          "description": "\nReturns the content element.\n\n"
        },
        "fixed": {
          "type": "Boolean",
          "description": "\nIf true, the header is fixed to the top and never moves away.\n       "
        },
        "header": {
          "type": "",
          "description": "\nReturns the header element.\n\n"
        },
        "headerHeight": {
          "type": "Number",
          "description": "\nThe height of the header when it is at its full size.\n\nBy default, the height will be measured when it is ready.  If the height\nchanges later the user needs to either set this value to reflect the\nnew height or invoke `measureHeaderHeight()`.\n       "
        },
        "headerState": {
          "type": "Number",
          "description": "\nThe state of the header. Depending on the configuration and the `scrollTop` value,\nthe header state could change to\n     Polymer.PaperScrollHeaderPanel.HEADER_STATE_EXPANDED\n     Polymer.PaperScrollHeaderPanel.HEADER_STATE_HIDDEN\n     Polymer.PaperScrollHeaderPanel.HEADER_STATE_CONDENSED\n     Polymer.PaperScrollHeaderPanel.HEADER_STATE_INTERPOLATED\n       "
        },
        "keepCondensedHeader": {
          "type": "Boolean",
          "description": "\nIf true, the condensed header is always shown and does not move away.\n       "
        },
        "measureHeaderHeight": {
          "type": "Function",
          "description": "\nInvoke this to tell `paper-scroll-header-panel` to re-measure the header's\nheight.\n\n"
        },
        "noDissolve": {
          "type": "Boolean",
          "description": "\nIf true, no cross-fade transition from one background to another.\n       "
        },
        "noReveal": {
          "type": "Boolean",
          "description": "\nIf true, the header doesn't slide back in when scrolling back up.\n       "
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "scroll": {
          "type": "Function",
          "description": "\nScroll to a specific y coordinate.\n\n"
        },
        "scrollAwayTopbar": {
          "type": "Boolean",
          "description": "\nBy default, the top part of the header stays when the header is being\ncondensed.  Set this to true if you want the top part of the header\nto be scrolled away.\n       "
        },
        "scroller": {
          "type": "",
          "description": "\nReturns the scrollable element.\n\n"
        },
        "scrollToTop": {
          "type": "Function",
          "description": "\nScroll to the top of the content.\n\n"
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "_condensedHeaderHeightChanged": {
          "type": "Function",
          "description": ""
        },
        "_condenseHeader": {
          "type": "Function",
          "description": ""
        },
        "_condensesChanged": {
          "type": "Function",
          "description": ""
        },
        "_defaultCondsensedHeaderHeight": {
          "type": "(number|null)",
          "description": ""
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_headerHeightChanged": {
          "type": "Function",
          "description": ""
        },
        "_headerMargin": {
          "type": "",
          "description": ""
        },
        "_headerMaxDelta": {
          "type": "",
          "description": ""
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "_prevScrollTop": {
          "type": "number",
          "description": ""
        },
        "_scroll": {
          "type": "Function",
          "description": ""
        },
        "_setup": {
          "type": "Function",
          "description": ""
        },
        "_transformHeader": {
          "type": "Function",
          "description": ""
        },
        "_translateY": {
          "type": "Function",
          "description": ""
        },
        "_updateScrollState": {
          "type": "Function",
          "description": ""
        },
        "_y": {
          "type": "number",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-slider": {
      "name": "paper-slider",
      "description": "\nMaterial design: [Sliders](https://www.google.com/design/spec/components/sliders.html)\n\n`paper-slider` allows user to select a value from a range of values by\nmoving the slider thumb.  The interactive nature of the slider makes it a\ngreat choice for settings that reflect intensity levels, such as volume,\nbrightness, or color saturation.\n\nExample:\n\n    &lt;paper-slider&gt;&lt;/paper-slider&gt;\n\nUse `min` and `max` to specify the slider range.  Default is 0 to 100.\n\nExample:\n\n    &lt;paper-slider min=\"10\" max=\"200\" value=\"110\"&gt;&lt;/paper-slider&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-slider-bar-color` | The background color of the slider | `transparent`\n`--paper-slider-active-color` | The progress bar color | `--google-blue-700`\n`--paper-slider-secondary-color` | The secondary progress bar color | `--google-blue-300`\n`--paper-slider-knob-color` | The knob color | `--google-blue-700`\n`--paper-slider-disabled-knob-color` | The disabled knob color | `--paper-grey-400`\n`--paper-slider-pin-color` | The pin color | `--google-blue-700`\n`--paper-slider-font-color` | The pin's text color | `#fff`\n`--paper-slider-disabled-active-color` | The disabled progress bar color | `--paper-grey-400`\n`--paper-slider-disabled-secondary-color` | The disabled secondary progress bar color | `--paper-grey-400`\n`--paper-slider-knob-start-color` | The fill color of the knob at the far left | `transparent`\n`--paper-slider-knob-start-border-color` | The border color of the knob at the far left | `--paper-grey-400`\n`--paper-slider-pin-start-color` | The color of the pin at the far left | `--paper-grey-400`\n`--paper-slider-height` | Height of the progress bar | `2px`\n`--paper-slider-input` | Mixin applied to the input in editable mode | `{}`\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nIf true, the button is a toggle and is currently in the active state.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "ariaActiveAttribute": {
          "type": "String",
          "description": "\nThe aria attribute to be set if the button is a toggle and in the\nactive state.\n       "
        },
        "decrement": {
          "type": "Function",
          "description": "\nDecreases value by `step` but not below `min`.\n"
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "dragging": {
          "type": "Boolean",
          "description": "\nTrue when the user is dragging the slider.\n         "
        },
        "editable": {
          "type": "Boolean",
          "description": "\nIf true, an input is shown and user can use it to set the slider value.\n         "
        },
        "ensureRipple": {
          "type": "Function",
          "description": "\nEnsures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.\n"
        },
        "expand": {
          "type": "Boolean",
          "description": "\nIf true, the knob is expanded\n         "
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "getRipple": {
          "type": "Function",
          "description": "\nReturns the `&lt;paper-ripple&gt;` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.\n     "
        },
        "hasRipple": {
          "type": "Function",
          "description": "\nReturns true if this element currently contains a ripple effect.\n"
        },
        "immediateValue": {
          "type": "Number",
          "description": "\nThe immediate value of the slider.  This value is updated while the user\nis dragging the slider.\n         "
        },
        "increment": {
          "type": "Function",
          "description": "\nIncreases value by `step` but not above `max`.\n"
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "markers": {
          "type": "Array",
          "description": ""
        },
        "max": {
          "type": "Number",
          "description": "\nThe number that indicates the maximum value of the range.\n     "
        },
        "maxMarkers": {
          "type": "Number",
          "description": "\nThe maximum number of markers\n         "
        },
        "min": {
          "type": "Number",
          "description": "\nThe number that indicates the minimum value of the range.\n     "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "noink": {
          "type": "Boolean",
          "description": "\nIf true, the element will not produce a ripple effect when interacted\nwith via the pointer.\n       "
        },
        "pin": {
          "type": "Boolean",
          "description": "\nIf true, a pin with numeric value label is shown when the slider thumb\nis pressed. Use for settings for which users need to know the exact\nvalue of the setting.\n         "
        },
        "pointerDown": {
          "type": "Boolean",
          "description": "\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       "
        },
        "pressed": {
          "type": "Boolean",
          "description": "\nIf true, the user is currently holding down the button.\n       "
        },
        "ratio": {
          "type": "Number",
          "description": "\nReturns the ratio of the value.\n     "
        },
        "receivedFocusFromKeyboard": {
          "type": "Boolean",
          "description": "\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
        },
        "secondaryProgress": {
          "type": "Number",
          "description": "\nThe number that represents the current secondary progress.\n         "
        },
        "snaps": {
          "type": "Boolean",
          "description": "\nIf true, the slider thumb snaps to tick marks evenly spaced based\non the `step` property value.\n         "
        },
        "step": {
          "type": "Number",
          "description": "\nSpecifies the value granularity of the range's value.\n     "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "toggles": {
          "type": "Boolean",
          "description": "\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
        },
        "transiting": {
          "type": "Boolean",
          "description": ""
        },
        "value": {
          "type": "Number",
          "description": "\nThe number that represents the current value.\n     "
        },
        "_activeChanged": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_ariaActiveAttributeChanged": {
          "type": "Function",
          "description": ""
        },
        "_asyncClick": {
          "type": "Function",
          "description": " event handler to unwind before triggering another event"
        },
        "_bardown": {
          "type": "Function",
          "description": ""
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_buttonStateChanged": {
          "type": "Function",
          "description": "\nEnsures a `&lt;paper-ripple&gt;` element is available when the element is\nfocused.\n     "
        },
        "_calcKnobPosition": {
          "type": "Function",
          "description": ""
        },
        "_calcRatio": {
          "type": "Function",
          "description": ""
        },
        "_calcStep": {
          "type": "Function",
          "description": ""
        },
        "_changedButtonState": {
          "type": "Function",
          "description": " provide hook for follow-on behaviors to react to button-state"
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_changeValue": {
          "type": "Function",
          "description": ""
        },
        "_clampValue": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_controlStateChanged": {
          "type": "Function",
          "description": ""
        },
        "_createRipple": {
          "type": "Function",
          "description": " create the element ripple inside the `sliderKnob`"
        },
        "_decrementKey": {
          "type": "Function",
          "description": ""
        },
        "_detectKeyboardFocus": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_downHandler": {
          "type": "Function",
          "description": "\nIn addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.\n     "
        },
        "_expandKnob": {
          "type": "Function",
          "description": ""
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_focusedChanged": {
          "type": "Function",
          "description": " according to spec: https://www.google.com/design/spec/components/sliders.html"
        },
        "_getClassNames": {
          "type": "Function",
          "description": ""
        },
        "_immediateValueChanged": {
          "type": "Function",
          "description": ""
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_incrementKey": {
          "type": "Function",
          "description": ""
        },
        "_inputKeyDown": {
          "type": "Function",
          "description": ""
        },
        "_knobdown": {
          "type": "Function",
          "description": ""
        },
        "_knobTransitionEnd": {
          "type": "Function",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_maxMarkersChanged": {
          "type": "Function",
          "description": ""
        },
        "_mergeClasses": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventRe": {
          "type": "object",
          "description": ""
        },
        "_noinkChanged": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onTrack": {
          "type": "Function",
          "description": ""
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_positionKnob": {
          "type": "Function",
          "description": ""
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_pressedChanged": {
          "type": "Function",
          "description": " any of these changes are considered a change to button state"
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_resetKnob": {
          "type": "Function",
          "description": ""
        },
        "_rippleContainer": {
          "type": "(Element|undefined)",
          "description": "\n"
        },
        "_secondaryProgressChanged": {
          "type": "Function",
          "description": ""
        },
        "_spaceKeyDownHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_spaceKeyUpHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_tapHandler": {
          "type": "Function",
          "description": ""
        },
        "_trackEnd": {
          "type": "Function",
          "description": ""
        },
        "_trackStart": {
          "type": "Function",
          "description": ""
        },
        "_trackX": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_update": {
          "type": "Function",
          "description": ""
        },
        "_updateKnob": {
          "type": "Function",
          "description": ""
        },
        "_upHandler": {
          "type": "Function",
          "description": ""
        },
        "_userActivate": {
          "type": "Function",
          "description": " 'change' events"
        },
        "_validateValue": {
          "type": "Function",
          "description": ""
        },
        "_valueChanged": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-spinner": {
      "name": "paper-spinner",
      "description": "\nMaterial design: [Progress & activity](https://www.google.com/design/spec/components/progress-activity.html)\n\nElement providing a multiple color material design circular spinner.\n\n    &lt;paper-spinner active&gt;&lt;/paper-spinner&gt;\n\nThe default spinner cycles between four layers of colors; by default they are\nblue, red, yellow and green. It can be customized to cycle between four different\ncolors. Use &lt;paper-spinner-lite&gt; for single color spinners.\n\n### Accessibility\n\nAlt attribute should be set to provide adequate context for accessibility. If not provided,\nit defaults to 'loading'.\nEmpty alt can be provided to mark the element as decorative if alternative content is provided\nin another form (e.g. a text block following the spinner).\n\n    &lt;paper-spinner alt=\"Loading contacts list\" active&gt;&lt;/paper-spinner&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-spinner-layer-1-color` | Color of the first spinner rotation | `--google-blue-500`\n`--paper-spinner-layer-2-color` | Color of the second spinner rotation | `--google-red-500`\n`--paper-spinner-layer-3-color` | Color of the third spinner rotation | `--google-yellow-500`\n`--paper-spinner-layer-4-color` | Color of the fourth spinner rotation | `--google-green-500`\n`--paper-spinner-stroke-width` | The width of the spinner stroke | 3px\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nDisplays the spinner.\n       "
        },
        "alt": {
          "type": "String",
          "description": "\nAlternative text content for accessibility support.\nIf alt is present, it will add an aria-label whose content matches alt when active.\nIf alt is not present, it will default to 'loading' as the alt value.\n       "
        },
        "__activeChanged": {
          "type": "Function",
          "description": ""
        },
        "__altChanged": {
          "type": "Function",
          "description": ""
        },
        "__computeContainerClasses": {
          "type": "Function",
          "description": ""
        },
        "__coolingDown": {
          "type": "Boolean",
          "description": ""
        },
        "__reset": {
          "type": "Function",
          "description": ""
        },
        "__setAriaHidden": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "paper-spinner-lite": {
      "name": "paper-spinner-lite",
      "description": "\nMaterial design: [Progress & activity](https://www.google.com/design/spec/components/progress-activity.html)\n\nElement providing a single color material design circular spinner.\n\n    &lt;paper-spinner-lite active&gt;&lt;/paper-spinner-lite&gt;\n\nThe default spinner is blue. It can be customized to be a different color.\n\n### Accessibility\n\nAlt attribute should be set to provide adequate context for accessibility. If not provided,\nit defaults to 'loading'.\nEmpty alt can be provided to mark the element as decorative if alternative content is provided\nin another form (e.g. a text block following the spinner).\n\n    &lt;paper-spinner-lite alt=\"Loading contacts list\" active&gt;&lt;/paper-spinner-lite&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-spinner-color` | Color of the spinner | `--google-blue-500`\n`--paper-spinner-stroke-width` | The width of the spinner stroke | 3px\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nDisplays the spinner.\n       "
        },
        "alt": {
          "type": "String",
          "description": "\nAlternative text content for accessibility support.\nIf alt is present, it will add an aria-label whose content matches alt when active.\nIf alt is not present, it will default to 'loading' as the alt value.\n       "
        },
        "__activeChanged": {
          "type": "Function",
          "description": ""
        },
        "__altChanged": {
          "type": "Function",
          "description": ""
        },
        "__computeContainerClasses": {
          "type": "Function",
          "description": ""
        },
        "__coolingDown": {
          "type": "Boolean",
          "description": ""
        },
        "__reset": {
          "type": "Function",
          "description": ""
        },
        "__setAriaHidden": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "paper-styles": {
      "name": "paper-styles",
      "description": "\nThe `&lt;paper-styles&gt;` component provides simple ways to use Material Design CSS styles\nin your application. The following imports are available:\n\n1. [color.html](https://github.com/PolymerElements/paper-styles/blob/master/color.html):\na complete list of the colors defined in the Material Design [palette](https://www.google.com/design/spec/style/color.html)\n\n2. [default-theme.html](https://github.com/PolymerElements/paper-styles/blob/master/default-theme.html): text,\nbackground and accent colors that match the default Material Design theme\n\n3. [shadow.html](https://github.com/PolymerElements/paper-styles/blob/master/shadow.html): Material Design\n[elevation](https://www.google.com/design/spec/what-is-material/elevation-shadows.html) and shadow styles\n\n4. [typography.html](https://github.com/PolymerElements/paper-styles/blob/master/typography.html):\nMaterial Design [font](http://www.google.com/design/spec/style/typography.html#typography-styles) styles and sizes\n\n5. [demo-pages.html](https://github.com/PolymerElements/paper-styles/blob/master/demo-pages.html): generic styles\nused in the PolymerElements demo pages\n\nWe recommend importing each of these individual files, and using the style mixins\navailable in each ones, rather than the aggregated `paper-styles.html` as a whole.\n\n",
      "attributes": {}
    },
    "paper-tabs": {
      "name": "paper-tabs",
      "description": "\nMaterial design: [Tabs](https://www.google.com/design/spec/components/tabs.html)\n\n`paper-tabs` makes it easy to explore and switch between different views or functional aspects of\nan app, or to browse categorized data sets.\n\nUse `selected` property to get or set the selected tab.\n\nExample:\n\n    &lt;paper-tabs selected=\"0\"&gt;\n      &lt;paper-tab&gt;TAB 1&lt;/paper-tab&gt;\n      &lt;paper-tab&gt;TAB 2&lt;/paper-tab&gt;\n      &lt;paper-tab&gt;TAB 3&lt;/paper-tab&gt;\n    &lt;/paper-tabs&gt;\n\nSee &lt;a href=\"?active=paper-tab\"&gt;paper-tab&lt;/a&gt; for more information about\n`paper-tab`.\n\nA common usage for `paper-tabs` is to use it along with `iron-pages` to switch\nbetween different views.\n\n    &lt;paper-tabs selected=\"{{selected}}\"&gt;\n      &lt;paper-tab&gt;Tab 1&lt;/paper-tab&gt;\n      &lt;paper-tab&gt;Tab 2&lt;/paper-tab&gt;\n      &lt;paper-tab&gt;Tab 3&lt;/paper-tab&gt;\n    &lt;/paper-tabs&gt;\n\n    &lt;iron-pages selected=\"{{selected}}\"&gt;\n      &lt;div&gt;Page 1&lt;/div&gt;\n      &lt;div&gt;Page 2&lt;/div&gt;\n      &lt;div&gt;Page 3&lt;/div&gt;\n    &lt;/iron-pages&gt;\n\n\nTo use links in tabs, add `link` attribute to `paper-tab` and put an `&lt;a&gt;`\nelement in `paper-tab`.\n\nExample:\n\n&lt;pre&gt;&lt;code&gt;\n&lt;style is=\"custom-style\"&gt;\n  .link {\n    &#64;apply(--layout-horizontal);\n    &#64;apply(--layout-center-center);\n  }\n&lt;/style&gt;\n\n&lt;paper-tabs selected=\"0\"&gt;\n  &lt;paper-tab link&gt;\n    &lt;a href=\"#link1\" class=\"link\"&gt;TAB ONE&lt;/a&gt;\n  &lt;/paper-tab&gt;\n  &lt;paper-tab link&gt;\n    &lt;a href=\"#link2\" class=\"link\"&gt;TAB TWO&lt;/a&gt;\n  &lt;/paper-tab&gt;\n  &lt;paper-tab link&gt;\n    &lt;a href=\"#link3\" class=\"link\"&gt;TAB THREE&lt;/a&gt;\n  &lt;/paper-tab&gt;\n&lt;/paper-tabs&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-tabs-selection-bar-color` | Color for the selection bar | `--paper-yellow-a100`\n`--paper-tabs-selection-bar` | Mixin applied to the selection bar | `{}`\n`--paper-tabs` | Mixin applied to the tabs | `{}`\n\n",
      "attributes": {
        "activateEvent": {
          "type": "String",
          "description": "\nThe event that fires from items when they are selected. Selectable\nwill listen for this event from items and update the selection state.\nSet to empty string to listen to no events.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "alignBottom": {
          "type": "Boolean",
          "description": "\nIf true, the tabs are aligned to bottom (the selection bar appears at the top).\n         "
        },
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "attrForItemTitle": {
          "type": "String",
          "description": "\nThe attribute to use on menu items to look up the item title. Typing the first\nletter of an item when the menu is open focuses that item. If unset, `textContent`\nwill be used.\n       "
        },
        "attrForSelected": {
          "type": "String",
          "description": "\nIf you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)\n       "
        },
        "autoselect": {
          "type": "Boolean",
          "description": "\nIf true, tabs are automatically selected when focused using the\nkeyboard.\n         "
        },
        "autoselectDelay": {
          "type": "Number",
          "description": "\nThe delay (in milliseconds) between when the user stops interacting\nwith the tabs through the keyboard and when the focused item is\nautomatically selected (if `autoselect` is true).\n         "
        },
        "disableDrag": {
          "type": "Boolean",
          "description": "\nIf true, dragging on the tabs to scroll is disabled.\n         "
        },
        "focusedItem": {
          "type": "?Object",
          "description": "\nReturns the currently focused item.\n"
        },
        "forceSynchronousItemUpdate": {
          "type": "Function",
          "description": "\nForce a synchronous update of the `items` property.\n\nNOTE: Consider listening for the `iron-items-changed` event to respond to\nupdates to the set of selectable items after updates to the DOM list and\nselection state have been made.\n\nWARNING: If you are using this method, you should probably consider an\nalternate approach. Synchronously querying for items is potentially\nslow for many use cases. The `items` property will update asynchronously\non its own to reflect selectable items in the DOM.\n     "
        },
        "hideScrollButtons": {
          "type": "Boolean",
          "description": "\nIf true, scroll buttons (left/right arrow) will be hidden for scrollable tabs.\n         "
        },
        "indexOf": {
          "type": "Function",
          "description": "\nReturns the index of the given item.\n\n"
        },
        "items": {
          "type": "Array",
          "description": "\nThe list of items from which a selection can be made.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "multi": {
          "type": "Boolean",
          "description": "\nIf true, multiple selections are allowed.\n       "
        },
        "multiChanged": {
          "type": "Function",
          "description": ""
        },
        "noBar": {
          "type": "Boolean",
          "description": "\nIf true, the bottom bar to indicate the selected tab will not be shown.\n         "
        },
        "noink": {
          "type": "Boolean",
          "description": "\nIf true, ink ripple effect is disabled. When this property is changed,\nall descendant `&lt;paper-tab&gt;` elements have their `noink` property\nchanged to the new value as well.\n         "
        },
        "noSlide": {
          "type": "Boolean",
          "description": "\nIf true, the slide effect for the bottom bar is disabled.\n         "
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "scrollable": {
          "type": "Boolean",
          "description": "\nIf true, tabs are scrollable and the tab width is based on the label width.\n         "
        },
        "select": {
          "type": "Function",
          "description": "\nSelects the given value. If the `multi` property is true, then the selected state of the\n`value` will be toggled; otherwise the `value` will be selected.\n\n"
        },
        "selectable": {
          "type": "String",
          "description": ""
        },
        "selected": {
          "type": "(string|number)",
          "description": "\nGets or sets the selected element. The default is to use the index of the item.\n"
        },
        "selectedAttribute": {
          "type": "String",
          "description": "\nThe attribute to set on elements when selected.\n       "
        },
        "selectedClass": {
          "type": "String",
          "description": "\nThe class to set on elements when selected.\n       "
        },
        "selectedItem": {
          "type": "?Object",
          "description": "\nReturns the currently selected item.\n\n"
        },
        "selectedItems": {
          "type": "Array",
          "description": "\nReturns an array of currently selected items.\n       "
        },
        "selectedValues": {
          "type": "Array",
          "description": "\nGets or sets the selected elements. This is used instead of `selected` when `multi`\nis true.\n       "
        },
        "selectNext": {
          "type": "Function",
          "description": "\nSelects the next item.\n\n"
        },
        "selectPrevious": {
          "type": "Function",
          "description": "\nSelects the previous item.\n\n"
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "_activateEventChanged": {
          "type": "Function",
          "description": ""
        },
        "_activateHandler": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_addListener": {
          "type": "Function",
          "description": ""
        },
        "_affectScroll": {
          "type": "Function",
          "description": ""
        },
        "_applySelection": {
          "type": "Function",
          "description": "\nMutates items in the menu based on provided selection details, so that\nall items correctly reflect selection state.\n\n"
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_calcPercent": {
          "type": "Function",
          "description": ""
        },
        "_cancelPendingActivation": {
          "type": "Function",
          "description": "\nCancels a previously scheduled item activation made with\n`_scheduleActivation`.\n       "
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_computeScrollButtonClass": {
          "type": "Function",
          "description": ""
        },
        "_computeSelectionBarClass": {
          "type": "Function",
          "description": ""
        },
        "_computeTabsContentClass": {
          "type": "Function",
          "description": ""
        },
        "_delayedActivationHandler": {
          "type": "Function",
          "description": "\nActivates the last item given to `_scheduleActivation`.\n       "
        },
        "_down": {
          "type": "Function",
          "description": ""
        },
        "_excludedLocalNames": {
          "type": "Object",
          "description": "\nThe set of excluded elements where the key is the `localName`\nof the element that will be ignored from the item list.\n\n"
        },
        "_filterItem": {
          "type": "Function",
          "description": ""
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_focusedItemChanged": {
          "type": "Function",
          "description": "\nDiscretely updates tabindex values among menu items as the focused item\nchanges.\n\n"
        },
        "_focusNext": {
          "type": "Function",
          "description": "\nFocuses the next item (relative to the currently focused item) in the\nmenu.\n     "
        },
        "_focusPrevious": {
          "type": "Function",
          "description": "\nFocuses the previous item (relative to the currently focused item) in the\nmenu.\n     "
        },
        "_focusWithKeyboardEvent": {
          "type": "Function",
          "description": "\nGiven a KeyboardEvent, this method will focus the appropriate item in the\nmenu (if there is a relevant item, and it is possible to focus it).\n\n"
        },
        "_holdDelay": {
          "type": "Number",
          "description": ""
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_indexToValue": {
          "type": "Function",
          "description": ""
        },
        "_isRTL": {
          "type": "",
          "description": ""
        },
        "_itemActivate": {
          "type": "Function",
          "description": ""
        },
        "_leftHidden": {
          "type": "Boolean",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_noinkChanged": {
          "type": "Function",
          "description": ""
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_observeItems": {
          "type": "Function",
          "description": " observe items change under the given node."
        },
        "_onArrowKeyup": {
          "type": "Function",
          "description": ""
        },
        "_onBarTransitionEnd": {
          "type": "Function",
          "description": ""
        },
        "_onBlurCapture": {
          "type": "Function",
          "description": ""
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onDownKey": {
          "type": "Function",
          "description": ""
        },
        "_onEscKey": {
          "type": "Function",
          "description": "\nHandler that is called when the esc key is pressed.\n\n"
        },
        "_onFocus": {
          "type": "Function",
          "description": "\nHandler that is called when the menu receives focus.\n\n"
        },
        "_onIronDeselect": {
          "type": "Function",
          "description": ""
        },
        "_onIronItemsChanged": {
          "type": "Function",
          "description": "\nA handler that responds to mutation changes related to the list of items\nin the menu.\n\n"
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_onIronSelect": {
          "type": "Function",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_onKeydown": {
          "type": "Function",
          "description": ""
        },
        "_onLeftKey": {
          "type": "Function",
          "description": ""
        },
        "_onLeftScrollButtonDown": {
          "type": "Function",
          "description": ""
        },
        "_onRightKey": {
          "type": "Function",
          "description": ""
        },
        "_onRightScrollButtonDown": {
          "type": "Function",
          "description": ""
        },
        "_onScrollButtonUp": {
          "type": "Function",
          "description": ""
        },
        "_onShiftTabDown": {
          "type": "Function",
          "description": "\nHandler that is called when a shift+tab keypress is detected by the menu.\n\n"
        },
        "_onTabSizingChanged": {
          "type": "Function",
          "description": " TODO(cdata): Add `track` response back in when gesture lands."
        },
        "_onUpKey": {
          "type": "Function",
          "description": ""
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "_positionBar": {
          "type": "Function",
          "description": ""
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_previousTab": {
          "type": "Object",
          "description": ""
        },
        "_removeListener": {
          "type": "Function",
          "description": ""
        },
        "_removeNoinkAttribute": {
          "type": "Function",
          "description": ""
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_resetTabindices": {
          "type": "Function",
          "description": "\nResets all tabindex attributes to the appropriate value based on the\ncurrent selection state. The appropriate value is `0` (focusable) for\nthe default selected item, and `-1` (not keyboard focusable) for all\nother items.\n     "
        },
        "_rightHidden": {
          "type": "Boolean",
          "description": ""
        },
        "_scheduleActivation": {
          "type": "Function",
          "description": "\nActivates an item after a delay (in milliseconds).\n       "
        },
        "_scroll": {
          "type": "Function",
          "description": ""
        },
        "_scrollToLeft": {
          "type": "Function",
          "description": ""
        },
        "_scrollToRight": {
          "type": "Function",
          "description": ""
        },
        "_scrollToSelectedIfNeeded": {
          "type": "Function",
          "description": ""
        },
        "_selectionChange": {
          "type": "Function",
          "description": ""
        },
        "_selectMulti": {
          "type": "Function",
          "description": ""
        },
        "_selectSelected": {
          "type": "Function",
          "description": ""
        },
        "_setNoinkAttribute": {
          "type": "Function",
          "description": ""
        },
        "_shouldUpdateSelection": {
          "type": "",
          "description": ""
        },
        "_step": {
          "type": "Number",
          "description": ""
        },
        "_tabChanged": {
          "type": "Function",
          "description": ""
        },
        "_tabContainerScrollSize": {
          "type": "",
          "description": ""
        },
        "_toggleSelected": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateAttrForSelected": {
          "type": "Function",
          "description": ""
        },
        "_updateItems": {
          "type": "Function",
          "description": ""
        },
        "_updateMultiselectable": {
          "type": "Function",
          "description": "\nSets appropriate ARIA based on whether or not the menu is meant to be\nmulti-selectable.\n\n"
        },
        "_updateSelected": {
          "type": "Function",
          "description": ""
        },
        "_valueForItem": {
          "type": "Function",
          "description": ""
        },
        "_valuesToItems": {
          "type": "Function",
          "description": ""
        },
        "_valueToIndex": {
          "type": "Function",
          "description": ""
        },
        "_valueToItem": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-tab": {
      "name": "paper-tab",
      "description": "\n`paper-tab` is styled to look like a tab.  It should be used in conjunction with\n`paper-tabs`.\n\nExample:\n\n    &lt;paper-tabs selected=\"0\"&gt;\n      &lt;paper-tab&gt;TAB 1&lt;/paper-tab&gt;\n      &lt;paper-tab&gt;TAB 2&lt;/paper-tab&gt;\n      &lt;paper-tab&gt;TAB 3&lt;/paper-tab&gt;\n    &lt;/paper-tabs&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-tab-ink` | Ink color | `--paper-yellow-a100`\n`--paper-tab` | Mixin applied to the tab | `{}`\n`--paper-tab-content` | Mixin applied to the tab content | `{}`\n`--paper-tab-content-unselected` | Mixin applied to the tab content when the tab is not selected | `{}`\n\nThis element applies the mixin `--paper-font-common-base` but does not import `paper-styles/typography.html`.\nIn order to apply the `Roboto` font to this element, make sure you've imported `paper-styles/typography.html`.\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nIf true, the button is a toggle and is currently in the active state.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "ariaActiveAttribute": {
          "type": "String",
          "description": "\nThe aria attribute to be set if the button is a toggle and in the\nactive state.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "ensureRipple": {
          "type": "Function",
          "description": "\nEnsures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.\n"
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "getRipple": {
          "type": "Function",
          "description": "\nReturns the `&lt;paper-ripple&gt;` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.\n     "
        },
        "hasRipple": {
          "type": "Function",
          "description": "\nReturns true if this element currently contains a ripple effect.\n"
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "noink": {
          "type": "Boolean",
          "description": "\nIf true, the element will not produce a ripple effect when interacted\nwith via the pointer.\n       "
        },
        "pointerDown": {
          "type": "Boolean",
          "description": "\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       "
        },
        "pressed": {
          "type": "Boolean",
          "description": "\nIf true, the user is currently holding down the button.\n       "
        },
        "receivedFocusFromKeyboard": {
          "type": "Boolean",
          "description": "\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "toggles": {
          "type": "Boolean",
          "description": "\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
        },
        "_activeChanged": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_ariaActiveAttributeChanged": {
          "type": "Function",
          "description": ""
        },
        "_asyncClick": {
          "type": "Function",
          "description": " event handler to unwind before triggering another event"
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_buttonStateChanged": {
          "type": "Function",
          "description": "\nEnsures a `&lt;paper-ripple&gt;` element is available when the element is\nfocused.\n     "
        },
        "_changedButtonState": {
          "type": "Function",
          "description": " provide hook for follow-on behaviors to react to button-state"
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_controlStateChanged": {
          "type": "Function",
          "description": ""
        },
        "_createRipple": {
          "type": "Function",
          "description": "\nCreate the element's ripple effect via creating a `&lt;paper-ripple&gt;`.\nOverride this method to customize the ripple element.\n"
        },
        "_detectKeyboardFocus": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_downHandler": {
          "type": "Function",
          "description": "\nIn addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventRe": {
          "type": "object",
          "description": ""
        },
        "_noinkChanged": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_parentNoink": {
          "type": "",
          "description": ""
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_pressedChanged": {
          "type": "Function",
          "description": " any of these changes are considered a change to button state"
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_rippleContainer": {
          "type": "(Element|undefined)",
          "description": "\n"
        },
        "_spaceKeyDownHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_spaceKeyUpHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_tapHandler": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_updateNoink": {
          "type": "Function",
          "description": ""
        },
        "_upHandler": {
          "type": "Function",
          "description": ""
        },
        "_userActivate": {
          "type": "Function",
          "description": " 'change' events"
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-toast": {
      "name": "paper-toast",
      "description": "\nMaterial design: [Snackbards & toasts](https://www.google.com/design/spec/components/snackbars-toasts.html)\n\n`paper-toast` provides a subtle notification toast. Only one `paper-toast` will\nbe visible on screen.\n\nUse `opened` to show the toast:\n\nExample:\n\n    &lt;paper-toast text=\"Hello world!\" opened&gt;&lt;/paper-toast&gt;\n\nAlso `open()` or `show()` can be used to show the toast:\n\nExample:\n\n    &lt;paper-button on-click=\"openToast\"&gt;Open Toast&lt;/paper-button&gt;\n    &lt;paper-toast id=\"toast\" text=\"Hello world!\"&gt;&lt;/paper-toast&gt;\n\n    ...\n\n    openToast: function() {\n      this.$.toast.open();\n    }\n\nSet `duration` to 0, a negative number or Infinity to persist the toast on screen:\n\nExample:\n\n    &lt;paper-toast text=\"Terms and conditions\" opened duration=\"0\"&gt;\n      &lt;a href=\"#\"&gt;Show more&lt;/a&gt;\n    &lt;/paper-toast&gt;\n\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-toast-background-color` | The paper-toast background-color | `#323232`\n`--paper-toast-color` | The paper-toast color | `#f1f1f1`\n\nThis element applies the mixin `--paper-font-common-base` but does not import `paper-styles/typography.html`.\nIn order to apply the `Roboto` font to this element, make sure you've imported `paper-styles/typography.html`.\n\n",
      "attributes": {
        "assignParentResizable": {
          "type": "Function",
          "description": "\nUsed to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.\n     "
        },
        "autoFitOnAttach": {
          "type": "Boolean",
          "description": "\nSet to true to auto-fit on attach.\n       "
        },
        "backdropElement": {
          "type": "Element",
          "description": "\nThe backdrop element.\n"
        },
        "cancel": {
          "type": "Function",
          "description": "\nCancels the overlay.\n"
        },
        "canceled": {
          "type": "Boolean",
          "description": "\nTrue if the overlay was canceled when it was last closed.\n       "
        },
        "center": {
          "type": "Function",
          "description": "\nOverridden from `IronFitBehavior`.\nPositions the toast at the bottom left of fitInto.\n         "
        },
        "close": {
          "type": "Function",
          "description": "\nClose the overlay.\n     "
        },
        "closingReason": {
          "type": "Object",
          "description": "\nReturns the reason this dialog was last closed.\n       "
        },
        "constrain": {
          "type": "Function",
          "description": "\nConstrains the size of the element to the window or `fitInfo` by setting `max-height`\nand/or `max-width`.\n     "
        },
        "duration": {
          "type": "Number",
          "description": "\nThe duration in milliseconds to show the toast.\nSet to `0`, a negative number, or `Infinity`, to disable the\ntoast auto-closing.\n           "
        },
        "fit": {
          "type": "Function",
          "description": "\nFits and optionally centers the element into the window, or `fitInfo` if specified.\n     "
        },
        "fitInto": {
          "type": "Object",
          "description": "\nThe element to fit `this` into.\n       "
        },
        "hide": {
          "type": "Function",
          "description": "\nHide the toast. Same as `close()` from `IronOverlayBehavior`.\n         "
        },
        "noAutoFocus": {
          "type": "Boolean",
          "description": "\nOverridden from `IronOverlayBehavior`.\nSet to true to disable auto-focusing the toast or child nodes with\nthe `autofocus` attribute` when the overlay is opened.\n           "
        },
        "noCancelOnEscKey": {
          "type": "Boolean",
          "description": "\nSet to true to disable canceling the overlay with the ESC key.\n       "
        },
        "noCancelOnOutsideClick": {
          "type": "Boolean",
          "description": "\nOverridden from `IronOverlayBehavior`.\nSet to false to enable closing of the toast by clicking outside it.\n           "
        },
        "notifyResize": {
          "type": "Function",
          "description": "\nCan be called to manually notify a resizable and its descendant\nresizables of a resize change.\n     "
        },
        "open": {
          "type": "Function",
          "description": "\nOpen the overlay.\n     "
        },
        "opened": {
          "type": "Boolean",
          "description": "\nTrue if the overlay is currently displayed.\n       "
        },
        "refit": {
          "type": "Function",
          "description": "\nEquivalent to calling `resetFit()` and `fit()`. Useful to call this after the element,\nthe window, or the `fitInfo` element has been resized.\n     "
        },
        "resetFit": {
          "type": "Function",
          "description": "\nResets the target element's position and size constraints, and clear\nthe memoized data.\n     "
        },
        "resizerShouldNotify": {
          "type": "Function",
          "description": "\nThis method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.\n\n"
        },
        "restoreFocusOnClose": {
          "type": "Boolean",
          "description": "\nSet to true to enable restoring of focus when overlay is closed.\n       "
        },
        "show": {
          "type": "Function",
          "description": "\nShow the toast. Without arguments, this is the same as `open()` from `IronOverlayBehavior`.\n"
        },
        "sizingTarget": {
          "type": "!Element",
          "description": "\nThe element that will receive a `max-height`/`width`. By default it is the same as `this`,\nbut it can be set to a child element. This is useful, for example, for implementing a\nscrolling region inside the element.\n"
        },
        "stopResizeNotificationsFor": {
          "type": "Function",
          "description": "\nUsed to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.\n     "
        },
        "text": {
          "type": "String",
          "description": "\nThe text to display in the toast.\n           "
        },
        "toggle": {
          "type": "Function",
          "description": "\nToggle the opened state of the overlay.\n     "
        },
        "visible": {
          "type": "",
          "description": "\nRead-only. Deprecated. Use `opened` from `IronOverlayBehavior`.\n"
        },
        "withBackdrop": {
          "type": "Boolean",
          "description": "\nSet to true to display a backdrop behind the overlay.\n       "
        },
        "__onTransitionEnd": {
          "type": "Function",
          "description": "\nCalled on transitions of the toast, indicating a finished animation\n"
        },
        "_applyFocus": {
          "type": "Function",
          "description": "\nApplies focus according to the opened state.\n"
        },
        "_canAutoClose": {
          "type": "",
          "description": "\nRead-only. Can auto-close if duration is a positive finite number.\n"
        },
        "_canceledChanged": {
          "type": "Function",
          "description": ""
        },
        "_discoverInfo": {
          "type": "Function",
          "description": "\nMemoize information needed to position and size the target element.\n     "
        },
        "_ensureSetup": {
          "type": "Function",
          "description": ""
        },
        "_finishPositioning": {
          "type": "Function",
          "description": ""
        },
        "_finishRenderClosed": {
          "type": "Function",
          "description": "\nTasks to be performed at the end of close action. Will fire `iron-overlay-closed`.\n"
        },
        "_finishRenderOpened": {
          "type": "Function",
          "description": "\nTasks to be performed at the end of open action. Will fire `iron-overlay-opened`.\n"
        },
        "_fireResize": {
          "type": "Function",
          "description": ""
        },
        "_fitHeight": {
          "type": "",
          "description": ""
        },
        "_fitInfo": {
          "type": "?Object",
          "description": ""
        },
        "_fitLeft": {
          "type": "",
          "description": ""
        },
        "_fitTop": {
          "type": "",
          "description": ""
        },
        "_fitWidth": {
          "type": "",
          "description": ""
        },
        "_focusableNodes": {
          "type": "Array.<Node>",
          "description": "\nArray of nodes that can receive focus (overlay included), ordered by `tabindex`.\nThis is used to retrieve which is the first and last focusable nodes in order\nto wrap the focus for overlays `with-backdrop`.\n\nIf you know what is your content (specifically the first and last focusable children),\nyou can override this method to return only `[firstFocusable, lastFocusable];`\n"
        },
        "_focusedChild": {
          "type": "?Node",
          "description": "\nThe node being focused.\n"
        },
        "_focusNode": {
          "type": "Node",
          "description": "\nReturns the node to give focus to.\n"
        },
        "_manager": {
          "type": "Polymer.IronOverlayManagerClass",
          "description": "\nShortcut to access to the overlay manager.\n"
        },
        "_notifyDescendant": {
          "type": "Function",
          "description": ""
        },
        "_notifyingDescendant": {
          "type": "Boolean",
          "description": "\nTrue if this element is currently notifying its descedant elements of\nresize.\n       "
        },
        "_onCaptureClick": {
          "type": "Function",
          "description": "\nCancels (closes) the overlay. Call when click happens outside the overlay.\n"
        },
        "_onCaptureEsc": {
          "type": "Function",
          "description": "\nHandles the ESC key event and cancels (closes) the overlay.\n"
        },
        "_onCaptureFocus": {
          "type": "Function",
          "description": "\nKeeps track of the focused child. If withBackdrop, traps focus within overlay.\n"
        },
        "_onCaptureTab": {
          "type": "Function",
          "description": "\nHandles TAB key events to track focus changes.\nWill wrap focus for overlays withBackdrop.\n"
        },
        "_onDescendantIronResize": {
          "type": "Function",
          "description": ""
        },
        "_onIronRequestResizeNotifications": {
          "type": "Function",
          "description": ""
        },
        "_onIronResize": {
          "type": "Function",
          "description": "\nOverridden from `IronOverlayBehavior`.\niron-fit-behavior will set the inline style position: static, which\ncauses the toast to be rendered incorrectly when opened by default.\n         "
        },
        "_onNodesChange": {
          "type": "Function",
          "description": "\nWill call notifyResize if overlay is opened.\nCan be overridden in order to avoid multiple observers on the same node.\n"
        },
        "_openedChanged": {
          "type": "Function",
          "description": "\nOverridden from `IronOverlayBehavior`.\nCalled when the value of `opened` changes.\n         "
        },
        "_parentResizable": {
          "type": "Object",
          "description": "\nThe closest ancestor element that implements `IronResizableBehavior`.\n       "
        },
        "_parentResizableChanged": {
          "type": "Function",
          "description": ""
        },
        "_preparePositioning": {
          "type": "Function",
          "description": ""
        },
        "_prepareRenderOpened": {
          "type": "Function",
          "description": "\ntasks which must occur before opening; e.g. making the element visible.\n"
        },
        "_renderClosed": {
          "type": "Function",
          "description": "\nOverridden from `IronOverlayBehavior`.\n         "
        },
        "_renderOpened": {
          "type": "Function",
          "description": "\nOverridden from `IronOverlayBehavior`.\n         "
        },
        "_sizeDimension": {
          "type": "Function",
          "description": ""
        },
        "_withBackdropChanged": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-toggle-button": {
      "name": "paper-toggle-button",
      "description": "\nMaterial design: [Switch](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-switch)\n\n`paper-toggle-button` provides a ON/OFF switch that user can toggle the state\nby tapping or by dragging the switch.\n\nExample:\n\n    &lt;paper-toggle-button&gt;&lt;/paper-toggle-button&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-toggle-button-unchecked-bar-color` | Slider color when the input is not checked | `#000000`\n`--paper-toggle-button-unchecked-button-color` | Button color when the input is not checked | `--paper-grey-50`\n`--paper-toggle-button-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--dark-primary-color`\n`--paper-toggle-button-checked-bar-color` | Slider button color when the input is checked | `--primary-color`\n`--paper-toggle-button-checked-button-color` | Button color when the input is checked | `--primary-color`\n`--paper-toggle-button-checked-ink-color` | Selected/focus ripple color when the input is checked | `--primary-color`\n`--paper-toggle-button-unchecked-bar` | Mixin applied to the slider when the input is not checked | `{}`\n`--paper-toggle-button-unchecked-button` | Mixin applied to the slider button when the input is not checked | `{}`\n`--paper-toggle-button-checked-bar` | Mixin applied to the slider when the input is checked | `{}`\n`--paper-toggle-button-checked-button` | Mixin applied to the slider button when the input is checked | `{}`\n`--paper-toggle-button-label-color` | Label color | `--primary-text-color`\n`--paper-toggle-button-label-spacing` | Spacing between the label and the button | `8px`\n\nThis element applies the mixin `--paper-font-common-base` but does not import `paper-styles/typography.html`.\nIn order to apply the `Roboto` font to this element, make sure you've imported `paper-styles/typography.html`.\n\n",
      "attributes": {
        "active": {
          "type": "Boolean",
          "description": "\nIf true, the button is a toggle and is currently in the active state.\n       "
        },
        "addOwnKeyBinding": {
          "type": "Function",
          "description": "\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       "
        },
        "ariaActiveAttribute": {
          "type": "String",
          "description": "\nThe aria attribute to be set if the button is a toggle and in the\nactive state.\n       "
        },
        "checked": {
          "type": "Boolean",
          "description": "\nGets or sets the state, `true` is checked and `false` is unchecked.\n       "
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf true, the user cannot interact with this element.\n       "
        },
        "ensureRipple": {
          "type": "Function",
          "description": "\nEnsures this element contains a ripple effect. For startup efficiency\nthe ripple effect is dynamically on demand when needed.\n"
        },
        "focused": {
          "type": "Boolean",
          "description": "\nIf true, the element currently has focus.\n       "
        },
        "getRipple": {
          "type": "Function",
          "description": "\nReturns the `&lt;paper-ripple&gt;` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the\nripple to be created.\n     "
        },
        "hasRipple": {
          "type": "Function",
          "description": "\nReturns true if this element currently contains a ripple effect.\n"
        },
        "hasValidator": {
          "type": "Function",
          "description": "\n"
        },
        "invalid": {
          "type": "Boolean",
          "description": "\nTrue if the last call to `validate` is invalid.\n       "
        },
        "keyBindings": {
          "type": "Object",
          "description": ""
        },
        "keyboardEventMatchesKeys": {
          "type": "Function",
          "description": ""
        },
        "keyEventTarget": {
          "type": "Object",
          "description": "\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         "
        },
        "name": {
          "type": "String",
          "description": "\nThe name of this element.\n       "
        },
        "noink": {
          "type": "Boolean",
          "description": "\nIf true, the element will not produce a ripple effect when interacted\nwith via the pointer.\n       "
        },
        "pointerDown": {
          "type": "Boolean",
          "description": "\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       "
        },
        "pressed": {
          "type": "Boolean",
          "description": "\nIf true, the user is currently holding down the button.\n       "
        },
        "receivedFocusFromKeyboard": {
          "type": "Boolean",
          "description": "\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       "
        },
        "removeOwnKeyBindings": {
          "type": "Function",
          "description": "\nWhen called, will remove all imperatively-added key bindings.\n       "
        },
        "required": {
          "type": "Boolean",
          "description": "\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.\n       "
        },
        "stopKeyboardEventPropagation": {
          "type": "Boolean",
          "description": "\nIf true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.\n         "
        },
        "toggles": {
          "type": "Boolean",
          "description": "\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       "
        },
        "validate": {
          "type": "Function",
          "description": "\nReturns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.\n\n"
        },
        "validator": {
          "type": "String",
          "description": "\nName of the validator to use.\n       "
        },
        "validatorType": {
          "type": "String",
          "description": "\nNamespace for this validator.\n       "
        },
        "value": {
          "type": "String",
          "description": " Overriden from Polymer.IronFormElementBehavior "
        },
        "_activeChanged": {
          "type": "Function",
          "description": ""
        },
        "_addKeyBinding": {
          "type": "Function",
          "description": ""
        },
        "_ariaActiveAttributeChanged": {
          "type": "Function",
          "description": ""
        },
        "_asyncClick": {
          "type": "Function",
          "description": " event handler to unwind before triggering another event"
        },
        "_boundFocusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_boundKeyHandlers": {
          "type": "Array",
          "description": ""
        },
        "_buttonStateChanged": {
          "type": "Function",
          "description": "\nSynchronizes the element's `active` and `checked` state.\n     "
        },
        "_changedButtonState": {
          "type": "Function",
          "description": " provide hook for follow-on behaviors to react to button-state"
        },
        "_changedControlState": {
          "type": "Function",
          "description": ""
        },
        "_checkedChanged": {
          "type": "Function",
          "description": "\nSynchronizes the element's checked state with its ripple effect.\n     "
        },
        "_collectKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_controlStateChanged": {
          "type": "Function",
          "description": ""
        },
        "_createRipple": {
          "type": "Function",
          "description": " customize the element's ripple"
        },
        "_detectKeyboardFocus": {
          "type": "Function",
          "description": ""
        },
        "_disabledChanged": {
          "type": "Function",
          "description": ""
        },
        "_downHandler": {
          "type": "Function",
          "description": "\nIn addition to the functionality provided in `IronButtonState`, ensures\na ripple effect is created when the element is in a `pressed` state.\n     "
        },
        "_focusBlurHandler": {
          "type": "Function",
          "description": ""
        },
        "_focusedChanged": {
          "type": "Function",
          "description": ""
        },
        "_getValidity": {
          "type": "Function",
          "description": "\nReturns false if the element is required and not checked, and true otherwise.\n"
        },
        "_imperativeKeyBindings": {
          "type": "Object",
          "description": " own properties of everything on the \"prototype\"."
        },
        "_invalidChanged": {
          "type": "Function",
          "description": ""
        },
        "_listenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_mouseEventRe": {
          "type": "object",
          "description": ""
        },
        "_noinkChanged": {
          "type": "Function",
          "description": ""
        },
        "_oldTabIndex": {
          "type": "Number",
          "description": ""
        },
        "_onKeyBindingEvent": {
          "type": "Function",
          "description": ""
        },
        "_ontrack": {
          "type": "Function",
          "description": ""
        },
        "_parentForm": {
          "type": "Object",
          "description": "\nThe form that the element is registered to.\n       "
        },
        "_prepKeyBindings": {
          "type": "Function",
          "description": ""
        },
        "_pressedChanged": {
          "type": "Function",
          "description": " any of these changes are considered a change to button state"
        },
        "_requiredChanged": {
          "type": "Function",
          "description": "\nUpdate the aria-required label when `required` is changed.\n     "
        },
        "_resetKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_rippleContainer": {
          "type": "(Element|undefined)",
          "description": "\n"
        },
        "_spaceKeyDownHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_spaceKeyUpHandler": {
          "type": "Function",
          "description": "\n"
        },
        "_tapHandler": {
          "type": "Function",
          "description": ""
        },
        "_trackEnd": {
          "type": "Function",
          "description": ""
        },
        "_trackMove": {
          "type": "Function",
          "description": ""
        },
        "_trackStart": {
          "type": "Function",
          "description": ""
        },
        "_triggerKeyHandler": {
          "type": "Function",
          "description": ""
        },
        "_unlistenKeyEventListeners": {
          "type": "Function",
          "description": ""
        },
        "_upHandler": {
          "type": "Function",
          "description": ""
        },
        "_userActivate": {
          "type": "Function",
          "description": " 'change' events"
        },
        "_validator": {
          "type": "",
          "description": ""
        },
        "_validatorMeta": {
          "type": "Object",
          "description": ""
        },
        "_valueChanged": {
          "type": "Function",
          "description": "\nReset value to 'on' if it is set to `undefined`.\n     "
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "created": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": "\nFired when the checked state changes.\n\n"
        },
        "ready": {
          "type": "Function",
          "description": ""
        },
        "registered": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "paper-toolbar": {
      "name": "paper-toolbar",
      "description": "\nMaterial design: [Toolbars](https://www.google.com/design/spec/components/toolbars.html)\n\n`paper-toolbar` is a horizontal bar containing items that can be used for\nlabel, navigation, search and actions.  The items placed inside the\n`paper-toolbar` are projected into a `class=\"horizontal center layout\"` container inside of\n`paper-toolbar`'s Shadow DOM.  You can use flex attributes to control the items'\nsizing.\n\nExample:\n\n```html\n&lt;paper-toolbar&gt;\n  &lt;paper-icon-button icon=\"menu\" on-tap=\"menuAction\"&gt;&lt;/paper-icon-button&gt;\n  &lt;div class=\"title\"&gt;Title&lt;/div&gt;\n  &lt;paper-icon-button icon=\"more-vert\" on-tap=\"moreAction\"&gt;&lt;/paper-icon-button&gt;\n&lt;/paper-toolbar&gt;\n```\n\n`paper-toolbar` has a standard height, but can made be taller by setting `tall`\nclass on the `paper-toolbar`. This will make the toolbar 3x the normal height.\n\n```html\n&lt;paper-toolbar class=\"tall\"&gt;\n  &lt;paper-icon-button icon=\"menu\"&gt;&lt;/paper-icon-button&gt;\n&lt;/paper-toolbar&gt;\n```\n\nApply `medium-tall` class to make the toolbar medium tall.  This will make the\ntoolbar 2x the normal height.\n\n```html\n&lt;paper-toolbar class=\"medium-tall\"&gt;\n  &lt;paper-icon-button icon=\"menu\"&gt;&lt;/paper-icon-button&gt;\n&lt;/paper-toolbar&gt;\n```\n\nWhen `tall`, items can pin to either the top (default), middle or bottom.  Use\n`middle` class for middle content and `bottom` class for bottom content.\n\n```html\n&lt;paper-toolbar class=\"tall\"&gt;\n  &lt;paper-icon-button icon=\"menu\"&gt;&lt;/paper-icon-button&gt;\n  &lt;div class=\"middle title\"&gt;Middle Title&lt;/div&gt;\n  &lt;div class=\"bottom title\"&gt;Bottom Title&lt;/div&gt;\n&lt;/paper-toolbar&gt;\n```\n\nFor `medium-tall` toolbar, the middle and bottom contents overlap and are\npinned to the bottom.  But `middleJustify` and `bottomJustify` attributes are\nstill honored separately.\n\nTo make an element completely fit at the bottom of the toolbar, use `fit` along\nwith `bottom`.\n\n```html\n&lt;paper-toolbar class=\"tall\"&gt;\n  &lt;div id=\"progressBar\" class=\"bottom fit\"&gt;&lt;/div&gt;\n&lt;/paper-toolbar&gt;\n```\n\nWhen inside a `paper-header-panel` element, the class `.animate` is toggled to animate\nthe height change in the toolbar.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-toolbar-title`      | Mixin applied to the title of the toolbar | `{}`\n`--paper-toolbar-background` | Toolbar background color     | `--primary-color`\n`--paper-toolbar-color`      | Toolbar foreground color     | `--dark-theme-text-color`\n`--paper-toolbar-height`     | Custom height for toolbar    | `64px`\n`--paper-toolbar-sm-height`  | Custom height for small screen toolbar | `56px`\n`--paper-toolbar`            | Mixin applied to the toolbar | `{}`\n`--paper-toolbar-content`    | Mixin applied to the content section of the toolbar | `{}`\n`--paper-toolbar-medium`     | Mixin applied to medium height toolbar | `{}`\n`--paper-toolbar-tall`       | Mixin applied to tall height toolbar | `{}`\n`--paper-toolbar-transition` | Transition applied to the `.animate` class | `height 0.18s ease-in`\n\n### Accessibility\n\n`&lt;paper-toolbar&gt;` has `role=\"toolbar\"` by default. Any elements with the class `title` will\nbe used as the label of the toolbar via `aria-labelledby`.\n\n",
      "attributes": {
        "bottomJustify": {
          "type": "String",
          "description": "\nControls how the items are aligned horizontally when they are placed\nat the bottom.\nOptions are `start`, `center`, `end`, `justified` and `around`.\n         "
        },
        "justify": {
          "type": "String",
          "description": "\nControls how the items are aligned horizontally.\nOptions are `start`, `center`, `end`, `justified` and `around`.\n         "
        },
        "middleJustify": {
          "type": "String",
          "description": "\nControls how the items are aligned horizontally when they are placed\nin the middle.\nOptions are `start`, `center`, `end`, `justified` and `around`.\n         "
        },
        "_computeBarExtraClasses": {
          "type": "Function",
          "description": ""
        },
        "_observe": {
          "type": "Function",
          "description": ""
        },
        "_updateAriaLabelledBy": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "paper-tooltip": {
      "name": "paper-tooltip",
      "description": "\nMaterial design: [Tooltips](https://www.google.com/design/spec/components/tooltips.html)\n\n`&lt;paper-tooltip&gt;` is a label that appears on hover and focus when the user\nhovers over an element with the cursor or with the keyboard. It will be centered\nto an anchor element specified in the `for` attribute, or, if that doesn't exist,\ncentered to the parent node containing it.\n\nExample:\n\n    &lt;div style=\"display:inline-block\"&gt;\n      &lt;button&gt;Click me!&lt;/button&gt;\n      &lt;paper-tooltip&gt;Tooltip text&lt;/paper-tooltip&gt;\n    &lt;/div&gt;\n\n    &lt;div&gt;\n      &lt;button id=\"btn\"&gt;Click me!&lt;/button&gt;\n      &lt;paper-tooltip for=\"btn\"&gt;Tooltip text&lt;/paper-tooltip&gt;\n    &lt;/div&gt;\n\nThe tooltip can be positioned on the top|bottom|left|right of the anchor using\nthe `position` attribute. The default position is bottom.\n\n    &lt;paper-tooltip for=\"btn\" position=\"left\"&gt;Tooltip text&lt;/paper-tooltip&gt;\n    &lt;paper-tooltip for=\"btn\" position=\"top\"&gt;Tooltip text&lt;/paper-tooltip&gt;\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-tooltip-background` | The background color of the tooltip | `#616161`\n`--paper-tooltip-opacity` | The opacity of the tooltip | `0.9`\n`--paper-tooltip-text-color` | The text color of the tooltip | `white`\n`--paper-tooltip` | Mixin applied to the tooltip | `{}`\n\n",
      "attributes": {
        "animationConfig": {
          "type": "Object",
          "description": "\nThe entry and exit animations that will be played when showing and\nhiding the tooltip. If you want to override this, you must ensure\nthat your animationConfig has the exact format below.\n         "
        },
        "animationDelay": {
          "type": "Number",
          "description": "\nThe delay that will be applied before the `entry` animation is\nplayed when showing the tooltip.\n         "
        },
        "cancelAnimation": {
          "type": "Function",
          "description": "\nCancels the currently running animation.\n     "
        },
        "entryAnimation": {
          "type": "String",
          "description": "\nConvenience property for setting an 'entry' animation. Do not set `animationConfig.entry`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
        },
        "exitAnimation": {
          "type": "String",
          "description": "\nConvenience property for setting an 'exit' animation. Do not set `animationConfig.exit`\nmanually if using this. The animated node is set to `this` if using this property.\n       "
        },
        "fitToVisibleBounds": {
          "type": "Boolean",
          "description": "\nIf true, no parts of the tooltip will ever be shown offscreen.\n         "
        },
        "for": {
          "type": "String",
          "description": "\nThe id of the element that the tooltip is anchored to. This element\nmust be a sibling of the tooltip.\n         "
        },
        "getAnimationConfig": {
          "type": "Function",
          "description": "\nAn element implementing `Polymer.NeonAnimationRunnerBehavior` calls this method to configure\nan animation with an optional type. Elements implementing `Polymer.NeonAnimatableBehavior`\nshould define the property `animationConfig`, which is either a configuration object\nor a map of animation type to array of configuration objects.\n     "
        },
        "hide": {
          "type": "Function",
          "description": ""
        },
        "manualMode": {
          "type": "Boolean",
          "description": "\nSet this to true if you want to manually control when the tooltip\nis shown or hidden.\n         "
        },
        "marginTop": {
          "type": "Number",
          "description": "\nThis property is deprecated, but left over so that it doesn't\nbreak exiting code. Please use `offset` instead. If both `offset` and\n`marginTop` are provided, `marginTop` will be ignored.\n"
        },
        "offset": {
          "type": "Number",
          "description": "\nThe spacing between the top of the tooltip and the element it is\nanchored to.\n         "
        },
        "playAnimation": {
          "type": "Function",
          "description": "\nPlays an animation with an optional `type`.\n"
        },
        "position": {
          "type": "String",
          "description": "\nPositions the tooltip to the top, right, bottom, left of its content.\n         "
        },
        "show": {
          "type": "Function",
          "description": ""
        },
        "target": {
          "type": "",
          "description": "\nReturns the target element that this tooltip is anchored to. It is\neither the element given by the `for` attribute, or the immediate parent\nof the tooltip.\n       "
        },
        "updatePosition": {
          "type": "Function",
          "description": ""
        },
        "_animationMeta": {
          "type": "Object",
          "description": ""
        },
        "_cloneConfig": {
          "type": "Function",
          "description": ""
        },
        "_completeAnimations": {
          "type": "Function",
          "description": ""
        },
        "_configureAnimationEffects": {
          "type": "Function",
          "description": ""
        },
        "_copyProperties": {
          "type": "Function",
          "description": ""
        },
        "_entryAnimationChanged": {
          "type": "Function",
          "description": ""
        },
        "_exitAnimationChanged": {
          "type": "Function",
          "description": ""
        },
        "_forChanged": {
          "type": "Function",
          "description": ""
        },
        "_getAnimationConfigRecursive": {
          "type": "Function",
          "description": ""
        },
        "_onAnimationFinish": {
          "type": "Function",
          "description": ""
        },
        "_player": {
          "type": "?Object",
          "description": ""
        },
        "_runAnimationEffects": {
          "type": "Function",
          "description": ""
        },
        "_showing": {
          "type": "Boolean",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "hostAttributes": {
          "type": "Object",
          "description": ""
        },
        "listeners": {
          "type": "Object",
          "description": ""
        }
      }
    },
    "platinum-bluetooth-service": {
      "name": "platinum-bluetooth-service",
      "description": "The `&lt;platinum-bluetooth-service&gt;` element is used in conjuction with\nthe `&lt;platinum-bluetooth-characteristic&gt;` element to [read and write\ncharacteristics on nearby bluetooth devices][1] thanks to the young [Web\nBluetooth API][2]. It is currently only partially implemented\nin Chrome OS 45 and Chrome 49 for Android behind the experimental flag\n`chrome://flags/#enable-web-bluetooth`.\n\n`&lt;platinum-bluetooth-service&gt;` needs to be a child of a\n`&lt;platinum-bluetooth-device&gt;` element.\n\nFor instance, here's how to read battery level from a nearby bluetooth\ndevice advertising Battery service:\n\n```html\n&lt;platinum-bluetooth-device services-filter='[\"battery_service\"]'&gt;\n  &lt;platinum-bluetooth-service service='battery_service'&gt;\n    &lt;platinum-bluetooth-characteristic characteristic='battery_level'&gt;\n    &lt;/platinum-bluetooth-characteristic&gt;\n  &lt;/platinum-bluetooth-service&gt;\n&lt;/platinum-bluetooth-device&gt;\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar batteryLevel = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    return batteryLevel.read().then(function(value) {\n      console.log('Battery Level is ' + value.getUint8(0) + '%');\n    });\n  })\n  .catch(function(error) { });\n});\n```\n\n[1]: https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web\n[2]: https://github.com/WebBluetoothCG/web-bluetooth\n\n",
      "attributes": {
        "service": {
          "type": "String",
          "description": "\nRequired Bluetooth GATT primary service. You may provide either the\nfull Bluetooth UUID as a string or a short 16- or 32-bit form as\nintegers like 0x180d.\n         "
        },
        "_device": {
          "type": "BluetoothDevice",
          "description": "\nInternal variable used that represents the Bluetooth device.\n         "
        },
        "_deviceChanged": {
          "type": "Function",
          "description": "\nSet the internal device object on each characteristic child.\n       "
        },
        "_disconnectGattServer": {
          "type": "Function",
          "description": "\nDisconnect GATT Server instances on each characteristic child.\n       "
        },
        "_serviceChanged": {
          "type": "Function",
          "description": "\nSet the service string on each characteristic child.\n       "
        },
        "created": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "platinum-bluetooth-characteristic": {
      "name": "platinum-bluetooth-characteristic",
      "description": "\nThe `&lt;platinum-bluetooth-characteristic&gt;` element allows you to [read\nand write characteristics on nearby bluetooth devices][1] thanks to the\nyoung [Web Bluetooth API][2]. It is currently only partially implemented\nin Chrome OS 45 and Chrome 49 for Android behind the experimental flag\n`chrome://flags/#enable-web-bluetooth`.\n\n`&lt;platinum-bluetooth-characteristic&gt;` needs to be a child of a\n`&lt;platinum-bluetooth-service&gt;` element.\n\nFor instance, here's how to read battery level from a nearby bluetooth\ndevice advertising Battery service:\n\n```html\n&lt;platinum-bluetooth-device services-filter='[\"battery_service\"]'&gt;\n  &lt;platinum-bluetooth-service service='battery_service'&gt;\n    &lt;platinum-bluetooth-characteristic characteristic='battery_level'&gt;\n    &lt;/platinum-bluetooth-characteristic&gt;\n  &lt;/platinum-bluetooth-service&gt;\n&lt;/platinum-bluetooth-device&gt;\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar batteryLevel = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    return batteryLevel.read().then(function(value) {\n      console.log('Battery Level is ' + value.getUint8(0) + '%');\n    });\n  })\n  .catch(function(error) { });\n});\n```\n\nHere's another example on how to reset energy expended on nearby\nbluetooth device advertising Heart Rate service:\n\n```html\n&lt;platinum-bluetooth-device services-filter='[\"heart_rate\"]'&gt;\n  &lt;platinum-bluetooth-service service='heart_rate'&gt;\n    &lt;platinum-bluetooth-characteristic characteristic='heart_rate_control_point'&gt;\n    &lt;/platinum-bluetooth-characteristic&gt;\n  &lt;/platinum-bluetooth-service&gt;\n&lt;/platinum-bluetooth-device&gt;\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar heartRateCtrlPoint = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    // Writing 1 is the signal to reset energy expended.\n    var resetEnergyExpended = new Uint8Array([1]);\n    return heartRateCtrlPoint.write(resetEnergyExpended).then(function() {\n      console.log('Energy expended has been reset');\n    });\n  })\n  .catch(function(error) { });\n});\n```\n\nIt is also possible for `&lt;platinum-bluetooth-characteristic&gt;` to fill in\na data-bound field in response to a read.\n\n```html\n&lt;platinum-bluetooth-device services-filter='[\"heart_rate\"]'&gt;\n  &lt;platinum-bluetooth-service service='heart_rate'&gt;\n    &lt;platinum-bluetooth-characteristic characteristic='body_sensor_location'\n                                       value={{bodySensorLocation}}&gt;\n    &lt;/platinum-bluetooth-characteristic&gt;\n  &lt;/platinum-bluetooth-service&gt;\n&lt;/platinum-bluetooth-device&gt;\n...\n&lt;span&gt;{{bodySensorLocation}}&lt;/span&gt;\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar bodySensorLocation = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    return bodySensorLocation.read()\n  })\n  .catch(function(error) { });\n});\n```\n\nStarting and stopping notifications on a `&lt;platinum-bluetooth-characteristic&gt;` is pretty straightforward when taking advantage of the [Polymer Change notification protocol](https://www.polymer-project.org/1.0/docs/devguide/data-binding.html#change-notification-protocol). Here's how to get your Heart Rate Measurement for instance:\n\n```html\n&lt;platinum-bluetooth-device services-filter='[\"heart_rate\"]'&gt;\n  &lt;platinum-bluetooth-service service='heart_rate'&gt;\n    &lt;platinum-bluetooth-characteristic characteristic='heart_rate_measurement'\n                                       on-value-changed='parseHeartRate'&gt;\n    &lt;/platinum-bluetooth-characteristic&gt;\n  &lt;/platinum-bluetooth-service&gt;\n&lt;/platinum-bluetooth-device&gt;\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar heartRate = document.querySelector('platinum-bluetooth-characteristic');\n\nstartButton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    return heartRate.startNotifications().catch(function(error) { });\n  });\n});\n\nstopButton.addEventListener('click', function() {\n  heartRate.stopNotifications().catch(function(error) { });\n});\n\nfunction parseHeartRate(event) {\n let value = event.target.value;\n // Do something with the DataView Object value...\n}\n```\n\nYou can also use changes in `value` to drive characteristic writes when\n`auto-write` property is set to true.\n\n```html\n&lt;platinum-bluetooth-device services-filter='[\"heart_rate\"]'&gt;\n  &lt;platinum-bluetooth-service service='heart_rate'&gt;\n    &lt;platinum-bluetooth-characteristic characteristic='heart_rate_control_point'\n                                              auto-write&gt;\n    &lt;/platinum-bluetooth-characteristic&gt;\n  &lt;/platinum-bluetooth-service&gt;\n&lt;/platinum-bluetooth-device&gt;\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar heartRateCtrlPoint = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    // Writing 1 is the signal to reset energy expended.\n    heartRateCtrlPoint.value = new Uint8Array([1]);\n  })\n  .catch(function(error) { });\n});\n\nheartRateCtrlPoint.addEventListener('platinum-bluetooth-auto-write-error',\n    function(event) {\n  // Handle error...\n});\n```\n\n[1]: https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web\n[2]: https://github.com/WebBluetoothCG/web-bluetooth\n\n",
      "attributes": {
        "autoWrite": {
          "type": "Boolean",
          "description": "\nIf true, automatically perform a write `value` on the characteristic\nwhen `value` changes.\n         "
        },
        "characteristic": {
          "type": "String",
          "description": "\nRequired Bluetooth GATT characteristic for read and write operations.\nYou may provide either the full Bluetooth UUID as a string or a\nshort 16- or 32-bit form as integers like 0x2A19.\n         "
        },
        "read": {
          "type": "Function",
          "description": "\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis read.\n\n"
        },
        "startNotifications": {
          "type": "Function",
          "description": "\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nnotification session starts.\n\n"
        },
        "stopNotifications": {
          "type": "Function",
          "description": "\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nnotification session stops.\n\n"
        },
        "value": {
          "type": "DataView",
          "description": "\nValue gets populated with the characteristic value when it's read\nand during a notification session.\n         "
        },
        "write": {
          "type": "Function",
          "description": "\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis written.\n\n"
        },
        "_characteristic": {
          "type": "BluetoothGATTCharacteristic",
          "description": "\nInternal variable used to cache Bluetooth GATT characteristic.\n         "
        },
        "_characteristicChanged": {
          "type": "Function",
          "description": "\nReset internal cache when characteristic property is changed.\n       "
        },
        "_connectToDevice": {
          "type": "Function",
          "description": "\nReturns a promise that will resolve when bluetooth device picked by\nuser is connected.\n\n"
        },
        "_device": {
          "type": "BluetoothDevice",
          "description": "\nInternal variable used that represents the Bluetooth device.\n         "
        },
        "_disconnectGattServer": {
          "type": "Function",
          "description": "\nDisconnect GATT Server connection.\n       "
        },
        "_getCharacteristic": {
          "type": "Function",
          "description": "\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis discovered.\n\n"
        },
        "_getPrimaryService": {
          "type": "Function",
          "description": "\nReturns a promise that will resolve when Bluetooth GATT Primary\nService is discovered.\n\n"
        },
        "_handleValueChanged": {
          "type": "Function",
          "description": "\nSave value when characteristic value changed in a notification session.\n"
        },
        "_readCharacteristic": {
          "type": "Function",
          "description": "\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis read.\n\n"
        },
        "_server": {
          "type": "BluetoothGATTRemoteServer",
          "description": "\nInternal variable used to cache Bluetooth GATT remote server.\n         "
        },
        "_service": {
          "type": "BluetoothGATTService",
          "description": "\nInternal variable used to cache Bluetooth GATT primary service.\n         "
        },
        "_serviceChanged": {
          "type": "Function",
          "description": "\nReset internal cache when service property is changed.\n       "
        },
        "_startNotifications": {
          "type": "Function",
          "description": "\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nnotification session starts.\n\n"
        },
        "_stopNotifications": {
          "type": "Function",
          "description": "\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nnotification session stops.\n\n"
        },
        "_valueChanged": {
          "type": "Function",
          "description": "\nAutomatically write value when auto-write property is true and value\nchanged.\n       "
        },
        "_writeCharacteristic": {
          "type": "Function",
          "description": "\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis written.\n\n"
        }
      }
    },
    "platinum-bluetooth-device": {
      "name": "platinum-bluetooth-device",
      "description": "\nThe `&lt;platinum-bluetooth-device&gt;` element allows you to [discover nearby\nbluetooth devices][1] thanks to the young [Web Bluetooth API][2]. It is\ncurrently only partially implemented in Chrome OS 45 and Chrome 49 for\nAndroid behind the experimental flag\n`chrome://flags/#enable-web-bluetooth`.\n\n`&lt;platinum-bluetooth-device&gt;` is used as a parent element for\n`&lt;platinum-bluetooth-service&gt;` child elements.\n\nFor instance, here's how to request a nearby bluetooth device advertising\nBattery service:\n\n```html\n&lt;platinum-bluetooth-device services-filter='[\"battery_service\"]'&gt;\n&lt;/platinum-bluetooth-device&gt;\n```\n```js\nbutton.addEventListener('click', function() {\n  document.querySelector('platinum-bluetooth-device').request()\n  .then(function(device) { console.log(device.name); })\n  .catch(function(error) { console.error(error); });\n});\n```\n\nYou can also request a nearby bluetooth device by setting a filter on\na name or name Prefix:\n\n```html\n&lt;platinum-bluetooth-device name-filter='foobar'&gt;\n&lt;/platinum-bluetooth-device&gt;\n```\n```html\n&lt;platinum-bluetooth-device name-prefix-filter='foo'&gt;\n&lt;/platinum-bluetooth-device&gt;\n```\n\nAnd you can combine some of the filters as well. Here's how to request a\nnearby bluetooth device advertising Battery service and whose name is\n\"foobar\":\n\n```html\n&lt;platinum-bluetooth-device services-filter='[\"battery_service\"]'\n                           name-filter='foobar'&gt;\n&lt;/platinum-bluetooth-device&gt;\n```\n\nDisconnecting manually from a connected bluetooth device is pretty\nstraightforward:\n\n```js\ndisconnectButton.addEventListener('click', function() {\n  document.querySelector('platinum-bluetooth-device').disconnect();\n});\n```\n\n[1]: https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web\n[2]: https://github.com/WebBluetoothCG/web-bluetooth\n\n",
      "attributes": {
        "device": {
          "type": "BluetoothDevice",
          "description": "\nCurrent Bluetooth device picked by user.\n         "
        },
        "disconnect": {
          "type": "Function",
          "description": "\nDisconnect GATT Server connection from current bluetooth device.\n       "
        },
        "nameFilter": {
          "type": "String",
          "description": "\nDevice name filter.\n         "
        },
        "namePrefixFilter": {
          "type": "String",
          "description": "\nDevice name prefix filter.\n         "
        },
        "request": {
          "type": "Function",
          "description": "\nRequest a nearby bluetooth device and returns a Promise that will\nresolve when user picked one Bluetooth device based on filters.\n\nIt must be called on user gesture.\n\n"
        },
        "reset": {
          "type": "Function",
          "description": "\nReset device to pick a new device.\n       "
        },
        "servicesFilter": {
          "type": "Array",
          "description": "\nRequired Bluetooth GATT services filter. You may provide either the\nfull Bluetooth UUID as a string or a short 16- or 32-bit form as\nintegers like 0x180d.\n         "
        },
        "supported": {
          "type": "Boolean",
          "description": "\nIndicates whether the Web Bluetooth API is supported by\nthis browser.\n         "
        },
        "_deviceChanged": {
          "type": "Function",
          "description": "\nUpdate all services when device changes.\n       "
        },
        "_filterChanged": {
          "type": "Function",
          "description": "\nReset device when services-filter, name-filter or name-prefix-filter\nproperty is changed.\n       "
        },
        "created": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "platinum-https-redirect": {
      "name": "platinum-https-redirect",
      "description": "\nThe `&lt;platinum-https-redirect&gt;` element redirects the current page to HTTPS, unless the page is\nloaded from a web server running on `localhost`.\n\nUsing [HTTP Strict Transport Security](https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security)\n(HSTS) can be used to enforce HTTPS for an entire\n[origin](https://html.spec.whatwg.org/multipage/browsers.html#origin), following the first visit to\nany page on the origin. Configuring the underlying web server to\n[redirect](https://en.wikipedia.org/wiki/HTTP_301) all HTTP requests to their HTTPS equivalents\ntakes care of enforcing HTTPS on the initial visit as well.\nBoth options provide a more robust approach to enforcing HTTPS, but require access to the underlying\nweb server's configuration in order to implement.\n\nThis element provides a client-side option when HSTS and server-enforced redirects aren't possible,\nsuch as when deploying code on a shared-hosting provider like\n[GitHub Pages](https://pages.github.com/).\n\nIt comes in handy when used with other `&lt;platinum-*&gt;` elements, since those elements use\n[features which are restricted to HTTPS](http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features),\nwith an exception to support local web servers.\n\nIt can be used by just adding it to any page, e.g.\n\n    &lt;platinum-https-redirect&gt;&lt;/platinum-https-redirect&gt;\n\n",
      "attributes": {
        "_isLocalhost": {
          "type": "Function",
          "description": ""
        },
        "attached": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "platinum-push-messaging": {
      "name": "platinum-push-messaging",
      "description": "\n`&lt;platinum-push-messaging&gt;` sets up a [push messaging][1] subscription\nand allows you to define what happens when a push message is received.\n\nThe element can be placed anywhere, but should only be used once in a\npage. If there are multiple occurrences, only one will be active.\n\n# Sample\n\nFor a complete sample that uses the element, see the [Cat Push\nNotifications][3] project.\n\n# Requirements\nPush messaging is currently only available in Google Chrome, which\nrequires you to configure Google Cloud Messaging. Chrome will check that\nyour page links to a manifest file that contains a `gcm_sender_id` field.\nYou can find full details of how to set all of this up in the [HTML5\nRocks guide to push notifications][1].\n\n# Notification details\nThe data for how a notification should be displayed can come from one of\nthree places.\n\nFirstly, you can specify a URL from which to fetch the message data.\n```\n&lt;platinum-push-messaging\n  message-url=\"notification-data.json\"&gt;\n&lt;/platinum-push-messaging&gt;\n```\n\nThe second way is to send the message data in the body of\nthe push message from your server. In this case you do not need to\nconfigure anything in your page:\n```\n&lt;platinum-push-messaging&gt;&lt;/platinum-push-messaging&gt;\n```\n**Note that this method is not currently supported by any browser**. It\nis, however, defined in the\n[draft W3C specification](http://w3c.github.io/push-api/#the-push-event)\nand this element should use that data when it is implemented in the\nfuture.\n\nIf a message-url is provided then the message body will be ignored in\nfavor of the first method.\n\nThirdly, you can manually define the attributes on the element:\n```\n&lt;platinum-push-messaging\n  title=\"Application updated\"\n  message=\"The application was updated in the background\"\n  icon-url=\"icon.png\"\n  click-url=\"notification.html\"&gt;\n&lt;/platinum-push-messaging&gt;\n```\nThese values will also be used as defaults if one of the other methods\ndoes not provide a value for that property.\n\n# Testing\nIf you have set up Google Cloud Messaging then you can send push messages\nto your browser by following the guide in the [GCM documentation][2].\n\nHowever, for quick client testing there are two options. You can use the\n`testPush` method, which allows you to simulate a push message that\nincludes a payload.\n\nOr, at a lower level, you can open up chrome://serviceworker-internals in\nChrome and use the 'Push' button for the service worker corresponding to\nyour app.\n\n[1]: http://updates.html5rocks.com/2015/03/push-notificatons-on-the-open-web\n[2]: https://developer.android.com/google/gcm/http.html\n[3]: https://github.com/notwaldorf/caturday-post\n\n",
      "attributes": {
        "clickUrl": {
          "type": "String",
          "description": "\nThe default URL to display when a notification is clicked.\n         "
        },
        "dir": {
          "type": "String",
          "description": "\nThe default text direction for the title and body of the\nnotification. Can be `auto`, `ltr` or `rtl`.\n         "
        },
        "disable": {
          "type": "Function",
          "description": "\nRequest push messaging to be disabled.\n\n"
        },
        "enable": {
          "type": "Function",
          "description": "\nRequest push messaging to be enabled.\n\n"
        },
        "enabled": {
          "type": "Boolean",
          "description": "\nIndicates the status of the element. If true, push messages will be\nreceived.\n         "
        },
        "iconUrl": {
          "type": "string",
          "description": "\nThe URL of a default icon for notifications.\n         "
        },
        "lang": {
          "type": "string",
          "description": "\nThe default language to assume for the title and body of the\nnotification. If set this must be a valid\n[BCP 47](https://tools.ietf.org/html/bcp47) language tag.\n         "
        },
        "message": {
          "type": "string",
          "description": "\nThe default notification message.\n         "
        },
        "messageUrl": {
          "type": "string",
          "description": "\nA URL from which message information can be retrieved.\n\nWhen a push event happens that does not contain a message body this\nURL will be fetched. The document will be parsed as JSON, and should\nresult in an object.\n\nThe valid keys for the object are `title`, `message`, `url`, `icon`,\n`tag`, `dir`, `lang`, `noscreen`, `renotify`, `silent`, `sound`,\n`sticky` and `vibrate`. For documentation of these values see the\nattributes of the same names, except that these values override the\nelement attributes.\n         "
        },
        "noscreen": {
          "type": "Boolean",
          "description": "\nIf true then displaying the notification should not turn the device's\nscreen on.\n         "
        },
        "renotify": {
          "type": "Boolean",
          "description": "\nWhen a notification is displayed that has the same `tag` as an\nexisting notification, the existing one will be replaced. If this\nflag is true then such a replacement will cause the user to be\nalerted as though it were a new notification, by vibration or sound\nas appropriate.\n         "
        },
        "silent": {
          "type": "Boolean",
          "description": "\nIf true then displaying the notification should not cause any\nvibration or sound to be played.\n         "
        },
        "sound": {
          "type": "string",
          "description": "\nThe URL of a default sound file to play when a notification is shown.\n         "
        },
        "sticky": {
          "type": "Boolean",
          "description": "\nIf true then the notification should be sticky, meaning that it is\nnot directly dismissable.\n         "
        },
        "subscription": {
          "type": "PushSubscription",
          "description": "\nThe details of the current push subscription, if any.\n         "
        },
        "supported": {
          "type": "Boolean",
          "description": "\nIndicates whether the Push and Notification APIs are supported by\nthis browser.\n         "
        },
        "tag": {
          "type": "string",
          "description": "\nA default tag for the notifications that will be generated by\nthis element. Notifications with the same tag will overwrite one\nanother, so that only one will be shown at once.\n         "
        },
        "testPush": {
          "type": "Function",
          "description": "\nProgrammatically trigger a push message\n\n"
        },
        "title": {
          "type": "string",
          "description": "\nThe default notification title.\n         "
        },
        "vibrate": {
          "type": "Array",
          "description": "\nThe pattern of vibration that should be used by default when a\nnotification is displayed. See\n         "
        },
        "workerUrl": {
          "type": "String",
          "description": "\nThe location of the service worker script required by the element.\nThe script is distributed alongside the main HTML import file for the\nelement, so the location can normally be determined automatically.\nHowever, if you vulcanize your project you will need to include the\nscript in your built project manually and use this property to let\nthe element know how to load it.\n         "
        },
        "_getRegistration": {
          "type": "Function",
          "description": "\nReturns a promise which will resolve to the registration object\nassociated with our current service worker.\n\n"
        },
        "_getWorkerURL": {
          "type": "Function",
          "description": "\nDetermine the URL of the worker based on the currently set parameters\n\n"
        },
        "_messageHandler": {
          "type": "Function",
          "description": "\nEvent handler for the `message` event.\n\n"
        },
        "_registrationReady": {
          "type": "Function",
          "description": "\nReturns a promise that will resolve when the given registration becomes\nactive.\n\n"
        },
        "_serializeOptions": {
          "type": "Function",
          "description": "\nTakes an options object and creates a stable JSON serialization of it.\nThis naive algorithm will only work if the object contains only\nnon-nested properties.\n\n"
        },
        "_updateSubscription": {
          "type": "Function",
          "description": "\nUpdate the subscription property, but only if the value has changed.\nThis prevents triggering the subscription-changed event twice on page\nload.\n       "
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "platinum-sw-cache": {
      "name": "platinum-sw-cache",
      "description": "\nThe `&lt;platinum-sw-cache&gt;` element makes it easy to precache specific resources, perform runtime\ncaching, and serve your cached resources when a network is unavailable.\nUnder the hood, the [sw-toolbox](https://github.com/googlechrome/sw-toolbox) library is used\nfor all the caching and request handling logic.\n`&lt;platinum-sw-cache&gt;` needs to be a child element of `&lt;platinum-sw-register&gt;`.\nA simple, yet useful configuration is\n\n    &lt;platinum-sw-register auto-register&gt;\n      &lt;platinum-sw-cache&gt;&lt;/platinum-sw-cache&gt;\n    &lt;/platinum-sw-register&gt;\n\nThis is enough to have all of the resources your site uses cached at runtime, both local and\ncross-origin.\n(It uses the default `defaultCacheStrategy` of \"networkFirst\".)\nWhen there's a network available, visits to your site will go against the network copy of the\nresources, but if someone visits your site when they're offline, all the cached resources will\nbe used.\n\n",
      "attributes": {
        "cacheConfigFile": {
          "type": "string",
          "description": "\nUsed to configure `&lt;platinum-sw-precache&gt;` behavior via a JSON file instead of via\nattributes. This can come in handy when the configuration (e.g. which files to precache)\ndepends on the results of a build script.\n\nIf configuration for the same properties are provided in both the JSON file and via the\nelement's attributes, then in general the JSON file's values take precedence. The one\nexception is the `precache` property. Any values in the element's `precache` attribute will\nbe concatenated with the values in the JSON file's `precache` property and the set of files\nthat are precached will be the union of the two.\n\nThere's one additional option, `precacheFingerprint`, that can be set in the JSON. If using\na build script that might output a large number of files to precache, its recommended\nthat your build script generate a unique \"fingerprint\" of the files. Any changes to the\n`precacheFingerprint` value will result in the underlying service worker kicking off the\nprocess of caching the files listed in `precache`.\nWhile there are a few different strategies for generating an appropriate\n`precacheFingerprint` value, a process that makes sense is to use a stable hash of the\nserialized `precache` array. That way, any changes to the list of files in `precache`\nwill result in a new `precacheFingerprint` value.\nIf your build script is Node.js based, one way to generate this hash is:\n\n    var md5 = require('crypto').createHash('md5');\n    md5.update(JSON.stringify(precache));\n    var precacheFingerprint = md5.digest('hex');\n\nAlternatively, you could use something like the\n[SHA-1 signature](http://stackoverflow.com/questions/1161869/how-to-get-sha-of-the-latest-commit-from-remote-git-repository)\nof your latest `git` commit for the `precacheFingerprint` value.\n\nAn example file may look like:\n\n    {\n      \"cacheId\": \"my-cache-id\",\n      \"defaultCacheStrategy\": \"fastest\",\n      \"disabled\": false,\n      \"precache\": [\"file1.html\", \"file2.css\"],\n      \"precacheFingerprint\": \"FINGERPRINT_OF_FILES_IN_PRECACHE\"\n    }\n       "
        },
        "cacheId": {
          "type": "string",
          "description": "\nAn id used to construct the name for the\n[Cache](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#cache)\nin which all the resources will be stored.\n\nIf nothing is provided, the default value set in\n[`toolbox.options.cacheName`](https://github.com/GoogleChrome/sw-toolbox/blob/8763dcc9fbc9352d58f184050e2131c42f7b6d68/lib/options.js#L28)\nwill be used.\n\nThe `cacheId` is combined with the service worker's scope to construct the cache name, so\ntwo `&lt;platinum-sw-cache&gt;` elements that are associated with different scopes will use\ndifferent caches.\n       "
        },
        "defaultCacheStrategy": {
          "type": "String",
          "description": "\nThe caching strategy used for all requests, both for local and cross-origin resources.\n\nFor a list of strategies, see the [`sw-toolbox` documentation](https://github.com/GoogleChrome/sw-toolbox#built-in-handlers).\nSpecify a strategy as a string, without the \"toolbox\" prefix. E.g., for\n`toolbox.networkFirst`, set `defaultCacheStrategy` to \"networkFirst\".\n\nNote that the \"cacheFirst\" and \"cacheOnly\" strategies are not recommended, and may be\nexplicitly prevented in a future release. More information can be found at\nhttps://github.com/PolymerElements/platinum-sw#cacheonly--cachefirst-defaultcachestrategy-considered-harmful\n\n"
        },
        "disabled": {
          "type": "Boolean",
          "description": "\nIf set to true, this element will not set up service worker caching. This is useful to\nconditionally enable or disable caching depending on the build environment.\n       "
        },
        "precache": {
          "type": "Array",
          "description": "\nUsed to provide a list of URLs that are always precached as soon as the service worker is\ninstalled. Corresponds to  [`sw-toolbox`'s `precache()` method](https://github.com/GoogleChrome/sw-toolbox#toolboxprecachearrayofurls).\n\nThis is useful for URLs that that wouldn't necessarily be picked up by runtime caching,\ni.e. a list of resources that are needed by one of the subpages of your site, or a list of\nresources that are only loaded via user interaction.\n\n`precache` can be used in conjunction with `cacheConfigFile`, and the two arrays will be\nconcatenated.\n\n"
        },
        "_getParameters": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "platinum-sw-import-script": {
      "name": "platinum-sw-import-script",
      "description": "\nThe `&lt;platinum-sw-import-script&gt;` element is used to import a JavaScript file that is executed\neach time the service worker starts up.\n\n`&lt;platinum-sw-import-script&gt;` needs to be a child element of `&lt;platinum-sw-register&gt;`.\n\nA common use case is to define a custom request handler for a `fetch` event, but it can be used\nfor any type of code that you want to be executed by the service worker.\n\n    &lt;platinum-sw-register auto-register&gt;\n      &lt;platinum-sw-import-script href=\"custom-fetch-handler.js\"&gt;&lt;/platinum-sw-import-script&gt;\n      &lt;platinum-sw-fetch handler=\"customFetchHandler\"\n                         path=\"/(.*)/customFetch\"&gt;&lt;/platinum-sw-fetch&gt;\n    &lt;/platinum-sw-register&gt;\n\nYou can specify multiple `&lt;platinum-sw-import-script&gt;` elements, each one corresponding to a\ndifferent JavaScript file. The JavaScript files will be loaded in the order in which the\n`&lt;platinum-sw-import-script&gt;` elements appear. Under the hood, this results in an\n[`importScripts()`](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts)\ncall made from the context of the service worker.\n   ",
      "attributes": {
        "href": {
          "type": "string",
          "description": "\nThe URL of the JavaScript file that you want imported.\n\nRelative URLs are assumed to be\nrelative to the service worker's script location, which will almost always be the same\nlocation as the page which includes this element.\n       "
        },
        "_getParameters": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "platinum-sw-fetch": {
      "name": "platinum-sw-fetch",
      "description": "\nThe `&lt;platinum-sw-fetch&gt;` element creates custom [`fetch` event](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#fetch-event-section)\nhandlers for given URL patterns. Possible use cases include:\n\n- Using a special caching strategy for specific URLs.\n- Returning static \"fallback\" responses instead of network errors when a remote API\nis unavailable.\n\nIn short, any scenario in which you'd like a service worker to intercept network\nrequests and provide custom response handling.\n\nIf you'd like a single caching policy applied to all same-origin requests, then an alternative\nto using `&lt;platinum-sw-fetch&gt;` is to use `&lt;platinum-sw-cache&gt;` with the `defaultCacheStategy`\nproperty set.\n\nUnder the hood, the [sw-toolbox](https://github.com/googlechrome/sw-toolbox) library is used\nfor all the request handling logic.\n\n`&lt;platinum-sw-fetch&gt;` needs to be a child element of `&lt;platinum-sw-register&gt;`.\n\nAn example configuration is:\n\n    &lt;platinum-sw-register auto-register&gt;\n      &lt;platinum-sw-import-script href=\"custom-fetch-handler.js\"&gt;&lt;/platinum-sw-import-script&gt;\n      &lt;platinum-sw-fetch handler=\"customFetchHandler\"\n                         path=\"/(.*)/customFetch\"&gt;&lt;/platinum-sw-fetch&gt;\n    &lt;/platinum-sw-register&gt;\n\nThis implies that there's a `custom-fetch-handler.js` file in the same directory as the current\npage, which defines a `sw-toolbox` compliant\n[request handler](https://github.com/googlechrome/sw-toolbox#request-handlers) named\n`customFetchHandler`. This definition is imported using `&lt;platinum-sw-import-script&gt;`. The\n`&lt;platinum-sw-fetch&gt;` element takes care of mapping which request paths are handled by\n`customFetchHandler`.\n\nAnything not matching the `path` pattern is ignored by `&lt;platinum-sw-fetch&gt;`,\nand it's possible to have multiple `&lt;platinum-sw-fetch&gt;` elements that each define different\npaths and different handlers. The path matching is performed top-down, starting with the first\n`&lt;platinum-sw-fetch&gt;` element.\n\nThe `path` will, by default, only match same-origin requests. If you'd like to define a custom\nhandler for requests on a specific cross-origin domain, you must use the `origin` parameter\nin conjunction with `path` to match the domains you'd like to handle.\n   ",
      "attributes": {
        "handler": {
          "type": "string",
          "description": "\nThe name of the request handler to use. This should be a `sw-toolbox`-style\n[request handler](https://github.com/googlechrome/sw-toolbox#request-handlers).\n\n`handler` is a `String`, not a `function`, so you're providing the name of a function, not\nthe function itself. It can be a function defined in the\n[`toolbox` scope](https://github.com/googlechrome/sw-toolbox#built-in-handlers)\n(e.g. 'networkFirst', 'fastest', 'networkOnly', etc.) or a function defined in the\n[`ServiceWorkerGlobalScope`](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#service-worker-global-scope),\nlike a function that is defined in a file that's imported via `platinum-sw-import-script`.\n*\n"
        },
        "origin": {
          "type": "string",
          "description": "\nBy default, `path` will only match URLs under the current host (i.e. same-origin requests).\nIf you'd like to apply `handler` to cross-origin requests, then use `origin` to specify\nwhich hosts will match. Setting `origin` is optional.\n\n`origin` is a `String`, but it is used internally to construct a\n[`RegExp` object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions),\nwhich is used for the matching.\n\nNote that the `origin` value will be matched against the full domain name and the protocol.\nIf you want to match  'http' and 'https', then use 'https?://' at the start of your string.\n\nSome examples:\n- `origin=\"https?://.+\\.google\\.com\"` → a RegExp that matches `http` or `https` requests\n  made to any domain that ends in `.google.com`.\n- `origin=\"https://www\\.example\\.com\" → a RegExp that will only match `https` requests to\n  one domain, `www.example.com`.\n\n"
        },
        "path": {
          "type": "string",
          "description": "\nURLs with paths matching `path` will have `handler` applied to them.\n\nBy default, `path` will only match same-origin URLs. If you'd like it to match\ncross-origin URLs, use `path` in conjunction with `origin`.\n\nAs explained in the\n[`sw-toolbox` docs](https://github.com/googlechrome/sw-toolbox#toolboxrouterheadurlpattern-handler-options),\nthe URL path matching is done using the [`path-to-regexp`](https://github.com/pillarjs/path-to-regexp)\nmodule, which is the same logic used in [Express-style routing](http://expressjs.com/guide/routing.html).\n\nIn practice, you need to always use '/' as the first character of your `path`, and then\ncan use '(.*)' as a wildcard.\n\nSome examples:\n- `path=\"/(.*)/customFetch\"` → matches any path that ends with '/customFetch'.\n- `path=\"/customFetch(.*)\"` → matches any path that starts with '/customFetch', optionally\n  followed by other characters.\n\n"
        },
        "_getParameters": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "platinum-sw-offline-analytics": {
      "name": "platinum-sw-offline-analytics",
      "description": "\nThe `&lt;platinum-sw-offline-analytics&gt;` element registers a service worker handler to\nintercepts requests for Google Analytics pings.\n\nIf the HTTP GET for the ping is successful (because the browser is online), then everything\nproceeds as it normally would. If the HTTP GET fails, the ping request is saved to IndexedDB, and each time the service worker\nscript starts up it will attempt to \"replay\" those saved ping requests, giving up after one day\nhas passed.\n\nThe [`qt`](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#qt)\nURL parameter is automatically added to the replayed HTTP GET and set to the number of\nmilliseconds that has passed since the initial ping request was attempted, to ensure that the\noriginal time attribution is correct.\n\n`&lt;platinum-sw-offline-analytics&gt;` does not take care of setting up Google Analytics on your\npage, and assumes that you have [properly configured](https://support.google.com/analytics/answer/1008080)\nGoogle Analytics tracking code registered elsewhere on your page.\n\nSince `&lt;platinum-sw-offline-analytics&gt;` is only useful if the page that is being tracked with\nGoogle Analytics works offline, it's best used in conjunction with the `&lt;platinum-sw-cache&gt;`\nelement, which takes care of caching your site's resources and serving them while offline.\n\nA basic configuration is\n\n    &lt;platinum-sw-register auto-register&gt;\n      &lt;platinum-sw-offline-analytics&gt;&lt;/platinum-sw-offline-analytics&gt;\n      &lt;platinum-sw-cache&gt;&lt;/platinum-sw-cache&gt;\n    &lt;/platinum-sw-register&gt;\n\n   ",
      "attributes": {
        "_getParameters": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "platinum-sw-register": {
      "name": "platinum-sw-register",
      "description": "\nThe `&lt;platinum-sw-register&gt;` element handles\n[service worker](http://www.html5rocks.com/en/tutorials/service-worker/introduction/)\nregistration, reflects the overall service worker state, and coordinates the configuration\nprovided by other Service Worker Elements.\n`&lt;platinum-sw-register&gt;` is used as a parent element for child elements in the\n`&lt;platinum-sw-*&gt;` group.\n\n    &lt;platinum-sw-register skip-waiting\n                          clients-claim\n                          auto-register\n                          state=\"{{state}}\"\n                          on-service-worker-error=\"handleSWError\"\n                          on-service-worker-updated=\"handleSWUpdated\"\n                          on-service-worker-installed=\"handleSWInstalled\"&gt;\n      ...one or more &lt;platinum-sw-*&gt; children which share the service worker registration...\n    &lt;/platinum-sw-register&gt;\n\nPlease see https://github.com/PolymerElements/platinum-sw#top-level-sw-importjs for a\n*crucial* prerequisite file you must create before `&lt;platinum-sw-register&gt;` can be used!\n\n",
      "attributes": {
        "autoRegister": {
          "type": "Boolean",
          "description": "\nWhether this element should automatically register the corresponding service worker as\nsoon as its added to a page.\n\nIf set to `false`, then the service worker won't be automatically registered, and you\nmust call this element's `register()` method if you want service worker functionality.\nThis is useful if, for example, the service worker needs to be configured using\ninformation that isn't immediately available at the time the page loads.\n\nIf set to `true`, the service worker will be automatically registered without having to\ncall any methods.\n       "
        },
        "baseUri": {
          "type": "String",
          "description": "\nThe URI used as a base when constructing relative paths to service worker helper libraries\nthat need to be loaded.\n\nThis can normally be kept set to the default, which will use the directory containing this\nelement as the base. However, if you [Vulcanize](https://github.com/polymer/vulcanize) your\nelements, then the default base might not be appropriate anymore. This will allow you to\noverride it.\n\nSee https://github.com/PolymerElements/platinum-sw#relative-paths--vulcanization for more\ninformation.\n       "
        },
        "clientsClaim": {
          "type": "Boolean",
          "description": "\nWhether the activated service worker should [take immediate control](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#clients-claim-method)\nof any pages under its scope.\n\nIf this is `false`, the service worker won't have any effect until the next time the page\nis visited/reloaded.\nIf this is `true`, it will take control and start handling events for the current page\n(and any pages under the same scope open in other tabs/windows) as soon it's active.\n"
        },
        "href": {
          "type": "String",
          "description": "\nThe service worker script that is [registered](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#navigator-service-worker-register).\nThe script *should* be located at the top level of your site, to ensure that it is able\nto control all the pages on your site.\n\nIt's *strongly* recommended that you create a top-level file named `sw-import.js`\ncontaining only:\n\n`importScripts('bower_components/platinum-sw/service-worker.js');`\n\n(adjust to match the path where your `platinum-sw` element directory can be found).\n\nThis will ensure that your service worker script contains everything needed to play\nnicely with the Service Worker Elements group.\n\n"
        },
        "register": {
          "type": "Function",
          "description": "\nRegisters the service worker based on the configuration options in this element and any\nchild elements.\n\nIf you set the `autoRegister` property to `true`, then this method is called automatically\nat page load.\nIt can be useful to set `autoRegister` to `false` and then explicitly call this method if\nthere are options that are only configured after the page is loaded.\n     "
        },
        "reloadOnInstall": {
          "type": "Boolean",
          "description": "\nWhether the page should be automatically reloaded (via `window.location.reload()`) when\nthe service worker is successfully installed.\n\nWhile it's perfectly valid to continue using a page with a freshly installed service\nworker, it's a common pattern to want to reload it immediately following the install.\nThis ensures that, for example, if you're using a `&lt;platinum-sw-cache&gt;` with an on the\nfly caching strategy, it will get a chance to intercept all the requests needed to render\nyour page and store them in the cache.\n\nIf you don't immediately reload your page, then any resources that were loaded before the\nservice worker was installed (e.g. this `platinum-sw-register.html` file) won't be present\nin the cache until the next time the page is loaded.\n\nNote that this reload will only happen when a service worker is installed for the first\ntime. If the service worker is subsequently updated, it won't trigger another reload.\n       "
        },
        "scope": {
          "type": "String",
          "description": "\nBy default, the service worker will use a scope that applies to all pages at the same\ndirectory level or lower. This is almost certainly what you want, as illustrated by the\nfollowing hypothetical serving setup:\n\n```\n/root/\n  service-worker.js\n  index.html\n  subdir1/\n    index.html\n  subdir2/\n    index.html\n```\n\nSo by default, registering `/root/service-worker.js` will cause the service worker's scope\nto cover `/root/index.html`, `/root/subdir1/index.html`, and /root/subdir2/index.html`.\n\nIf, for some reason, you need to register `/root/service-worker.js` from within\n`/root/subdir1/index.html`, *and* you want that registration to only cover\n`/root/subdir1/**`, you can override this `scope` property and set it to `'./'`.\n\nThere is more context about default scopes and how scope overrides work in\n[this Stack Overflow](http://stackoverflow.com/a/33881341/385997) response.\n\n"
        },
        "skipWaiting": {
          "type": "Boolean",
          "description": "\nWhether an updated service worker should [bypass the `waiting` state](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#service-worker-global-scope-skipwaiting)\nand immediately become `active`.\n\nNormally, during an update, the new service worker stays in the\n`waiting` state until the current page and any other tabs/windows that are using the old\nservice worker are unloaded.\n\nIf this is `false`, an updated service worker won't be activated until all instances of\nthe old server worker have been unloaded.\n\nIf this is `true`, an updated service worker will become `active` immediately.\n"
        },
        "state": {
          "type": "String",
          "description": "\nThe current state of the service worker registered by this element.\n\nOne of:\n- 'installed'\n- 'updated'\n- 'error'\n- 'unsupported'\n       "
        },
        "_constructServiceWorkerUrl": {
          "type": "Function",
          "description": ""
        },
        "_registerServiceWorker": {
          "type": "Function",
          "description": ""
        },
        "_serializeUrlParams": {
          "type": "Function",
          "description": ""
        },
        "_unique": {
          "type": "Function",
          "description": ""
        },
        "_version": {
          "type": "string",
          "description": " kept in sync with the element's release number."
        },
        "attached": {
          "type": "Function",
          "description": ""
        }
      }
    },
    "prism-highlighter": {
      "name": "prism-highlighter",
      "description": "\nSyntax highlighting via [Prism](http://prismjs.com/).\n\nPlace a `&lt;prism-highlighter&gt;` in your document, preferably as a direct child of\n`&lt;body&gt;`. It will listen for `syntax-highlight` events on its parent element,\nand annotate the code being provided via that event.\n\nThe `syntax-highlight` event's detail is expected to have a `code` property\ncontaining the source to highlight. The event detail can optionally contain a\n`lang` property, containing a string like `\"html\"`, `\"js\"`, etc.\n\nThis flow is supported by [`&lt;marked-element&gt;`](https://github.com/PolymerElements/marked-element).\n",
      "attributes": {
        "_detectLang": {
          "type": "Function",
          "description": "\nPicks a Prism formatter based on the `lang` hint and `code`.\n\n"
        },
        "_highlight": {
          "type": "Function",
          "description": "\nHandle the highlighting event, if we can.\n\n"
        },
        "attached": {
          "type": "Function",
          "description": ""
        },
        "detached": {
          "type": "Function",
          "description": ""
        },
        "ready": {
          "type": "Function",
          "description": ""
        }
      }
    }
  }
}