/**
 * This class is generated by jOOQ
 */
package com.bisaga.planitia.generated;


import com.bisaga.planitia.generated.tables.Epic;
import com.bisaga.planitia.generated.tables.SchemaVersion;
import com.bisaga.planitia.generated.tables.Story;
import com.bisaga.planitia.generated.tables.Task;
import com.bisaga.planitia.generated.tables.TaskLink;
import com.bisaga.planitia.generated.tables.UserInfo;
import com.bisaga.planitia.generated.tables.records.EpicRecord;
import com.bisaga.planitia.generated.tables.records.SchemaVersionRecord;
import com.bisaga.planitia.generated.tables.records.StoryRecord;
import com.bisaga.planitia.generated.tables.records.TaskLinkRecord;
import com.bisaga.planitia.generated.tables.records.TaskRecord;
import com.bisaga.planitia.generated.tables.records.UserInfoRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>public</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<EpicRecord, Integer> IDENTITY_EPIC = Identities0.IDENTITY_EPIC;
    public static final Identity<StoryRecord, Integer> IDENTITY_STORY = Identities0.IDENTITY_STORY;
    public static final Identity<TaskRecord, Integer> IDENTITY_TASK = Identities0.IDENTITY_TASK;
    public static final Identity<TaskLinkRecord, Integer> IDENTITY_TASK_LINK = Identities0.IDENTITY_TASK_LINK;
    public static final Identity<UserInfoRecord, Integer> IDENTITY_USER_INFO = Identities0.IDENTITY_USER_INFO;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<EpicRecord> EPIC_PK = UniqueKeys0.EPIC_PK;
    public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PK = UniqueKeys0.SCHEMA_VERSION_PK;
    public static final UniqueKey<StoryRecord> STORY_PK = UniqueKeys0.STORY_PK;
    public static final UniqueKey<TaskRecord> TASK_PK = UniqueKeys0.TASK_PK;
    public static final UniqueKey<TaskLinkRecord> TASK_LINK_PK = UniqueKeys0.TASK_LINK_PK;
    public static final UniqueKey<UserInfoRecord> USER_PK = UniqueKeys0.USER_PK;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<EpicRecord, Integer> IDENTITY_EPIC = createIdentity(Epic.EPIC, Epic.EPIC.ID);
        public static Identity<StoryRecord, Integer> IDENTITY_STORY = createIdentity(Story.STORY, Story.STORY.ID);
        public static Identity<TaskRecord, Integer> IDENTITY_TASK = createIdentity(Task.TASK, Task.TASK.ID);
        public static Identity<TaskLinkRecord, Integer> IDENTITY_TASK_LINK = createIdentity(TaskLink.TASK_LINK, TaskLink.TASK_LINK.ID);
        public static Identity<UserInfoRecord, Integer> IDENTITY_USER_INFO = createIdentity(UserInfo.USER_INFO, UserInfo.USER_INFO.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<EpicRecord> EPIC_PK = createUniqueKey(Epic.EPIC, "epic_pk", Epic.EPIC.ID);
        public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PK = createUniqueKey(SchemaVersion.SCHEMA_VERSION, "schema_version_pk", SchemaVersion.SCHEMA_VERSION.INSTALLED_RANK);
        public static final UniqueKey<StoryRecord> STORY_PK = createUniqueKey(Story.STORY, "story_pk", Story.STORY.ID);
        public static final UniqueKey<TaskRecord> TASK_PK = createUniqueKey(Task.TASK, "task_pk", Task.TASK.ID);
        public static final UniqueKey<TaskLinkRecord> TASK_LINK_PK = createUniqueKey(TaskLink.TASK_LINK, "task_link_pk", TaskLink.TASK_LINK.ID);
        public static final UniqueKey<UserInfoRecord> USER_PK = createUniqueKey(UserInfo.USER_INFO, "user_pk", UserInfo.USER_INFO.ID);
    }
}
