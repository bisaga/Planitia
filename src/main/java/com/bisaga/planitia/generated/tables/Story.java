/**
 * This class is generated by jOOQ
 */
package com.bisaga.planitia.generated.tables;


import com.bisaga.planitia.generated.Keys;
import com.bisaga.planitia.generated.Public;
import com.bisaga.planitia.generated.tables.records.StoryRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Story extends TableImpl<StoryRecord> {

    private static final long serialVersionUID = 1446459577;

    /**
     * The reference instance of <code>public.story</code>
     */
    public static final Story STORY = new Story();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoryRecord> getRecordType() {
        return StoryRecord.class;
    }

    /**
     * The column <code>public.story.id</code>.
     */
    public final TableField<StoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('story_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.story.code</code>.
     */
    public final TableField<StoryRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.story.summary</code>.
     */
    public final TableField<StoryRecord, String> SUMMARY = createField("summary", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.story.description</code>.
     */
    public final TableField<StoryRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.story.author</code>.
     */
    public final TableField<StoryRecord, Integer> AUTHOR = createField("author", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.story.reporter</code>.
     */
    public final TableField<StoryRecord, Integer> REPORTER = createField("reporter", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.story.epic</code>.
     */
    public final TableField<StoryRecord, Integer> EPIC = createField("epic", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.story.created_on</code>.
     */
    public final TableField<StoryRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.story.created_by</code>.
     */
    public final TableField<StoryRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.story.modified_on</code>.
     */
    public final TableField<StoryRecord, Timestamp> MODIFIED_ON = createField("modified_on", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.story.modified_by</code>.
     */
    public final TableField<StoryRecord, String> MODIFIED_BY = createField("modified_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.story</code> table reference
     */
    public Story() {
        this("story", null);
    }

    /**
     * Create an aliased <code>public.story</code> table reference
     */
    public Story(String alias) {
        this(alias, STORY);
    }

    private Story(String alias, Table<StoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Story(String alias, Table<StoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StoryRecord> getPrimaryKey() {
        return Keys.STORY_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StoryRecord>> getKeys() {
        return Arrays.<UniqueKey<StoryRecord>>asList(Keys.STORY_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Story as(String alias) {
        return new Story(alias, this);
    }

    /**
     * Rename this table
     */
    public Story rename(String name) {
        return new Story(name, null);
    }
}
